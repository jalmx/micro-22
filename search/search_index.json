{"config":{"indexing":"full","lang":["es"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Programa Tarjetas Electr\u00f3nicas de control para sistemas Mecatr\u00f3nicos 2022 Documentaci\u00f3n para el aprendizaje del Lenguaje Python con un enfoque b\u00e1sico para quien no ha programado pero tiene nociones de algoritmos, y ahora tendr\u00e1 que aplicar ese conocimiento a un lenguaje especifico. En la segunda parte se abordan los conceptos b\u00e1sicos de GUI para la realizaci\u00f3n de aplicaciones de escritorio. Nota: No se abordara nada relacionado a POO (Programaci\u00f3n Orientada a Objetos), ni creaci\u00f3n de clases, etc. Mapa del sitio","title":"Programa Tarjetas"},{"location":"#programa-tarjetas-electronicas-de-control-para-sistemas-mecatronicos-2022","text":"Documentaci\u00f3n para el aprendizaje del Lenguaje Python con un enfoque b\u00e1sico para quien no ha programado pero tiene nociones de algoritmos, y ahora tendr\u00e1 que aplicar ese conocimiento a un lenguaje especifico. En la segunda parte se abordan los conceptos b\u00e1sicos de GUI para la realizaci\u00f3n de aplicaciones de escritorio. Nota: No se abordara nada relacionado a POO (Programaci\u00f3n Orientada a Objetos), ni creaci\u00f3n de clases, etc.","title":"Programa Tarjetas Electr\u00f3nicas de control para sistemas Mecatr\u00f3nicos 2022"},{"location":"#mapa-del-sitio","text":"","title":"Mapa del sitio"},{"location":"99_Fuentes/","text":"Fuentes Graphical User Interfaces with Tk TkDocs Micropython ESP8266 Referencia Librer\u00eda de Adafruit para fritzing","title":"Fuentes"},{"location":"99_Fuentes/#fuentes","text":"Graphical User Interfaces with Tk TkDocs Micropython ESP8266 Referencia Librer\u00eda de Adafruit para fritzing","title":"Fuentes"},{"location":"ESP8266/","text":"Micropython ESP8266 En esta secci\u00f3n estaremos abarcando el uso de la tarjeta ESP8266 NodeMCU utilizando Micropython . Mapa del sitio M\u00f3dulos de Micropython vs Python3 Temporizadores y Relojes Para utilizar temporizadores se tiene el modulo time : import time time . sleep ( 1 ) # sleep for 1 second time . sleep_ms ( 500 ) # sleep for 500 milliseconds time . sleep_us ( 10 ) # sleep for 10 microseconds start = time . ticks_ms () # get millisecond counter delta = time . ticks_diff ( time . ticks_ms (), start ) # compute time difference El temporizador tiempo un limite, el cual es de 7:41 horas, despu\u00e9s de esto el reloj se desborda, es decir, se reinicia. Relojes (Timers) Son relojes virtuales basado en RTO. Se usa la clase machine.Timer , indicando su ID de -1 . El periodo es en milisegundos . from machine import Timer tim = Timer ( - 1 ) tim . init ( period = 5000 , mode = Timer . ONE_SHOT , callback = lambda t : print ( 1 )) tim . init ( period = 2000 , mode = Timer . PERIODIC , callback = lambda t : print ( 2 )) Fuentes Para la creaci\u00f3n de los esquem\u00e1ticos se usa Fritzing y el componente del ESP8266 desde https://github.com/prasertsakd/esp8266_fritzing","title":"Micropython ESP8266"},{"location":"ESP8266/#micropython-esp8266","text":"En esta secci\u00f3n estaremos abarcando el uso de la tarjeta ESP8266 NodeMCU utilizando Micropython .","title":"Micropython ESP8266"},{"location":"ESP8266/#mapa-del-sitio","text":"","title":"Mapa del sitio"},{"location":"ESP8266/#modulos-de-micropython-vs-python3","text":"","title":"M\u00f3dulos de Micropython vs Python3"},{"location":"ESP8266/#temporizadores-y-relojes","text":"Para utilizar temporizadores se tiene el modulo time : import time time . sleep ( 1 ) # sleep for 1 second time . sleep_ms ( 500 ) # sleep for 500 milliseconds time . sleep_us ( 10 ) # sleep for 10 microseconds start = time . ticks_ms () # get millisecond counter delta = time . ticks_diff ( time . ticks_ms (), start ) # compute time difference El temporizador tiempo un limite, el cual es de 7:41 horas, despu\u00e9s de esto el reloj se desborda, es decir, se reinicia.","title":"Temporizadores y Relojes"},{"location":"ESP8266/#relojes-timers","text":"Son relojes virtuales basado en RTO. Se usa la clase machine.Timer , indicando su ID de -1 . El periodo es en milisegundos . from machine import Timer tim = Timer ( - 1 ) tim . init ( period = 5000 , mode = Timer . ONE_SHOT , callback = lambda t : print ( 1 )) tim . init ( period = 2000 , mode = Timer . PERIODIC , callback = lambda t : print ( 2 ))","title":"Relojes (Timers)"},{"location":"ESP8266/#fuentes","text":"Para la creaci\u00f3n de los esquem\u00e1ticos se usa Fritzing y el componente del ESP8266 desde https://github.com/prasertsakd/esp8266_fritzing","title":"Fuentes"},{"location":"ESP8266/01_instalacion/","text":"Instalaci\u00f3n y Configuraci\u00f3n El firmware Primero que nada se tiene que descargar el firmware que utilizara el ESP8266 ( ir a la pagina ) en este caso vamos a manejar la ultima version de ESP8266 with 2MiB+ flash . Que es el Firmware? Esto es un pedazo de software que se instala en el microcontrolador para que sea capas de leer los archivos de python que vamos a cargar y con ello poder realizar todas las acciones que necesitemos. Dentro del firmware vienen las librer\u00edas nucleo que ser\u00e1n las que podremos utilizar para manipular todas las entradas y salidas fisicas y virtuales, en otras palabras vendr\u00eda siendo el interprete de python que va dentro del chip . Cargando el Firmware Para cargar el firmware tenemos varias maneras. esptool.py : Libreria de hecha en python para preparar al microcontrolador (Win/Linux/Mac) PyFlasher : Herramienta visual que utiliza esptool.py (Win/Mac) Thonny IDE : Entorno de desarrollo para python, incluido placas de desarrollo para ser programados con python, micropython, circuitpython, y todo lo que termine en python (Win/Linux/Mac) nodemcu-flasher : Una herramienta para flashear el firmware para nodemcu (Win). ( No se mostrara como usarse ) esptoo.py Para comenzar necesitamos utilizar el modulo, previamente debemos tener instalado Python en nuestra computadora. Con el comando siguiente pip install esptool Comprobamos que se haya instalado correctamente con el siguiente comando. esptool.py --help Nos debe mostrar un menu con los par\u00e1metros esptool.py v3.2 usage: esptool [-h] [--chip {auto,esp8266,esp32,esp32s2,esp32s3beta2,esp32s3,esp32c3,esp32c6beta,esp32h2,esp8684}] [--port PORT] [--baud BAUD] [--before {default_reset,usb_reset,no_reset,no_reset_no_sync}] [--after {hard_reset,soft_reset,no_reset,no_reset_stub}] [--no-stub] [--trace] [--override-vddsdio [{1.8V,1.9V,OFF}]] [--connect-attempts CONNECT_ATTEMPTS] {load_ram,dump_mem,read_mem,write_mem,write_flash,run,image_info,make_image,elf2image,read_mac,chip_id,flash_id,read_flash_status,write_flash_status,read_flash,verify_flash,erase_flash,erase_region,merge_bin,version,get_security_info} ... Ahora necesitamos el firmware , descargado previamente. Abrimos la terminal de nuestro sistema operativo y colocamos el siguiente comando, recordar la ruta del firmware para poder indicarlo correctamente, junto con el puerto en donde se encuentre nuestra tarjeta . Windows esptool.py --port COM0 --baud 460800 write_flash --flash_size=detect 0 esp8266-20170108-v1.8.7.bin Mac/Linux esptool.py --port /dev/ttyUSB0 --baud 460800 write_flash --flash_size = detect 0 esp8266-20170108-v1.8.7.bin Nota: Si tienes alg\u00fan problema acudir a la documentaci\u00f3n oficial PyFlasher Esta herramienta es lo mismo que esptool.py pero con una interfaz visual la cual nos facilita y nos evita usar la terminal, pero al final utiliza esptool.py por detr\u00e1s para realizar la carga del firmware. Descargar PyFlasher Tutorial para descargar e instalar Thonny IDE Entorno de desarrollo para python, incluido placas de desarrollo para ser programados con python. Con este entorno ya incluye todo lo necesario para la configuraci\u00f3n, control, gesti\u00f3n, comunicaci\u00f3n y programaci\u00f3n para placas que utilizan el lenguaje python para funcionar. Proceso de instalaci\u00f3n Abrir el editor Thonny Vamos al menu superior Tools a la opcion Options... Se nos abrir\u00e1 la siguiente ventana Ahora en los tabs superiores elegimos la opci\u00f3n de Interprete Una vez seleccionada ese tab , se nos mostraran las nuevas opciones En la primera secci\u00f3n vamos a elegir el interprete que vamos a usar, en este caso sera Micropython (ESP8266) ( en su defecto si vas a usar otro elige el que necesitas ) Ahora se nos mostrar otra secci\u00f3n en la parte inferior. Y damos click en la opci\u00f3n de install or update firmware Se nos mostrar la siguiente ventana, en la cual debemos elegir el puerto en donde se encuentra conectada nuestra placa y en el siguiente buscar el firmware que bajamos Con ambos seleccionados, procedemos a dar click en el bot\u00f3n Install Despu\u00e9s de esto, comenzara de manera autom\u00e1tica a cargar el firmware dentro del chip Comienza a cargarse Esperemos hasta que veamos la frase Done Una vez terminado esto, esta lista nuestra tarjeta. Configurar Thonny para comenzar a trabajar Tenemos todos los interpretes que podemos usar Elegimos el interprete que vamos a usar o tenemos cargada en la tarjeta Se nos carga otra secci\u00f3n Ahora elegimos el puerto en donde esta nuestra tarjeta y damos Ok Esta listo el editor para trabajar, en caso que marque error verificar el puerto, probar con cerrar el programar y desconectar la placa; posteriormente conectar la placa y despu\u00e9s, abrir el programa. Mas detalles en la documentaci\u00f3n oficial de Micropython","title":"Instalaci\u00f3n y Configuraci\u00f3n"},{"location":"ESP8266/01_instalacion/#instalacion-y-configuracion","text":"","title":"Instalaci\u00f3n y Configuraci\u00f3n"},{"location":"ESP8266/01_instalacion/#el-firmware","text":"Primero que nada se tiene que descargar el firmware que utilizara el ESP8266 ( ir a la pagina ) en este caso vamos a manejar la ultima version de ESP8266 with 2MiB+ flash .","title":"El firmware"},{"location":"ESP8266/01_instalacion/#que-es-el-firmware","text":"Esto es un pedazo de software que se instala en el microcontrolador para que sea capas de leer los archivos de python que vamos a cargar y con ello poder realizar todas las acciones que necesitemos. Dentro del firmware vienen las librer\u00edas nucleo que ser\u00e1n las que podremos utilizar para manipular todas las entradas y salidas fisicas y virtuales, en otras palabras vendr\u00eda siendo el interprete de python que va dentro del chip .","title":"Que es el Firmware?"},{"location":"ESP8266/01_instalacion/#cargando-el-firmware","text":"Para cargar el firmware tenemos varias maneras. esptool.py : Libreria de hecha en python para preparar al microcontrolador (Win/Linux/Mac) PyFlasher : Herramienta visual que utiliza esptool.py (Win/Mac) Thonny IDE : Entorno de desarrollo para python, incluido placas de desarrollo para ser programados con python, micropython, circuitpython, y todo lo que termine en python (Win/Linux/Mac) nodemcu-flasher : Una herramienta para flashear el firmware para nodemcu (Win). ( No se mostrara como usarse )","title":"Cargando el Firmware"},{"location":"ESP8266/01_instalacion/#esptoopy","text":"Para comenzar necesitamos utilizar el modulo, previamente debemos tener instalado Python en nuestra computadora. Con el comando siguiente pip install esptool Comprobamos que se haya instalado correctamente con el siguiente comando. esptool.py --help Nos debe mostrar un menu con los par\u00e1metros esptool.py v3.2 usage: esptool [-h] [--chip {auto,esp8266,esp32,esp32s2,esp32s3beta2,esp32s3,esp32c3,esp32c6beta,esp32h2,esp8684}] [--port PORT] [--baud BAUD] [--before {default_reset,usb_reset,no_reset,no_reset_no_sync}] [--after {hard_reset,soft_reset,no_reset,no_reset_stub}] [--no-stub] [--trace] [--override-vddsdio [{1.8V,1.9V,OFF}]] [--connect-attempts CONNECT_ATTEMPTS] {load_ram,dump_mem,read_mem,write_mem,write_flash,run,image_info,make_image,elf2image,read_mac,chip_id,flash_id,read_flash_status,write_flash_status,read_flash,verify_flash,erase_flash,erase_region,merge_bin,version,get_security_info} ... Ahora necesitamos el firmware , descargado previamente. Abrimos la terminal de nuestro sistema operativo y colocamos el siguiente comando, recordar la ruta del firmware para poder indicarlo correctamente, junto con el puerto en donde se encuentre nuestra tarjeta . Windows esptool.py --port COM0 --baud 460800 write_flash --flash_size=detect 0 esp8266-20170108-v1.8.7.bin Mac/Linux esptool.py --port /dev/ttyUSB0 --baud 460800 write_flash --flash_size = detect 0 esp8266-20170108-v1.8.7.bin Nota: Si tienes alg\u00fan problema acudir a la documentaci\u00f3n oficial","title":"esptoo.py"},{"location":"ESP8266/01_instalacion/#pyflasher","text":"Esta herramienta es lo mismo que esptool.py pero con una interfaz visual la cual nos facilita y nos evita usar la terminal, pero al final utiliza esptool.py por detr\u00e1s para realizar la carga del firmware. Descargar PyFlasher Tutorial para descargar e instalar","title":"PyFlasher"},{"location":"ESP8266/01_instalacion/#thonny-ide","text":"Entorno de desarrollo para python, incluido placas de desarrollo para ser programados con python. Con este entorno ya incluye todo lo necesario para la configuraci\u00f3n, control, gesti\u00f3n, comunicaci\u00f3n y programaci\u00f3n para placas que utilizan el lenguaje python para funcionar.","title":"Thonny IDE"},{"location":"ESP8266/01_instalacion/#proceso-de-instalacion","text":"Abrir el editor Thonny Vamos al menu superior Tools a la opcion Options... Se nos abrir\u00e1 la siguiente ventana Ahora en los tabs superiores elegimos la opci\u00f3n de Interprete Una vez seleccionada ese tab , se nos mostraran las nuevas opciones En la primera secci\u00f3n vamos a elegir el interprete que vamos a usar, en este caso sera Micropython (ESP8266) ( en su defecto si vas a usar otro elige el que necesitas ) Ahora se nos mostrar otra secci\u00f3n en la parte inferior. Y damos click en la opci\u00f3n de install or update firmware Se nos mostrar la siguiente ventana, en la cual debemos elegir el puerto en donde se encuentra conectada nuestra placa y en el siguiente buscar el firmware que bajamos Con ambos seleccionados, procedemos a dar click en el bot\u00f3n Install Despu\u00e9s de esto, comenzara de manera autom\u00e1tica a cargar el firmware dentro del chip Comienza a cargarse Esperemos hasta que veamos la frase Done Una vez terminado esto, esta lista nuestra tarjeta.","title":"Proceso de instalaci\u00f3n"},{"location":"ESP8266/01_instalacion/#configurar-thonny-para-comenzar-a-trabajar","text":"Tenemos todos los interpretes que podemos usar Elegimos el interprete que vamos a usar o tenemos cargada en la tarjeta Se nos carga otra secci\u00f3n Ahora elegimos el puerto en donde esta nuestra tarjeta y damos Ok Esta listo el editor para trabajar, en caso que marque error verificar el puerto, probar con cerrar el programar y desconectar la placa; posteriormente conectar la placa y despu\u00e9s, abrir el programa. Mas detalles en la documentaci\u00f3n oficial de Micropython","title":"Configurar Thonny para comenzar a trabajar"},{"location":"ESP8266/02_esp8266/","text":"ESP8266 ESP8266 es un System-on-Chip (SoC) con WiFi de Espressif Systems . Especificaciones t\u00e9cnicas del SoC ESP8266 Especificaciones t\u00e9cnicas del microcontrolador obtenidas del datasheet. Este microcontrolador cuenta con un modulo WiFi integrado. Architecture: Xtensa lx106 CPU frequency: 80MHz overclockable to 160MHz Total RAM available: 96KB (part of it reserved for system) BootROM: 64KB Internal FlashROM: None External FlashROM: code and data, via SPI Flash. Normal sizes 512KB-4MB. GPIO: 16 + 1 (GPIOs are multiplexed with other functions, including external FlashROM, UART, deep sleep wake-up, etc.) UART: One RX/TX UART (no hardware handshaking), one TX-only UART. SPI: 2 SPI interfaces (one used for FlashROM). I2C: No native external I2C (bitbang implementation available on any pins). I2S: 1. Programming: using BootROM bootloader from UART. Due to external FlashROM and always-available BootROM bootloader, ESP8266 is not brickable. Obtenido de la documentaci\u00f3n de Micropython Pinout Primero debemos conocer el pinout de nuestra tarjeta, existen alguna variantes de esta placa, pero en general son muy similares. De base puede traer un LED que esta en el pin 2 (no siempre viene) y 2 botones, uno a cada costado de la entrada USB. RST : Reset, para reiniciar la placa o la comunicaci\u00f3n con la computadora FLASH : Flasheo de la placa. Es para cargar el firmware, en ocasiones se necesita. Pinout de la Tarjeta LoLin V3 con el CH340 Variantes de tarjetas Node MCU Hay varias versiones de esta placa, no vamos a entrar en detalles con todas solo las mas completas con respecto a componentes. Diagrama esquem\u00e1tico del Node MCU Como ya se vio existen varias placas, sus variaciones son pocas en general, pero de base todos tiene el mismo microcontrolador ESP8266. Este esquem\u00e1tico V0, viene del repositorio oficial La modificaci\u00f3n siguiente con el drive CP2102 Este esquem\u00e1tico V1, viene del repositorio oficial Ir al PDF completo Proceso Boot Proceso de arranque, ejecuta un script llamado _boot.py . Este es montado en el sistema de archivos en la FlashROM, o si no esta disponible, crea un un modulo de arranque. Una vez montado el sistema de archivos, se ejecuta boot.py . Posteriormente de que se ejecuta el script de arranque, ejecuta main.py , si existe. El script main.py siempre que exista sera lo que comenzara a ejecutarse cada vez que se energice la placa. El c\u00f3digo que se recomienda dentro del script main.py es el siguiente: import my_app my_app . main () Esto permite tener una estructura en el c\u00f3digo limpio, y tambi\u00e9n permite multiples aplicaciones en la tarjeta, e ir cambiando entre ellos. Obtenido de la documentaci\u00f3n de Micropython","title":"ESP8266"},{"location":"ESP8266/02_esp8266/#esp8266","text":"ESP8266 es un System-on-Chip (SoC) con WiFi de Espressif Systems .","title":"ESP8266"},{"location":"ESP8266/02_esp8266/#especificaciones-tecnicas-del-soc-esp8266","text":"Especificaciones t\u00e9cnicas del microcontrolador obtenidas del datasheet. Este microcontrolador cuenta con un modulo WiFi integrado. Architecture: Xtensa lx106 CPU frequency: 80MHz overclockable to 160MHz Total RAM available: 96KB (part of it reserved for system) BootROM: 64KB Internal FlashROM: None External FlashROM: code and data, via SPI Flash. Normal sizes 512KB-4MB. GPIO: 16 + 1 (GPIOs are multiplexed with other functions, including external FlashROM, UART, deep sleep wake-up, etc.) UART: One RX/TX UART (no hardware handshaking), one TX-only UART. SPI: 2 SPI interfaces (one used for FlashROM). I2C: No native external I2C (bitbang implementation available on any pins). I2S: 1. Programming: using BootROM bootloader from UART. Due to external FlashROM and always-available BootROM bootloader, ESP8266 is not brickable. Obtenido de la documentaci\u00f3n de Micropython","title":"Especificaciones t\u00e9cnicas del SoC ESP8266"},{"location":"ESP8266/02_esp8266/#pinout","text":"Primero debemos conocer el pinout de nuestra tarjeta, existen alguna variantes de esta placa, pero en general son muy similares. De base puede traer un LED que esta en el pin 2 (no siempre viene) y 2 botones, uno a cada costado de la entrada USB. RST : Reset, para reiniciar la placa o la comunicaci\u00f3n con la computadora FLASH : Flasheo de la placa. Es para cargar el firmware, en ocasiones se necesita. Pinout de la Tarjeta LoLin V3 con el CH340","title":"Pinout"},{"location":"ESP8266/02_esp8266/#variantes-de-tarjetas-node-mcu","text":"Hay varias versiones de esta placa, no vamos a entrar en detalles con todas solo las mas completas con respecto a componentes.","title":"Variantes de tarjetas Node MCU"},{"location":"ESP8266/02_esp8266/#diagrama-esquematico-del-node-mcu","text":"Como ya se vio existen varias placas, sus variaciones son pocas en general, pero de base todos tiene el mismo microcontrolador ESP8266. Este esquem\u00e1tico V0, viene del repositorio oficial La modificaci\u00f3n siguiente con el drive CP2102 Este esquem\u00e1tico V1, viene del repositorio oficial Ir al PDF completo","title":"Diagrama esquem\u00e1tico del Node MCU"},{"location":"ESP8266/02_esp8266/#proceso-boot","text":"Proceso de arranque, ejecuta un script llamado _boot.py . Este es montado en el sistema de archivos en la FlashROM, o si no esta disponible, crea un un modulo de arranque. Una vez montado el sistema de archivos, se ejecuta boot.py . Posteriormente de que se ejecuta el script de arranque, ejecuta main.py , si existe. El script main.py siempre que exista sera lo que comenzara a ejecutarse cada vez que se energice la placa. El c\u00f3digo que se recomienda dentro del script main.py es el siguiente: import my_app my_app . main () Esto permite tener una estructura en el c\u00f3digo limpio, y tambi\u00e9n permite multiples aplicaciones en la tarjeta, e ir cambiando entre ellos. Obtenido de la documentaci\u00f3n de Micropython","title":"Proceso Boot"},{"location":"ESP8266/03_pines_io/","text":"Pines GPIO Digitales Los pines GPIO (Entradas y salidas de prop\u00f3sito general), no todos los pines se pueden usar, los que se utilizan son 0, 1, 2, 3, 4, 5, 12, 13, 14, 15, 16. Pines de comunicaci\u00f3n Los pines 1 y 3 son de la comunicaci\u00f3n serial UART ( Tx , Rx ); es decir, comunicaci\u00f3n con la computadora. Si cambias su configuraci\u00f3n pierdes comunicaci\u00f3n por USB. Niveles l\u00f3gicos Tenemos que dar las indicaciones para mandar a nivel alto las salidas del microcontrolador; es decir, mandar a un nivel l\u00f3gico 1 o alto o True , esto lo que har\u00e1 ser\u00e1 que a la salida del pin tenga un nivel de voltaje de 5V , en caso de mandarlo a 0 o bajo o False , es equivalente a 0V . Programaci\u00f3n Nivel l\u00f3gico Digital Voltaje False 0 Low 0V True 1 High 3.3V Relaci\u00f3n de pines La serigraf\u00eda que viene en la placa no coincide con los valores que podemos asignar, aqu\u00ed est\u00e1n los valores correspondientes a la serigraf\u00eda y el numero que debemos pasar para indicar lo que queremos controlar. Micropython F\u00edsico Consideraciones 0 D3 1 Rx No usar 2 D4 Led incorporado, enciende en bajo 3 Tx No usar 4 D2 5 D1 6 X No usar 7 X No usar 8 X No usar 9 X No usar 10 X No usar 11 X No usar 12 D6 13 D7 14 D5 15 D8 16 D0 Tiene varias limitaciones Por ejemplo si colocamos el valor de Control pines Primer paso para utilizar los pines, se debe importar el modulo machine from machine import Pin # importamos el modulo para pines pin = Pin ( 0 ) #configuramos un pin y se guarda en una variable (D3) o la otra manera es: import machine #importamos el modulo machine pin = machine . Pin ( 0 ) #configuramos un pin y se guarda en una variable (D3) Configurar I/O Configurar pines como entrada o salida. machine . Pin ( numero_pin , modo , r_pull_up , value = level ) numero_pin : El numero del pin: 0, 2, 4, 5, 12, 13, 14, 15, y 16 modo : definir como entrada o salida Pin.IN : Define como entrada Pin.OUT : Define como salida r_pull_up : activar resistencia pull-up interna del microcontrolador. Solo para cuando es entrada. value : Se puede indicar al crearlo, el nivel que tendr\u00e1 a la salida level : 0 - Bajo (0V) level : 1 - Alto (3.3V) Configurando entradas import machine #importamos pin = machine . Pin ( 0 , machine . Pin . IN ) #configuramos un pin 0 como entrada Podemos activar la resistencia PULL_UP a la entrada import machine #importamos pin = machine . Pin ( 0 , machine . Pin . IN , machine . Pin . PULL_UP ) #configuramos un pin 0 como entrada y su resistencia pull up Nota: GPIO16 no tiene el modo pull-up Configurando salidas import machine #importamos pin = machine . Pin ( 0 , machine . Pin . OUT ) #configuramos un pin 0 como salida Escribiendo y Leyendo el Pin Leer el valor de entrada, solo retorno 0 o 1 pin . value ( 0 ) pin . value ( 1 ) Asignar un valor a la salida, solo se puede asignar 0 o 1 pin . off () # equivalente a pin.value(0) pin . on () # equivalente a pin.value(1) Con nivel asignado al crearlo p5 = Pin ( 5 , Pin . OUT , value = 1 ) # Al crearlo se le da el valor de 1 a la salida Interrupciones externas Todos los pines pueden tener configurado la interrupci\u00f3n externa, excepto el GPIO16, esto se activa cuando cambia el valor de la entrada. Se asigna una funci\u00f3n callback que se ejecuta en el disparo (trigger). Primero se define el funci\u00f3n callback , el cual debe recibir un argumento, debe ser el pin el cual que dispara la funci\u00f3n: def callback ( pin ): print ( 'pin change' , pin ) El siguiente paso es configurar como entrada el pin: from machine import Pin p0 = Pin ( 0 , Pin . IN ) p2 = Pin ( 2 , Pin . IN ) Por ultimo se necesita decirle a los pines cuando se dispararan, y la funci\u00f3n que se llamara cuando este evento sea detectado: p0 . irq ( trigger = Pin . IRQ_FALLING , handler = callback ) p2 . irq ( trigger = Pin . IRQ_RISING | Pin . IRQ_FALLING , handler = callback ) Esto indica que p0 solo se dispara cuando sea un flanco de bajada ; es decir, que pase la se\u00f1al de un alto a bajo ( de 1 a 0 ), mientras que para p2 se activada en flanco de bajada y de subida ; es decir, que pase de alto a bajo ( de 1 a 0 ) y cambio de bajo a alto ( de 0 a 1 ). Mas informaci\u00f3n en la documentaci\u00f3n oficial Nota: Algunas secciones son traducciones directas del sitio de Micropython, realizadas por m\u00ed","title":"Pines GPIO Digitales"},{"location":"ESP8266/03_pines_io/#pines-gpio-digitales","text":"Los pines GPIO (Entradas y salidas de prop\u00f3sito general), no todos los pines se pueden usar, los que se utilizan son 0, 1, 2, 3, 4, 5, 12, 13, 14, 15, 16. Pines de comunicaci\u00f3n Los pines 1 y 3 son de la comunicaci\u00f3n serial UART ( Tx , Rx ); es decir, comunicaci\u00f3n con la computadora. Si cambias su configuraci\u00f3n pierdes comunicaci\u00f3n por USB.","title":"Pines GPIO Digitales"},{"location":"ESP8266/03_pines_io/#niveles-logicos","text":"Tenemos que dar las indicaciones para mandar a nivel alto las salidas del microcontrolador; es decir, mandar a un nivel l\u00f3gico 1 o alto o True , esto lo que har\u00e1 ser\u00e1 que a la salida del pin tenga un nivel de voltaje de 5V , en caso de mandarlo a 0 o bajo o False , es equivalente a 0V . Programaci\u00f3n Nivel l\u00f3gico Digital Voltaje False 0 Low 0V True 1 High 3.3V","title":"Niveles l\u00f3gicos"},{"location":"ESP8266/03_pines_io/#relacion-de-pines","text":"La serigraf\u00eda que viene en la placa no coincide con los valores que podemos asignar, aqu\u00ed est\u00e1n los valores correspondientes a la serigraf\u00eda y el numero que debemos pasar para indicar lo que queremos controlar. Micropython F\u00edsico Consideraciones 0 D3 1 Rx No usar 2 D4 Led incorporado, enciende en bajo 3 Tx No usar 4 D2 5 D1 6 X No usar 7 X No usar 8 X No usar 9 X No usar 10 X No usar 11 X No usar 12 D6 13 D7 14 D5 15 D8 16 D0 Tiene varias limitaciones Por ejemplo si colocamos el valor de","title":"Relaci\u00f3n de pines"},{"location":"ESP8266/03_pines_io/#control-pines","text":"Primer paso para utilizar los pines, se debe importar el modulo machine from machine import Pin # importamos el modulo para pines pin = Pin ( 0 ) #configuramos un pin y se guarda en una variable (D3) o la otra manera es: import machine #importamos el modulo machine pin = machine . Pin ( 0 ) #configuramos un pin y se guarda en una variable (D3)","title":"Control pines"},{"location":"ESP8266/03_pines_io/#configurar-io","text":"Configurar pines como entrada o salida. machine . Pin ( numero_pin , modo , r_pull_up , value = level ) numero_pin : El numero del pin: 0, 2, 4, 5, 12, 13, 14, 15, y 16 modo : definir como entrada o salida Pin.IN : Define como entrada Pin.OUT : Define como salida r_pull_up : activar resistencia pull-up interna del microcontrolador. Solo para cuando es entrada. value : Se puede indicar al crearlo, el nivel que tendr\u00e1 a la salida level : 0 - Bajo (0V) level : 1 - Alto (3.3V) Configurando entradas import machine #importamos pin = machine . Pin ( 0 , machine . Pin . IN ) #configuramos un pin 0 como entrada Podemos activar la resistencia PULL_UP a la entrada import machine #importamos pin = machine . Pin ( 0 , machine . Pin . IN , machine . Pin . PULL_UP ) #configuramos un pin 0 como entrada y su resistencia pull up Nota: GPIO16 no tiene el modo pull-up Configurando salidas import machine #importamos pin = machine . Pin ( 0 , machine . Pin . OUT ) #configuramos un pin 0 como salida","title":"Configurar I/O"},{"location":"ESP8266/03_pines_io/#escribiendo-y-leyendo-el-pin","text":"Leer el valor de entrada, solo retorno 0 o 1 pin . value ( 0 ) pin . value ( 1 ) Asignar un valor a la salida, solo se puede asignar 0 o 1 pin . off () # equivalente a pin.value(0) pin . on () # equivalente a pin.value(1) Con nivel asignado al crearlo p5 = Pin ( 5 , Pin . OUT , value = 1 ) # Al crearlo se le da el valor de 1 a la salida","title":"Escribiendo y Leyendo el Pin"},{"location":"ESP8266/03_pines_io/#interrupciones-externas","text":"Todos los pines pueden tener configurado la interrupci\u00f3n externa, excepto el GPIO16, esto se activa cuando cambia el valor de la entrada. Se asigna una funci\u00f3n callback que se ejecuta en el disparo (trigger). Primero se define el funci\u00f3n callback , el cual debe recibir un argumento, debe ser el pin el cual que dispara la funci\u00f3n: def callback ( pin ): print ( 'pin change' , pin ) El siguiente paso es configurar como entrada el pin: from machine import Pin p0 = Pin ( 0 , Pin . IN ) p2 = Pin ( 2 , Pin . IN ) Por ultimo se necesita decirle a los pines cuando se dispararan, y la funci\u00f3n que se llamara cuando este evento sea detectado: p0 . irq ( trigger = Pin . IRQ_FALLING , handler = callback ) p2 . irq ( trigger = Pin . IRQ_RISING | Pin . IRQ_FALLING , handler = callback ) Esto indica que p0 solo se dispara cuando sea un flanco de bajada ; es decir, que pase la se\u00f1al de un alto a bajo ( de 1 a 0 ), mientras que para p2 se activada en flanco de bajada y de subida ; es decir, que pase de alto a bajo ( de 1 a 0 ) y cambio de bajo a alto ( de 0 a 1 ). Mas informaci\u00f3n en la documentaci\u00f3n oficial Nota: Algunas secciones son traducciones directas del sitio de Micropython, realizadas por m\u00ed","title":"Interrupciones externas"},{"location":"ESP8266/04_ejemplos_io/","text":"Ejemplos control de entradas y salida digitales Control de salidas Encender de LED b\u00e1sico Descripci\u00f3n: Encender el led configurando un pin como salida D1 Material: 1 Led 1 R330 Diagrama: C\u00f3digo: import machine #Importo el modulo para manejo de pines pin = machine . Pin ( 5 , machine . Pin . OUT ) #configuro el pin D1 como salida pin . on () # Mando un 1 a la salida del pin 0 Encender m\u00e1s LEDs Descripci\u00f3n: Control de m\u00e1s salidas y su configuraci\u00f3n, activar D1 y D2 Material: 2 Led 2 R330 Diagrama: C\u00f3digo: import machine #Importo el modulo para manejo de pines pin1 = machine . Pin ( 5 , machine . Pin . OUT ) #configuro el pin D1 como salida pin2 = machine . Pin ( 4 , machine . Pin . OUT ) #configuro el pin D2 como salida pin1 . value ( 1 ) # Mando un 1 a la salida del pin D1 pin2 . on () # Mando un 1 a la salida del pin D2 Parpadear un led 3 veces Descripci\u00f3n: Se debe lograr que parpadee un led 3 veces, en un intervalo de tiempo de medio segundo Material: 2 Led 2 R330 Diagrama: C\u00f3digo: import machine #Importo el modulo para manejo de pines import time # importa el modulo para los retardos time_wait = 1 # declaro una variable que usare para los retardos pin1 = machine . Pin ( 5 , machine . Pin . OUT , value = 0 ) #configuro el pin 0 como salida y lo pongo en bajo time . sleep ( time_wait ) #espero un segundo pin1 . value ( 1 ) # Mando un 1 a la salida del pin D1 time . sleep ( time_wait ) #espero un segundo pin1 . value ( 0 ) # Mando un 0 a la salida del pin D1 time . sleep ( time_wait ) #espero un segundo pin1 . value ( 1 ) # Mando un 1 a la salida del pin D1 time . sleep ( time_wait ) #espero un segundo pin1 . value ( 0 ) # Mando un 0 a la salida del pin D1 time . sleep ( time_wait ) #espero un segundo pin1 . on () # Mando un 1 a la salida del pin D1 time . sleep ( time_wait ) #espero un segundo pin1 . off () # Mando un 0 a la salida del pin D1 time . sleep ( time_wait ) #espero un segundo Blink Descripci\u00f3n: Debe quedar parpadeando un Led por tiempo indefinido, el intervalo sera de 2 segundos. Material: 1 Leds (rojo,verde y \u00e1mbar) 1 R330 Diagrama: C\u00f3digo: import machine #Importo el modulo para manejo de pines import time # importa el modulo para los retardos time_wait = 2 # declaro una variable que usare para los retardos pin1 = machine . Pin ( 5 , machine . Pin . OUT , value = 0 ) #configuro el pin 0 como salida y lo pongo en bajo while True : #ciclo infinito pin1 . value ( 1 ) # Mando un 1 a la salida del pin D1 time . sleep ( time_wait ) #espero un segundo pin1 . value ( 0 ) # Mando un 0 a la salida del pin D1 time . sleep ( time_wait ) #espero un segundo Sem\u00e1foro Descripci\u00f3n: Se debe lograr que parpadee un led 3 veces, en un intervalo de tiempo de medio segundo Material: 3 Leds (rojo,verde y ambar) 3 R330 Diagrama: C\u00f3digo: from machine import Pin #Importo el modulo para manejo de pines from time import sleep # importa el modulo para los retardos time_wait_long = 4 # declaro una variable que usare para los retardos de la luz mas largo time_wait_a = 2 # declaro una variable que usare para los retardos para el amarillo time_wait_blink = 0.5 # declaro una variable que usare para los retardos para el blink del verde led_rojo = machine . Pin ( 5 , machine . Pin . OUT , value = 0 ) #D1 configuro el pin 0 como salida y lo pongo en bajo led_ambar = machine . Pin ( 4 , machine . Pin . OUT , value = 0 ) #D2 configuro el pin 0 como salida y lo pongo en bajo led_verde = machine . Pin ( 0 , machine . Pin . OUT , value = 0 ) #D3 configuro el pin 0 como salida y lo pongo en bajo while True : #ciclo infinito led_rojo . on () # enciendo el led rojo led_ambar . off () # apago el led ambar led_verde . off () # apago el led verde sleep ( time_wait_long ) #espero un segundo led_rojo . off () # apago el led rojo led_ambar . on () # enciendo el led ambar sleep ( time_wait_a ) #espero un segundo led_ambar . off () # apago el led ambar led_verde . on () # enciendo el led verde sleep ( time_wait_a ) #espero un segundo led_verde . off () # apago el led verde # Hago el parpadeo de la luz verde sleep ( time_wait_blink ) # hago el primer parpadeo del verde led_verde . on () # enciendo el led verde sleep ( time_wait_blink ) # hago el primer parpadeo del verde led_verde . off () # apago el led verde sleep ( time_wait_blink ) # hago el primer parpadeo del verde led_verde . on () # enciendo el led verde sleep ( time_wait_blink ) # hago el primer parpadeo del verde led_verde . off () # apago el led verde sleep ( time_wait_blink ) # hago el primer parpadeo del verde led_verde . on () # enciendo el led verde sleep ( time_wait_blink ) # hago el primer parpadeo del verde Leyendo entradas Leyendo entrada Descripci\u00f3n: Leer una entrada digital, encender\u00e1 el LED mientras se mantenga presionado el push button Material: 1 Led 3 R330 1 Push button 1 R1k Diagrama: C\u00f3digo: from machine import Pin from time import sleep_ms # importo la funci\u00f3n sleep_ms boton = Pin ( 5 , Pin . IN ) # configuro D0 como entrada pin1 = Pin ( 4 , Pin . OUT , value = 0 ) #configuro D1 como salida while True : # ciclo infinito if boton . value () == 1 : # leo el valor del bot\u00f3n, si es 1 entro al bloque de c\u00f3digo pin1 . on () #enciendo mi led sleep_ms ( 10 ) #doy un tiempo m\u00ednimo para no saturar al micro pin1 . off () # apago el led Leyendo entrada con blick led Descripci\u00f3n: Mientras se presione el bot\u00f3n los LEDs deben parpadear medio segundo Material: 1 Led 3 R330 1 Push button 1 R1k Diagrama: C\u00f3digo: from machine import Pin from time import sleep_ms # importo la funci\u00f3n sleep_ms boton = Pin ( 5 , Pin . IN ) # configuro D0 como entrada pin1 = Pin ( 4 , Pin . OUT , value = 0 ) #configuro D1 como salida while True : # ciclo infinito if boton . value () == 1 : # leo el valor del bot\u00f3n, si es 1 entro al bloque de c\u00f3digo pin1 . on () #enciendo el led sleep_ms ( 500 ) #doy un tiempo m\u00ednimo para no saturar al micro pin1 . off () #apago el led sleep_ms ( 500 ) #doy un tiempo m\u00ednimo para no saturar al micro pin1 . off () # apago el led Leyendo 2 entradas y blink de 2 leds Descripci\u00f3n: Control de 2 leds, cada uno con su propio push button, mientras sea presionado el push button debe parpadear a 1/4 de segundo, encendido su respectivo LED; en caso que sean presionados ambos push button al mismo tiempo los leds van a parpadear juntos cada 200mS Material: 2 Led 2 R330 2 Push button 2 R1k Diagrama: C\u00f3digo: from machine import Pin from time import sleep_ms # importo la funci\u00f3n sleep_ms pin1 = Pin ( 4 , Pin . OUT , value = 0 ) #configuro D1 como salida boton1 = Pin ( 5 , Pin . IN ) # configuro D2 como salida pin2 = Pin ( 0 , Pin . OUT , value = 0 ) #configuro D3 como salida y lo pongo en bajo boton2 = Pin ( 2 , Pin . IN ) # configuro D4 como entrada, #Nota: Si el pin 2 te da problemas, cambialo a otro pin while True : # ciclo infinito if boton1 . value () == 1 and boton2 . value () == 1 : pin1 . on () #enciendo el led pin2 . on () #enciendo el led sleep_ms ( 200 ) #doy los 200mS pin1 . off () #apago el led pin2 . off () #apago el led sleep_ms ( 200 ) #doy los 200mS elif boton1 . value () == 1 : # leo el valor del bot\u00f3n 1, si es 1 entro al bloque de c\u00f3digo pin1 . on () #enciendo el led sleep_ms ( 250 ) #enciendo 1/4 de segundo pin1 . off () #apago el led sleep_ms ( 250 ) #apago 1/4 de segundo elif boton2 . value () == 1 : # leo el valor del bot\u00f3n 1, si es 1 entro al bloque de c\u00f3digo pin2 . on () #enciendo el led sleep_ms ( 250 ) #enciendo 1/4 de segundo pin2 . off () #apago el led sleep_ms ( 250 ) #apago 1/4 de segundo else : pin1 . off () # apago el led 1 pin2 . off () # apago el led 2 Toggle Descripci\u00f3n: Al presionar el push button se debe encender el led y mantenerse en ese estado; hasta que se vuelva a presionar el led regresar\u00e1 a su estado anterior; es decir, que se apague Material: 1 Led 3 R330 1 Push button 1 R1k Diagrama: C\u00f3digo: # Version de c\u00f3digo V1, version fea y larga from machine import Pin from time import sleep_ms # importo la funci\u00f3n sleep_ms pin1 = Pin ( 4 , Pin . OUT , value = 0 ) #configuro D1 como salida boton1 = Pin ( 5 , Pin . IN ) # configuro D2 como salida status = 0 while True : # ciclo infinito if boton1 . value () and status == 0 : # leo el valor del bot\u00f3n 1, si es 1 entro al bloque de c\u00f3digo sleep_ms ( 100 ) #le doy un tiempo para no saturar pin1 . on () #enciendo el led status = 1 # cambio el estado de mi variable, con ella se si fue o no presionado el boton if boton1 . value and status == 1 : # leo el valor del bot\u00f3n 1, si es 1 entro al bloque de c\u00f3digo sleep_ms ( 100 ) #le doy un tiempo para no saturar pin1 . off () # apago el led status = 0 # cambio el estado de mi variable, con ella se si fue o no presionado el boton --- # Version de c\u00f3digo V2, version Hacker pro from machine import Pin from time import sleep_ms # importo la funci\u00f3n sleep_ms pin1 = Pin ( 4 , Pin . OUT , value = 0 ) #configuro D1 como salida boton1 = Pin ( 5 , Pin . IN ) # configuro D2 como entrada while True : # ciclo infinito if boton1 . value (): # leo el valor del bot\u00f3n 1, si es 1 entro al bloque de c\u00f3digo sleep_ms ( 200 ) #le doy un tiempo por el rebote del boton pin1 . value ( not pin1 . value () ) #tomo el valor actual del pin e invierto su estado y lo asigno al pin, es decir, # si esta encendido, invierto ese valor, por ende; se apaga el led, y viceversa Display 7 segmentos Display de 7 segmentos puede ser de \u00e1nodo o c\u00e1todo com\u00fan; existen displays con mayores segmentos, hasta una matriz de puntos de diferentes resoluciones. Display de 7 segmentos Descripci\u00f3n: Creaci\u00f3n de un contador b\u00e1sico con un display de 7 segmentos, el cual comenzar\u00e1 en 0 y terminar\u00e1 en F , haciendo un conteo hexadecimal, el intervalo de tiempo ser\u00e1 de un segundo, una vez que termine se reinicia autom\u00e1ticamente, volviendo a comenzar el conteo. Material: 1 Display 7 segmentos c\u00e1todo com\u00fan 7 R330 Diagrama: C\u00f3digo: from machine import Pin from time import sleep # importo la funci\u00f3n sleep_ms def display ( A , B , C , D , E , F , G , time = 1 ): # segmentos del display Pin ( 5 , Pin . OUT , value = a ) # segmento A - D1 Pin ( 4 , Pin . OUT , value = a ) # segmento B - D2 Pin ( 0 , Pin . OUT , value = a ) # segmento C - D3 Pin ( 2 , Pin . OUT , value = a ) # segmento D - D4 Pin ( 14 , Pin . OUT , value = a ) # segmento E - D5 Pin ( 12 , Pin . OUT , value = a ) # segmento F - D6 Pin ( 13 , Pin . OUT , value = a ) # segmento G - D7 sleep ( time ) # tiempo entre cambio de numero while True : # creo el digito 0 print ( 'digito 0' ) display ( 1 , 1 , 1 , 1 , 1 , 1 , 0 ) print ( 'digito 1' ) display ( 0 , 1 , 1 , 0 , 0 , 0 , 0 ) print ( 'digito 2' ) display ( 1 , 1 , 0 , 1 , 1 , 0 , 1 ) print ( 'digito 3' ) display ( 1 , 1 , 1 , 1 , 0 , 0 , 1 ) print ( 'digito F' ) display ( 1 , 0 , 0 , 0 , 1 , 1 , 1 ) Mensaje con Display de 7-seg Descripci\u00f3n: Crear un mensaje que se vaya leyendo en el display de 7 segmentos que diga \"HOLA\", el intervalo de cada letra ser\u00e1 de medio segundo; debe quedar de manera indefinida. Material: 1 Display 7 segmentos c\u00e1todo com\u00fan 7 R330 Diagrama: C\u00f3digo: from machine import Pin from time import sleep # importo la funci\u00f3n sleep_ms def display ( number_display = tuple (), time = 1 ): # segmentos del display Pin ( 5 , Pin . OUT , value = number_display [ 0 ]) # segmento A - D1 Pin ( 4 , Pin . OUT , value = number_display [ 1 ]) # segmento B - D2 Pin ( 0 , Pin . OUT , value = number_display [ 2 ]) # segmento C - D3 Pin ( 2 , Pin . OUT , value = number_display [ 3 ]) # segmento D - D4 Pin ( 14 , Pin . OUT , value = number_display [ 4 ]) # segmento E - D5 Pin ( 12 , Pin . OUT , value = number_display [ 5 ]) # segmento F - D6 Pin ( 13 , Pin . OUT , value = number_display [ 6 ]) # segmento G - D7 sleep ( time ) # tiempo entre cambio de numero boton = Pin ( 16 , Pin . IN ) number = 0 numbers = [ (), # H ( 1 , 1 , 1 , 1 , 1 , 1 , 0 ), # O (), # L (), # A ] display ( numbers [ 0 ]) # para mostrar el 0 desde el inicio print ( 'digito ' , number ) while True : # creo el digito 0 if boton . value (): number += 1 sleep ( 0.1 ) if number < len ( numbers ) : print ( 'digito ' , number ) display ( numbers [ number ]) else : number = 0 # reinicio el contador para que comience mostrando el cero display ( numbers [ number ]) print ( 'digito ' , number ) Display de 7 segmentos por bot\u00f3n Descripci\u00f3n: Creaci\u00f3n de un contador b\u00e1sico con un display de 7 segmentos, el cual comenzar\u00e1 en 0 y terminar\u00e1 en F, el cambio se har\u00e1 cada vez que sea presionado un push button Material: 1 Display 7 segmentos c\u00e1todo com\u00fan 7 R330 1 Push button 1 R1k Diagrama: C\u00f3digo: from machine import Pin from time import sleep # importo la funci\u00f3n sleep_ms def display ( number_display = tuple (), time = 1 ): # segmentos del display Pin ( 5 , Pin . OUT , value = number_display [ 0 ]) # segmento A - D1 Pin ( 4 , Pin . OUT , value = number_display [ 1 ]) # segmento B - D2 Pin ( 0 , Pin . OUT , value = number_display [ 2 ]) # segmento C - D3 Pin ( 2 , Pin . OUT , value = number_display [ 3 ]) # segmento D - D4 Pin ( 14 , Pin . OUT , value = number_display [ 4 ]) # segmento E - D5 Pin ( 12 , Pin . OUT , value = number_display [ 5 ]) # segmento F - D6 Pin ( 13 , Pin . OUT , value = number_display [ 6 ]) # segmento G - D7 sleep ( time ) # tiempo entre cambio de numero boton = Pin ( 16 , Pin . IN ) number = 0 numbers = [ ( 1 , 1 , 1 , 1 , 1 , 1 , 0 ), # 0 ( 0 , 1 , 1 , 0 , 0 , 0 , 0 ), # 1 ( 1 , 1 , 0 , 1 , 1 , 0 , 1 ), # 2 ( 1 , 1 , 1 , 1 , 0 , 0 , 1 ), # 3 ( 1 , 0 , 0 , 0 , 1 , 1 , 1 ) # 4 ] display ( numbers [ 0 ]) # para mostrar el 0 desde el inicio print ( 'digito ' , number ) while True : # creo el digito 0 if boton . value (): number += 1 sleep ( 0.1 ) if number < len ( numbers ) : print ( 'digito ' , number ) display ( numbers [ number ]) else : number = 0 # reinicio el contador para que comience mostrando el cero display ( numbers [ number ]) print ( 'digito ' , number ) Control b\u00e1sico de Motores En esta primera secci\u00f3n vamos realizar un control b\u00e1sico de un motor DC de 5V DC. Recuerda que la salida de se\u00f1al del ESP8266 en alto es de 3.3V , por lo tanto, se necesita una fuente adicional. Driver L293D (Controlador) Puesto que los microcontroladores son elementos de control, no son capaces para alimentar cargas altas o cargas especiales (como inductivas), debemos utilizar alg\u00fan elemento que nos ayude a realizar esta tarea. En este caso vamos a usar el Driver L293D por ser el mas com\u00fan, no es el \u00fanico (puedes usar el que quieras o necesites en funci\u00f3n de tu carga). Aqu\u00ed coloco un esquem\u00e1tico de conexi\u00f3n obtenido del datasheet . Control ON/OFF para motor DC Descripci\u00f3n: Con un push boton debes encender el motor, y cuando se vuelva a pulsar el motor se debe apagar Material: 1 Push button 1 R1k 1 Motor DC de 5V 1 Puente H L293 1 Fuente de 5V externa 1 Diodo 1N4158 o 1N4001 Diagrama: C\u00f3digo: from machine import Pin from time import sleep_ms # importo la funci\u00f3n sleep_ms motor = Pin ( 5 , Pin . OUT , value = 0 ) #configuro D1 como salida y el motor comienza apagado boton = Pin ( 4 , Pin . IN ) # configuro D2 como entrada while True : # ciclo infinito if boton . value (): # leo el valor del bot\u00f3n 1, si es 1 entro al bloque de c\u00f3digo sleep_ms ( 200 ) #le doy un tiempo por el rebote del boton motor . value ( not motor . value () ) #tomo el valor actual del pin e invierto su estado y lo asigno al pin, es decir, # si esta encendido, invierto ese valor, por ende; se apaga el led, y viceversa Control bidireccional motor DC Descripci\u00f3n: Realizar un control bidireccional de un motor DC, con un boton gira hacia un sentido, presionando el otro boton en sentido inverso. Mientras esta presionado debe funcionar, de lo contrario se mantiene apagado. Material: 1 Push button 1 R1k 1 Motor DC de 5V 1 Puente H L293 1 Fuente de 5V externa 4 Diodo 1N4158 o 1N4001 Diagrama: C\u00f3digo: from machine import Pin from time import sleep_ms # importo la funci\u00f3n sleep_ms motor_derecha = Pin ( 5 , Pin . OUT , value = 0 ) #configuro D1 como salida y el motor comienza apagado motor_izquierda = Pin ( 4 , Pin . OUT , value = 0 ) #configuro D2 como salida y el motor comienza apagado boton_derecha = Pin ( 0 , Pin . IN ) # configuro D3 como entrada boton_izquierda = Pin ( 2 , Pin . IN ) # configuro D4 como entrada while True : # ciclo infinito if boton_derecha . value (): # leo el valor del bot\u00f3n para giro hacia la derecha, realiza el giro sleep_ms ( 200 ) #le doy un tiempo por el rebote del boton motor_derecha . on () motor_izquierda . off () elif boton_izquierda . value (): # leo el valor del bot\u00f3n para giro hacia la izquierda, realiza el giro sleep_ms ( 200 ) #le doy un tiempo por el rebote del boton motor_derecha . off () motor_izquierda . on () else : # de lo contrario se queda apagado motor_izquierda . off () motor_derecha . off () Control b\u00e1sico de Motor PAP Motores Paso a Pasa (PAP) Unipolar vs Bipolar Existen 2 tipos de motores Paso a Paso, los cuales son muy similares, lo que los diferencia es la cantidad de bobinas y derivaciones. Su control es muy parecido, al final lo que se debe realizar es una conmutaci\u00f3n al de las bobinas, con ello se configura su direcci\u00f3n y velocidad, esto consiste en hacer combinaci\u00f3n de polos magn\u00e9ticos en las bobinas del motor. Secuencia para controlar motores paso a paso Bipolares Un motor paso a paso bipolar necesita invertir la corriente que circula por sus bobinas en una secuencia determinada para provocar el movimiento del eje. Paso Bobina 1A Bobina 1B Bobina 2A Bobina 2B Paso 1 1 0 1 0 Paso 2 1 0 0 1 Paso 3 0 1 0 1 Paso 4 0 1 1 0 Secuencia para controlar motores paso a paso Unipolares Hay tres secuencias para controlar los motores paso a paso unipolares Simple o wave drive : Es una secuencia donde se activa una bobina a la vez. Esto hace que el motor tenga un paso m\u00e1s suave pero por el contrario tenga menos torque y menos retenci\u00f3n. Paso Bobina A Bobina B Bobina C Bobina D Paso 1 1 0 0 0 Paso 2 0 1 0 0 Paso 3 0 0 1 0 Paso 4 0 0 0 1 Normal - Full Step : Es la secuencia m\u00e1s usada y la que recomiendan los fabricantes. Con esta secuencia el motor avanza un paso por vez y siempre hay dos bobinas activadas. Con esto se obtiene un mayor torque y retenci\u00f3n. Paso Bobina A Bobina B Bobina C Bobina D Paso 1 1 1 0 0 Paso 2 0 1 1 0 Paso 3 0 0 1 1 Paso 4 1 0 0 1 Medio paso : Se activan primero dos bobinas y despu\u00e9s solo una y as\u00ed sucesivamente. Esto provoca que el motor avance la mitad del paso real. Esto se traduce en un giro m\u00e1s suave y preciso. Paso Bobina A Bobina B Bobina C Bobina D Paso 1 1 0 0 0 Paso 2 1 1 0 0 Paso 3 0 1 0 0 Paso 4 0 1 1 0 Paso 5 0 0 1 0 Paso 6 0 0 1 1 Paso 7 0 0 0 1 Paso 8 1 0 0 1 Documentaci\u00f3n recomendada Articulo de Adafruit Types of Steppers Motor PAP simple Descripci\u00f3n: Hacer funcionar en un sentido el motor PAP a paso simple, con inversion de giro autom\u00e1tico Material: 1 Motor PAP 1 Driver ULN2003 Fuente externa Diagrama: C\u00f3digo: from machine import Pin from time import sleep_ms , sleep def pap ( pin , signal ): Pin ( pin [ 0 ], Pin . OUT , value = signal [ 0 ]) # bobina A Pin ( pin [ 1 ], Pin . OUT , value = signal [ 1 ]) # bobina B Pin ( pin [ 2 ], Pin . OUT , value = signal [ 2 ]) # bobina C Pin ( pin [ 3 ], Pin . OUT , value = signal [ 3 ]) # bobina D TIME = 250 PINS = [ 5 , 4 , 0 , 2 ] # numero de los pines que usare en el orden de las bobinas A,B,C,D #cuatro pasos izquierda = ( ( 0 , 0 , 0 , 1 ), ( 0 , 0 , 1 , 0 ), ( 0 , 1 , 0 , 0 ), ( 1 , 0 , 0 , 0 ), ) #cuatro pasos derecha = ( ( 1 , 0 , 0 , 0 ), ( 0 , 1 , 0 , 0 ), ( 0 , 0 , 1 , 0 ), ( 0 , 0 , 0 , 1 ), ) while True : print ( \"derecha\" ) for _ in range ( 8 ): # para que de un giro de 360\u00ba for secuencia in derecha : print ( secuencia ) pap ( PINS , secuencia ) sleep_ms ( 500 ) sleep ( 1 ) # espero 1 segundo a dar la vuelta print ( \"izquierda\" ) for _ in range ( 8 ): for secuencia in izquierda : print ( secuencia ) pap ( PINS , secuencia ) sleep_ms ( 500 ) Motor PAP a paso normal Descripci\u00f3n: Hacer funcionar en un sentido el motor PAP a paso normal, de ida y vuelta Material: 1 Motor PAP 1 Driver ULN2003 Fuente externa Diagrama: C\u00f3digo: from machine import Pin from time import sleep_ms , sleep def pap ( pin , signal ): Pin ( pin [ 0 ], Pin . OUT , value = signal [ 0 ]) # bobina A Pin ( pin [ 1 ], Pin . OUT , value = signal [ 1 ]) # bobina B Pin ( pin [ 2 ], Pin . OUT , value = signal [ 2 ]) # bobina C Pin ( pin [ 3 ], Pin . OUT , value = signal [ 3 ]) # bobina D TIME = 250 PINS = [ 5 , 4 , 0 , 2 ] # numero de los pines que usare en el orden de las bobinas A,B,C,D #cuatro pasos izquierda = ( ( 0 , 0 , 1 , 1 ), ( 0 , 1 , 1 , 0 ), ( 1 , 1 , 0 , 0 ), ( 1 , 0 , 0 , 1 ), ) #cuatro pasos derecha = ( ( 1 , 1 , 0 , 0 ), ( 0 , 1 , 1 , 0 ), ( 0 , 0 , 1 , 1 ), ( 1 , 0 , 0 , 1 ), ) while True : print ( \"derecha\" ) for _ in range ( 8 ): for secuencia in derecha : print ( secuencia ) pap ( PINS , secuencia ) sleep_ms ( 500 ) print ( \"izquierda\" ) sleep ( 1 ) for _ in range ( 8 ): for secuencia in izquierda : print ( secuencia ) pap ( PINS , secuencia ) sleep_ms ( 500 ) Motor PAP a medio paso Descripci\u00f3n: Hacer funcionar en un sentido el motor PAP a medio paso, de ida y vuelta Material: 1 Motor PAP 1 Driver ULN2003 Fuente externa Diagrama: C\u00f3digo: from machine import Pin from time import sleep_ms , sleep def pap ( pin , signal ): Pin ( pin [ 0 ], Pin . OUT , value = signal [ 0 ]) # bobina A Pin ( pin [ 1 ], Pin . OUT , value = signal [ 1 ]) # bobina B Pin ( pin [ 2 ], Pin . OUT , value = signal [ 2 ]) # bobina C Pin ( pin [ 3 ], Pin . OUT , value = signal [ 3 ]) # bobina D TIME = 250 PINS = [ 5 , 4 , 0 , 2 ] # numero de los pines que usare en el orden de las bobinas A,B,C,D #ocho pasos izquierda = ( ( 0 , 0 , 0 , 1 ), ( 0 , 0 , 1 , 1 ), ( 0 , 0 , 1 , 0 ), ( 0 , 1 , 1 , 0 ), ( 0 , 1 , 0 , 0 ), ( 1 , 1 , 0 , 0 ), ( 1 , 0 , 0 , 0 ), ( 1 , 0 , 0 , 1 ), ) #ocho pasos derecha = ( ( 1 , 0 , 0 , 0 ), ( 1 , 1 , 0 , 0 ), ( 0 , 1 , 0 , 0 ), ( 0 , 1 , 1 , 0 ), ( 0 , 0 , 1 , 0 ), ( 0 , 0 , 1 , 1 ), ( 0 , 0 , 0 , 1 ), ( 1 , 0 , 0 , 1 ), ) while True : print ( \"derecha\" ) for _ in range ( 8 ): for secuencia in derecha : print ( secuencia ) pap ( PINS , secuencia ) sleep_ms ( 500 ) print ( \"izquierda\" ) sleep ( 1 ) for _ in range ( 8 ): for secuencia in izquierda : print ( secuencia ) pap ( PINS , secuencia ) sleep_ms ( 500 ) Control de cargas AC M\u00f3dulo de Relay Descripci\u00f3n: Encender el modulo del Relay Material: 1 M\u00f3dulo de Relay 1 Carga en AC Diagrama: C\u00f3digo: from machine import Pin #Importo el modulo para manejo de pines relay = Pin ( 5 , Pin . OUT ) #configuro el pin D1 como salida relay . on () # Mando un 1 a la salida del pin 0 M\u00f3dulo de Relay con boton Descripci\u00f3n: Encender el modulo del Relay Material: 1 M\u00f3dulo de Relay 1 Carga AC 1 R1k 1 Push button Diagrama: C\u00f3digo: from machine import Pin from time import sleep_ms # importo la funci\u00f3n sleep_ms relay = Pin ( 5 , Pin . OUT , value = 0 ) #configuro D1 como salida boton = Pin ( 0 , Pin . IN ) # configuro D0 como entrada while True : # ciclo infinito if boton . value (): # leo el valor del bot\u00f3n, si es 1 entro al bloque de c\u00f3digo sleep_ms ( 250 ) #doy un tiempo m\u00ednimo para no saturar al micro relay . value ( not relay . value () ) #enciendo el led","title":"Ejemplos de I/O Digitales"},{"location":"ESP8266/04_ejemplos_io/#ejemplos-control-de-entradas-y-salida-digitales","text":"","title":"Ejemplos control de entradas y salida digitales"},{"location":"ESP8266/04_ejemplos_io/#control-de-salidas","text":"Encender de LED b\u00e1sico Descripci\u00f3n: Encender el led configurando un pin como salida D1 Material: 1 Led 1 R330 Diagrama: C\u00f3digo: import machine #Importo el modulo para manejo de pines pin = machine . Pin ( 5 , machine . Pin . OUT ) #configuro el pin D1 como salida pin . on () # Mando un 1 a la salida del pin 0 Encender m\u00e1s LEDs Descripci\u00f3n: Control de m\u00e1s salidas y su configuraci\u00f3n, activar D1 y D2 Material: 2 Led 2 R330 Diagrama: C\u00f3digo: import machine #Importo el modulo para manejo de pines pin1 = machine . Pin ( 5 , machine . Pin . OUT ) #configuro el pin D1 como salida pin2 = machine . Pin ( 4 , machine . Pin . OUT ) #configuro el pin D2 como salida pin1 . value ( 1 ) # Mando un 1 a la salida del pin D1 pin2 . on () # Mando un 1 a la salida del pin D2 Parpadear un led 3 veces Descripci\u00f3n: Se debe lograr que parpadee un led 3 veces, en un intervalo de tiempo de medio segundo Material: 2 Led 2 R330 Diagrama: C\u00f3digo: import machine #Importo el modulo para manejo de pines import time # importa el modulo para los retardos time_wait = 1 # declaro una variable que usare para los retardos pin1 = machine . Pin ( 5 , machine . Pin . OUT , value = 0 ) #configuro el pin 0 como salida y lo pongo en bajo time . sleep ( time_wait ) #espero un segundo pin1 . value ( 1 ) # Mando un 1 a la salida del pin D1 time . sleep ( time_wait ) #espero un segundo pin1 . value ( 0 ) # Mando un 0 a la salida del pin D1 time . sleep ( time_wait ) #espero un segundo pin1 . value ( 1 ) # Mando un 1 a la salida del pin D1 time . sleep ( time_wait ) #espero un segundo pin1 . value ( 0 ) # Mando un 0 a la salida del pin D1 time . sleep ( time_wait ) #espero un segundo pin1 . on () # Mando un 1 a la salida del pin D1 time . sleep ( time_wait ) #espero un segundo pin1 . off () # Mando un 0 a la salida del pin D1 time . sleep ( time_wait ) #espero un segundo Blink Descripci\u00f3n: Debe quedar parpadeando un Led por tiempo indefinido, el intervalo sera de 2 segundos. Material: 1 Leds (rojo,verde y \u00e1mbar) 1 R330 Diagrama: C\u00f3digo: import machine #Importo el modulo para manejo de pines import time # importa el modulo para los retardos time_wait = 2 # declaro una variable que usare para los retardos pin1 = machine . Pin ( 5 , machine . Pin . OUT , value = 0 ) #configuro el pin 0 como salida y lo pongo en bajo while True : #ciclo infinito pin1 . value ( 1 ) # Mando un 1 a la salida del pin D1 time . sleep ( time_wait ) #espero un segundo pin1 . value ( 0 ) # Mando un 0 a la salida del pin D1 time . sleep ( time_wait ) #espero un segundo Sem\u00e1foro Descripci\u00f3n: Se debe lograr que parpadee un led 3 veces, en un intervalo de tiempo de medio segundo Material: 3 Leds (rojo,verde y ambar) 3 R330 Diagrama: C\u00f3digo: from machine import Pin #Importo el modulo para manejo de pines from time import sleep # importa el modulo para los retardos time_wait_long = 4 # declaro una variable que usare para los retardos de la luz mas largo time_wait_a = 2 # declaro una variable que usare para los retardos para el amarillo time_wait_blink = 0.5 # declaro una variable que usare para los retardos para el blink del verde led_rojo = machine . Pin ( 5 , machine . Pin . OUT , value = 0 ) #D1 configuro el pin 0 como salida y lo pongo en bajo led_ambar = machine . Pin ( 4 , machine . Pin . OUT , value = 0 ) #D2 configuro el pin 0 como salida y lo pongo en bajo led_verde = machine . Pin ( 0 , machine . Pin . OUT , value = 0 ) #D3 configuro el pin 0 como salida y lo pongo en bajo while True : #ciclo infinito led_rojo . on () # enciendo el led rojo led_ambar . off () # apago el led ambar led_verde . off () # apago el led verde sleep ( time_wait_long ) #espero un segundo led_rojo . off () # apago el led rojo led_ambar . on () # enciendo el led ambar sleep ( time_wait_a ) #espero un segundo led_ambar . off () # apago el led ambar led_verde . on () # enciendo el led verde sleep ( time_wait_a ) #espero un segundo led_verde . off () # apago el led verde # Hago el parpadeo de la luz verde sleep ( time_wait_blink ) # hago el primer parpadeo del verde led_verde . on () # enciendo el led verde sleep ( time_wait_blink ) # hago el primer parpadeo del verde led_verde . off () # apago el led verde sleep ( time_wait_blink ) # hago el primer parpadeo del verde led_verde . on () # enciendo el led verde sleep ( time_wait_blink ) # hago el primer parpadeo del verde led_verde . off () # apago el led verde sleep ( time_wait_blink ) # hago el primer parpadeo del verde led_verde . on () # enciendo el led verde sleep ( time_wait_blink ) # hago el primer parpadeo del verde","title":"Control de salidas"},{"location":"ESP8266/04_ejemplos_io/#leyendo-entradas","text":"Leyendo entrada Descripci\u00f3n: Leer una entrada digital, encender\u00e1 el LED mientras se mantenga presionado el push button Material: 1 Led 3 R330 1 Push button 1 R1k Diagrama: C\u00f3digo: from machine import Pin from time import sleep_ms # importo la funci\u00f3n sleep_ms boton = Pin ( 5 , Pin . IN ) # configuro D0 como entrada pin1 = Pin ( 4 , Pin . OUT , value = 0 ) #configuro D1 como salida while True : # ciclo infinito if boton . value () == 1 : # leo el valor del bot\u00f3n, si es 1 entro al bloque de c\u00f3digo pin1 . on () #enciendo mi led sleep_ms ( 10 ) #doy un tiempo m\u00ednimo para no saturar al micro pin1 . off () # apago el led Leyendo entrada con blick led Descripci\u00f3n: Mientras se presione el bot\u00f3n los LEDs deben parpadear medio segundo Material: 1 Led 3 R330 1 Push button 1 R1k Diagrama: C\u00f3digo: from machine import Pin from time import sleep_ms # importo la funci\u00f3n sleep_ms boton = Pin ( 5 , Pin . IN ) # configuro D0 como entrada pin1 = Pin ( 4 , Pin . OUT , value = 0 ) #configuro D1 como salida while True : # ciclo infinito if boton . value () == 1 : # leo el valor del bot\u00f3n, si es 1 entro al bloque de c\u00f3digo pin1 . on () #enciendo el led sleep_ms ( 500 ) #doy un tiempo m\u00ednimo para no saturar al micro pin1 . off () #apago el led sleep_ms ( 500 ) #doy un tiempo m\u00ednimo para no saturar al micro pin1 . off () # apago el led Leyendo 2 entradas y blink de 2 leds Descripci\u00f3n: Control de 2 leds, cada uno con su propio push button, mientras sea presionado el push button debe parpadear a 1/4 de segundo, encendido su respectivo LED; en caso que sean presionados ambos push button al mismo tiempo los leds van a parpadear juntos cada 200mS Material: 2 Led 2 R330 2 Push button 2 R1k Diagrama: C\u00f3digo: from machine import Pin from time import sleep_ms # importo la funci\u00f3n sleep_ms pin1 = Pin ( 4 , Pin . OUT , value = 0 ) #configuro D1 como salida boton1 = Pin ( 5 , Pin . IN ) # configuro D2 como salida pin2 = Pin ( 0 , Pin . OUT , value = 0 ) #configuro D3 como salida y lo pongo en bajo boton2 = Pin ( 2 , Pin . IN ) # configuro D4 como entrada, #Nota: Si el pin 2 te da problemas, cambialo a otro pin while True : # ciclo infinito if boton1 . value () == 1 and boton2 . value () == 1 : pin1 . on () #enciendo el led pin2 . on () #enciendo el led sleep_ms ( 200 ) #doy los 200mS pin1 . off () #apago el led pin2 . off () #apago el led sleep_ms ( 200 ) #doy los 200mS elif boton1 . value () == 1 : # leo el valor del bot\u00f3n 1, si es 1 entro al bloque de c\u00f3digo pin1 . on () #enciendo el led sleep_ms ( 250 ) #enciendo 1/4 de segundo pin1 . off () #apago el led sleep_ms ( 250 ) #apago 1/4 de segundo elif boton2 . value () == 1 : # leo el valor del bot\u00f3n 1, si es 1 entro al bloque de c\u00f3digo pin2 . on () #enciendo el led sleep_ms ( 250 ) #enciendo 1/4 de segundo pin2 . off () #apago el led sleep_ms ( 250 ) #apago 1/4 de segundo else : pin1 . off () # apago el led 1 pin2 . off () # apago el led 2 Toggle Descripci\u00f3n: Al presionar el push button se debe encender el led y mantenerse en ese estado; hasta que se vuelva a presionar el led regresar\u00e1 a su estado anterior; es decir, que se apague Material: 1 Led 3 R330 1 Push button 1 R1k Diagrama: C\u00f3digo: # Version de c\u00f3digo V1, version fea y larga from machine import Pin from time import sleep_ms # importo la funci\u00f3n sleep_ms pin1 = Pin ( 4 , Pin . OUT , value = 0 ) #configuro D1 como salida boton1 = Pin ( 5 , Pin . IN ) # configuro D2 como salida status = 0 while True : # ciclo infinito if boton1 . value () and status == 0 : # leo el valor del bot\u00f3n 1, si es 1 entro al bloque de c\u00f3digo sleep_ms ( 100 ) #le doy un tiempo para no saturar pin1 . on () #enciendo el led status = 1 # cambio el estado de mi variable, con ella se si fue o no presionado el boton if boton1 . value and status == 1 : # leo el valor del bot\u00f3n 1, si es 1 entro al bloque de c\u00f3digo sleep_ms ( 100 ) #le doy un tiempo para no saturar pin1 . off () # apago el led status = 0 # cambio el estado de mi variable, con ella se si fue o no presionado el boton --- # Version de c\u00f3digo V2, version Hacker pro from machine import Pin from time import sleep_ms # importo la funci\u00f3n sleep_ms pin1 = Pin ( 4 , Pin . OUT , value = 0 ) #configuro D1 como salida boton1 = Pin ( 5 , Pin . IN ) # configuro D2 como entrada while True : # ciclo infinito if boton1 . value (): # leo el valor del bot\u00f3n 1, si es 1 entro al bloque de c\u00f3digo sleep_ms ( 200 ) #le doy un tiempo por el rebote del boton pin1 . value ( not pin1 . value () ) #tomo el valor actual del pin e invierto su estado y lo asigno al pin, es decir, # si esta encendido, invierto ese valor, por ende; se apaga el led, y viceversa","title":"Leyendo entradas"},{"location":"ESP8266/04_ejemplos_io/#display-7-segmentos","text":"Display de 7 segmentos puede ser de \u00e1nodo o c\u00e1todo com\u00fan; existen displays con mayores segmentos, hasta una matriz de puntos de diferentes resoluciones. Display de 7 segmentos Descripci\u00f3n: Creaci\u00f3n de un contador b\u00e1sico con un display de 7 segmentos, el cual comenzar\u00e1 en 0 y terminar\u00e1 en F , haciendo un conteo hexadecimal, el intervalo de tiempo ser\u00e1 de un segundo, una vez que termine se reinicia autom\u00e1ticamente, volviendo a comenzar el conteo. Material: 1 Display 7 segmentos c\u00e1todo com\u00fan 7 R330 Diagrama: C\u00f3digo: from machine import Pin from time import sleep # importo la funci\u00f3n sleep_ms def display ( A , B , C , D , E , F , G , time = 1 ): # segmentos del display Pin ( 5 , Pin . OUT , value = a ) # segmento A - D1 Pin ( 4 , Pin . OUT , value = a ) # segmento B - D2 Pin ( 0 , Pin . OUT , value = a ) # segmento C - D3 Pin ( 2 , Pin . OUT , value = a ) # segmento D - D4 Pin ( 14 , Pin . OUT , value = a ) # segmento E - D5 Pin ( 12 , Pin . OUT , value = a ) # segmento F - D6 Pin ( 13 , Pin . OUT , value = a ) # segmento G - D7 sleep ( time ) # tiempo entre cambio de numero while True : # creo el digito 0 print ( 'digito 0' ) display ( 1 , 1 , 1 , 1 , 1 , 1 , 0 ) print ( 'digito 1' ) display ( 0 , 1 , 1 , 0 , 0 , 0 , 0 ) print ( 'digito 2' ) display ( 1 , 1 , 0 , 1 , 1 , 0 , 1 ) print ( 'digito 3' ) display ( 1 , 1 , 1 , 1 , 0 , 0 , 1 ) print ( 'digito F' ) display ( 1 , 0 , 0 , 0 , 1 , 1 , 1 ) Mensaje con Display de 7-seg Descripci\u00f3n: Crear un mensaje que se vaya leyendo en el display de 7 segmentos que diga \"HOLA\", el intervalo de cada letra ser\u00e1 de medio segundo; debe quedar de manera indefinida. Material: 1 Display 7 segmentos c\u00e1todo com\u00fan 7 R330 Diagrama: C\u00f3digo: from machine import Pin from time import sleep # importo la funci\u00f3n sleep_ms def display ( number_display = tuple (), time = 1 ): # segmentos del display Pin ( 5 , Pin . OUT , value = number_display [ 0 ]) # segmento A - D1 Pin ( 4 , Pin . OUT , value = number_display [ 1 ]) # segmento B - D2 Pin ( 0 , Pin . OUT , value = number_display [ 2 ]) # segmento C - D3 Pin ( 2 , Pin . OUT , value = number_display [ 3 ]) # segmento D - D4 Pin ( 14 , Pin . OUT , value = number_display [ 4 ]) # segmento E - D5 Pin ( 12 , Pin . OUT , value = number_display [ 5 ]) # segmento F - D6 Pin ( 13 , Pin . OUT , value = number_display [ 6 ]) # segmento G - D7 sleep ( time ) # tiempo entre cambio de numero boton = Pin ( 16 , Pin . IN ) number = 0 numbers = [ (), # H ( 1 , 1 , 1 , 1 , 1 , 1 , 0 ), # O (), # L (), # A ] display ( numbers [ 0 ]) # para mostrar el 0 desde el inicio print ( 'digito ' , number ) while True : # creo el digito 0 if boton . value (): number += 1 sleep ( 0.1 ) if number < len ( numbers ) : print ( 'digito ' , number ) display ( numbers [ number ]) else : number = 0 # reinicio el contador para que comience mostrando el cero display ( numbers [ number ]) print ( 'digito ' , number ) Display de 7 segmentos por bot\u00f3n Descripci\u00f3n: Creaci\u00f3n de un contador b\u00e1sico con un display de 7 segmentos, el cual comenzar\u00e1 en 0 y terminar\u00e1 en F, el cambio se har\u00e1 cada vez que sea presionado un push button Material: 1 Display 7 segmentos c\u00e1todo com\u00fan 7 R330 1 Push button 1 R1k Diagrama: C\u00f3digo: from machine import Pin from time import sleep # importo la funci\u00f3n sleep_ms def display ( number_display = tuple (), time = 1 ): # segmentos del display Pin ( 5 , Pin . OUT , value = number_display [ 0 ]) # segmento A - D1 Pin ( 4 , Pin . OUT , value = number_display [ 1 ]) # segmento B - D2 Pin ( 0 , Pin . OUT , value = number_display [ 2 ]) # segmento C - D3 Pin ( 2 , Pin . OUT , value = number_display [ 3 ]) # segmento D - D4 Pin ( 14 , Pin . OUT , value = number_display [ 4 ]) # segmento E - D5 Pin ( 12 , Pin . OUT , value = number_display [ 5 ]) # segmento F - D6 Pin ( 13 , Pin . OUT , value = number_display [ 6 ]) # segmento G - D7 sleep ( time ) # tiempo entre cambio de numero boton = Pin ( 16 , Pin . IN ) number = 0 numbers = [ ( 1 , 1 , 1 , 1 , 1 , 1 , 0 ), # 0 ( 0 , 1 , 1 , 0 , 0 , 0 , 0 ), # 1 ( 1 , 1 , 0 , 1 , 1 , 0 , 1 ), # 2 ( 1 , 1 , 1 , 1 , 0 , 0 , 1 ), # 3 ( 1 , 0 , 0 , 0 , 1 , 1 , 1 ) # 4 ] display ( numbers [ 0 ]) # para mostrar el 0 desde el inicio print ( 'digito ' , number ) while True : # creo el digito 0 if boton . value (): number += 1 sleep ( 0.1 ) if number < len ( numbers ) : print ( 'digito ' , number ) display ( numbers [ number ]) else : number = 0 # reinicio el contador para que comience mostrando el cero display ( numbers [ number ]) print ( 'digito ' , number )","title":"Display 7 segmentos"},{"location":"ESP8266/04_ejemplos_io/#control-basico-de-motores","text":"En esta primera secci\u00f3n vamos realizar un control b\u00e1sico de un motor DC de 5V DC. Recuerda que la salida de se\u00f1al del ESP8266 en alto es de 3.3V , por lo tanto, se necesita una fuente adicional.","title":"Control b\u00e1sico de Motores"},{"location":"ESP8266/04_ejemplos_io/#driver-l293d-controlador","text":"Puesto que los microcontroladores son elementos de control, no son capaces para alimentar cargas altas o cargas especiales (como inductivas), debemos utilizar alg\u00fan elemento que nos ayude a realizar esta tarea. En este caso vamos a usar el Driver L293D por ser el mas com\u00fan, no es el \u00fanico (puedes usar el que quieras o necesites en funci\u00f3n de tu carga). Aqu\u00ed coloco un esquem\u00e1tico de conexi\u00f3n obtenido del datasheet . Control ON/OFF para motor DC Descripci\u00f3n: Con un push boton debes encender el motor, y cuando se vuelva a pulsar el motor se debe apagar Material: 1 Push button 1 R1k 1 Motor DC de 5V 1 Puente H L293 1 Fuente de 5V externa 1 Diodo 1N4158 o 1N4001 Diagrama: C\u00f3digo: from machine import Pin from time import sleep_ms # importo la funci\u00f3n sleep_ms motor = Pin ( 5 , Pin . OUT , value = 0 ) #configuro D1 como salida y el motor comienza apagado boton = Pin ( 4 , Pin . IN ) # configuro D2 como entrada while True : # ciclo infinito if boton . value (): # leo el valor del bot\u00f3n 1, si es 1 entro al bloque de c\u00f3digo sleep_ms ( 200 ) #le doy un tiempo por el rebote del boton motor . value ( not motor . value () ) #tomo el valor actual del pin e invierto su estado y lo asigno al pin, es decir, # si esta encendido, invierto ese valor, por ende; se apaga el led, y viceversa Control bidireccional motor DC Descripci\u00f3n: Realizar un control bidireccional de un motor DC, con un boton gira hacia un sentido, presionando el otro boton en sentido inverso. Mientras esta presionado debe funcionar, de lo contrario se mantiene apagado. Material: 1 Push button 1 R1k 1 Motor DC de 5V 1 Puente H L293 1 Fuente de 5V externa 4 Diodo 1N4158 o 1N4001 Diagrama: C\u00f3digo: from machine import Pin from time import sleep_ms # importo la funci\u00f3n sleep_ms motor_derecha = Pin ( 5 , Pin . OUT , value = 0 ) #configuro D1 como salida y el motor comienza apagado motor_izquierda = Pin ( 4 , Pin . OUT , value = 0 ) #configuro D2 como salida y el motor comienza apagado boton_derecha = Pin ( 0 , Pin . IN ) # configuro D3 como entrada boton_izquierda = Pin ( 2 , Pin . IN ) # configuro D4 como entrada while True : # ciclo infinito if boton_derecha . value (): # leo el valor del bot\u00f3n para giro hacia la derecha, realiza el giro sleep_ms ( 200 ) #le doy un tiempo por el rebote del boton motor_derecha . on () motor_izquierda . off () elif boton_izquierda . value (): # leo el valor del bot\u00f3n para giro hacia la izquierda, realiza el giro sleep_ms ( 200 ) #le doy un tiempo por el rebote del boton motor_derecha . off () motor_izquierda . on () else : # de lo contrario se queda apagado motor_izquierda . off () motor_derecha . off ()","title":"Driver L293D (Controlador)"},{"location":"ESP8266/04_ejemplos_io/#control-basico-de-motor-pap","text":"","title":"Control b\u00e1sico de Motor PAP"},{"location":"ESP8266/04_ejemplos_io/#motores-paso-a-pasa-pap-unipolar-vs-bipolar","text":"Existen 2 tipos de motores Paso a Paso, los cuales son muy similares, lo que los diferencia es la cantidad de bobinas y derivaciones. Su control es muy parecido, al final lo que se debe realizar es una conmutaci\u00f3n al de las bobinas, con ello se configura su direcci\u00f3n y velocidad, esto consiste en hacer combinaci\u00f3n de polos magn\u00e9ticos en las bobinas del motor. Secuencia para controlar motores paso a paso Bipolares Un motor paso a paso bipolar necesita invertir la corriente que circula por sus bobinas en una secuencia determinada para provocar el movimiento del eje. Paso Bobina 1A Bobina 1B Bobina 2A Bobina 2B Paso 1 1 0 1 0 Paso 2 1 0 0 1 Paso 3 0 1 0 1 Paso 4 0 1 1 0 Secuencia para controlar motores paso a paso Unipolares Hay tres secuencias para controlar los motores paso a paso unipolares Simple o wave drive : Es una secuencia donde se activa una bobina a la vez. Esto hace que el motor tenga un paso m\u00e1s suave pero por el contrario tenga menos torque y menos retenci\u00f3n. Paso Bobina A Bobina B Bobina C Bobina D Paso 1 1 0 0 0 Paso 2 0 1 0 0 Paso 3 0 0 1 0 Paso 4 0 0 0 1 Normal - Full Step : Es la secuencia m\u00e1s usada y la que recomiendan los fabricantes. Con esta secuencia el motor avanza un paso por vez y siempre hay dos bobinas activadas. Con esto se obtiene un mayor torque y retenci\u00f3n. Paso Bobina A Bobina B Bobina C Bobina D Paso 1 1 1 0 0 Paso 2 0 1 1 0 Paso 3 0 0 1 1 Paso 4 1 0 0 1 Medio paso : Se activan primero dos bobinas y despu\u00e9s solo una y as\u00ed sucesivamente. Esto provoca que el motor avance la mitad del paso real. Esto se traduce en un giro m\u00e1s suave y preciso. Paso Bobina A Bobina B Bobina C Bobina D Paso 1 1 0 0 0 Paso 2 1 1 0 0 Paso 3 0 1 0 0 Paso 4 0 1 1 0 Paso 5 0 0 1 0 Paso 6 0 0 1 1 Paso 7 0 0 0 1 Paso 8 1 0 0 1 Documentaci\u00f3n recomendada Articulo de Adafruit Types of Steppers Motor PAP simple Descripci\u00f3n: Hacer funcionar en un sentido el motor PAP a paso simple, con inversion de giro autom\u00e1tico Material: 1 Motor PAP 1 Driver ULN2003 Fuente externa Diagrama: C\u00f3digo: from machine import Pin from time import sleep_ms , sleep def pap ( pin , signal ): Pin ( pin [ 0 ], Pin . OUT , value = signal [ 0 ]) # bobina A Pin ( pin [ 1 ], Pin . OUT , value = signal [ 1 ]) # bobina B Pin ( pin [ 2 ], Pin . OUT , value = signal [ 2 ]) # bobina C Pin ( pin [ 3 ], Pin . OUT , value = signal [ 3 ]) # bobina D TIME = 250 PINS = [ 5 , 4 , 0 , 2 ] # numero de los pines que usare en el orden de las bobinas A,B,C,D #cuatro pasos izquierda = ( ( 0 , 0 , 0 , 1 ), ( 0 , 0 , 1 , 0 ), ( 0 , 1 , 0 , 0 ), ( 1 , 0 , 0 , 0 ), ) #cuatro pasos derecha = ( ( 1 , 0 , 0 , 0 ), ( 0 , 1 , 0 , 0 ), ( 0 , 0 , 1 , 0 ), ( 0 , 0 , 0 , 1 ), ) while True : print ( \"derecha\" ) for _ in range ( 8 ): # para que de un giro de 360\u00ba for secuencia in derecha : print ( secuencia ) pap ( PINS , secuencia ) sleep_ms ( 500 ) sleep ( 1 ) # espero 1 segundo a dar la vuelta print ( \"izquierda\" ) for _ in range ( 8 ): for secuencia in izquierda : print ( secuencia ) pap ( PINS , secuencia ) sleep_ms ( 500 ) Motor PAP a paso normal Descripci\u00f3n: Hacer funcionar en un sentido el motor PAP a paso normal, de ida y vuelta Material: 1 Motor PAP 1 Driver ULN2003 Fuente externa Diagrama: C\u00f3digo: from machine import Pin from time import sleep_ms , sleep def pap ( pin , signal ): Pin ( pin [ 0 ], Pin . OUT , value = signal [ 0 ]) # bobina A Pin ( pin [ 1 ], Pin . OUT , value = signal [ 1 ]) # bobina B Pin ( pin [ 2 ], Pin . OUT , value = signal [ 2 ]) # bobina C Pin ( pin [ 3 ], Pin . OUT , value = signal [ 3 ]) # bobina D TIME = 250 PINS = [ 5 , 4 , 0 , 2 ] # numero de los pines que usare en el orden de las bobinas A,B,C,D #cuatro pasos izquierda = ( ( 0 , 0 , 1 , 1 ), ( 0 , 1 , 1 , 0 ), ( 1 , 1 , 0 , 0 ), ( 1 , 0 , 0 , 1 ), ) #cuatro pasos derecha = ( ( 1 , 1 , 0 , 0 ), ( 0 , 1 , 1 , 0 ), ( 0 , 0 , 1 , 1 ), ( 1 , 0 , 0 , 1 ), ) while True : print ( \"derecha\" ) for _ in range ( 8 ): for secuencia in derecha : print ( secuencia ) pap ( PINS , secuencia ) sleep_ms ( 500 ) print ( \"izquierda\" ) sleep ( 1 ) for _ in range ( 8 ): for secuencia in izquierda : print ( secuencia ) pap ( PINS , secuencia ) sleep_ms ( 500 ) Motor PAP a medio paso Descripci\u00f3n: Hacer funcionar en un sentido el motor PAP a medio paso, de ida y vuelta Material: 1 Motor PAP 1 Driver ULN2003 Fuente externa Diagrama: C\u00f3digo: from machine import Pin from time import sleep_ms , sleep def pap ( pin , signal ): Pin ( pin [ 0 ], Pin . OUT , value = signal [ 0 ]) # bobina A Pin ( pin [ 1 ], Pin . OUT , value = signal [ 1 ]) # bobina B Pin ( pin [ 2 ], Pin . OUT , value = signal [ 2 ]) # bobina C Pin ( pin [ 3 ], Pin . OUT , value = signal [ 3 ]) # bobina D TIME = 250 PINS = [ 5 , 4 , 0 , 2 ] # numero de los pines que usare en el orden de las bobinas A,B,C,D #ocho pasos izquierda = ( ( 0 , 0 , 0 , 1 ), ( 0 , 0 , 1 , 1 ), ( 0 , 0 , 1 , 0 ), ( 0 , 1 , 1 , 0 ), ( 0 , 1 , 0 , 0 ), ( 1 , 1 , 0 , 0 ), ( 1 , 0 , 0 , 0 ), ( 1 , 0 , 0 , 1 ), ) #ocho pasos derecha = ( ( 1 , 0 , 0 , 0 ), ( 1 , 1 , 0 , 0 ), ( 0 , 1 , 0 , 0 ), ( 0 , 1 , 1 , 0 ), ( 0 , 0 , 1 , 0 ), ( 0 , 0 , 1 , 1 ), ( 0 , 0 , 0 , 1 ), ( 1 , 0 , 0 , 1 ), ) while True : print ( \"derecha\" ) for _ in range ( 8 ): for secuencia in derecha : print ( secuencia ) pap ( PINS , secuencia ) sleep_ms ( 500 ) print ( \"izquierda\" ) sleep ( 1 ) for _ in range ( 8 ): for secuencia in izquierda : print ( secuencia ) pap ( PINS , secuencia ) sleep_ms ( 500 )","title":"Motores Paso a Pasa (PAP) Unipolar vs Bipolar"},{"location":"ESP8266/04_ejemplos_io/#control-de-cargas-ac","text":"M\u00f3dulo de Relay Descripci\u00f3n: Encender el modulo del Relay Material: 1 M\u00f3dulo de Relay 1 Carga en AC Diagrama: C\u00f3digo: from machine import Pin #Importo el modulo para manejo de pines relay = Pin ( 5 , Pin . OUT ) #configuro el pin D1 como salida relay . on () # Mando un 1 a la salida del pin 0 M\u00f3dulo de Relay con boton Descripci\u00f3n: Encender el modulo del Relay Material: 1 M\u00f3dulo de Relay 1 Carga AC 1 R1k 1 Push button Diagrama: C\u00f3digo: from machine import Pin from time import sleep_ms # importo la funci\u00f3n sleep_ms relay = Pin ( 5 , Pin . OUT , value = 0 ) #configuro D1 como salida boton = Pin ( 0 , Pin . IN ) # configuro D0 como entrada while True : # ciclo infinito if boton . value (): # leo el valor del bot\u00f3n, si es 1 entro al bloque de c\u00f3digo sleep_ms ( 250 ) #doy un tiempo m\u00ednimo para no saturar al micro relay . value ( not relay . value () ) #enciendo el led","title":"Control de cargas AC"},{"location":"ESP8266/05_entrada_adc/","text":"Entrada Anal\u00f3gica - ADC El ESP8266 solo tiene una entrada anal\u00f3gica (GPIO 0) el cual puede leer un voltaje anal\u00f3gico y convertirlo a una valor digital. Para configurar la entrada GPIO 0 como ADC: import machine # importo el modulo para control y configuraci\u00f3n de pines adc = machine . ADC ( 0 ) # configuro el GPIO0 como ADC o entrada anal\u00f3gica Para leer el valor en el ADC se realiza con la funci\u00f3n read() adc . read () # esta funci\u00f3n nos retorna el valor que existe en la entrada Los valores que puede devolver la funci\u00f3n read() son entre 0 (para 0.0 volts) hasta 1024 (para 1.0 volts). ADC El ADC solo soporta hasta un 1V directamente, pero en la placa ESP8266 Node MCU tiene un divisor de tension que ajuste el voltaje de 0V a 3.3V , entonces debemos de conocer esta relaci\u00f3n para los c\u00e1lculos que se realicen.","title":"Entrada Anal\u00f3gica - ADC"},{"location":"ESP8266/05_entrada_adc/#entrada-analogica-adc","text":"El ESP8266 solo tiene una entrada anal\u00f3gica (GPIO 0) el cual puede leer un voltaje anal\u00f3gico y convertirlo a una valor digital. Para configurar la entrada GPIO 0 como ADC: import machine # importo el modulo para control y configuraci\u00f3n de pines adc = machine . ADC ( 0 ) # configuro el GPIO0 como ADC o entrada anal\u00f3gica Para leer el valor en el ADC se realiza con la funci\u00f3n read() adc . read () # esta funci\u00f3n nos retorna el valor que existe en la entrada Los valores que puede devolver la funci\u00f3n read() son entre 0 (para 0.0 volts) hasta 1024 (para 1.0 volts). ADC El ADC solo soporta hasta un 1V directamente, pero en la placa ESP8266 Node MCU tiene un divisor de tension que ajuste el voltaje de 0V a 3.3V , entonces debemos de conocer esta relaci\u00f3n para los c\u00e1lculos que se realicen.","title":"Entrada Anal\u00f3gica - ADC"},{"location":"ESP8266/06_ejemplos_adc/","text":"Ejercicios con ADC En esta secci\u00f3n estaremos utilizando el ADC del microcontrolador. Ejemplos control de entradas anal\u00f3gicas Ver el valor del ADC por la terminal Descripci\u00f3n: Encender el led configurando un pin como salida D1 Material: 1 Potenci\u00f3metro Diagrama: C\u00f3digo: import machine # importo el modulo para control y configuraci\u00f3n de pines from time import sleep adc = machine . ADC ( 0 ) # configuro el GPIO0 como ADC o entrada anal\u00f3gica while True : valor = adc . read () # esta funci\u00f3n nos retorna el valor que existe en la entrada print ( valor ) # mando a la terminal el valor del ADC sleep ( 1 ) # espero un segundo Sensor de luz en la terminal Descripci\u00f3n: Mandar el valor que esta recibiendo el sensor de Luz a la terminal Material: 1 LDR 1 R10k 1 LED 1 R330 Diagrama: C\u00f3digo: import machine # importo el modulo para control y configuraci\u00f3n de pines from time import sleep adc = machine . ADC ( 0 ) # configuro el GPIO0 como ADC o entrada anal\u00f3gica while True : value_adc = adc . read () # esta funci\u00f3n nos retorna el valor que existe en la entrada print ( value_adc ) # mando a la terminal el valor del ADC sleep ( 1 ) # espero un segundo Encendido secuencial de luces Descripci\u00f3n: Utilizar el potenci\u00f3metro para ir enciendo 5 leds, es decir, cuando el potenci\u00f3metro este al 0% todos deben estar apagados, con forme vaya subiendo el valor deber\u00e1n ir encendiendo los leds, hasta que llegue aproximadamente al 100% y deben quedar todos los leds encendidos, dividir todo el rango del ADC y hacerlo proporcional para los 5 leds. Material: 1 Potenci\u00f3metro 5 leds 5 R330 Diagrama: C\u00f3digo: # Secuencia de luces from machine import ADC , Pin # importo el modulo para control y configuraci\u00f3n de pines from time import sleep adc = ADC ( 0 ) # configuro el GPIO0 como ADC o entrada anal\u00f3gica led_0 = Pin ( 16 , Pin . OUT , value = 0 ) led_1 = Pin ( 5 , Pin . OUT , value = 0 ) led_2 = Pin ( 4 , Pin . OUT , value = 0 ) led_3 = Pin ( 0 , Pin . OUT , value = 0 ) led_4 = Pin ( 2 , Pin . OUT , value = 0 ) while True : valor = adc . read () # esta funci\u00f3n nos retorna el valor que existe en la entrada if valor < 100 : led_0 . off () led_1 . off () led_2 . off () led_3 . off () led_4 . off () elif valor > 100 and valor <= 300 : led_0 . on () led_1 . off () led_2 . off () led_3 . off () led_4 . off () elif valor > 300 and valor <= 500 : led_0 . on () led_1 . on () led_2 . off () led_3 . off () led_4 . off () elif valor > 500 and valor <= 700 : led_0 . on () led_1 . on () led_2 . on () led_3 . off () led_4 . off () elif valor > 700 and valor < 950 : led_0 . on () led_1 . on () led_2 . on () led_3 . on () led_4 . off () else : led_0 . on () led_1 . on () led_2 . on () led_3 . on () led_4 . on () sleep ( 0.25 ) # espero un segundo","title":"Ejercicios con ADC"},{"location":"ESP8266/06_ejemplos_adc/#ejercicios-con-adc","text":"En esta secci\u00f3n estaremos utilizando el ADC del microcontrolador.","title":"Ejercicios con ADC"},{"location":"ESP8266/06_ejemplos_adc/#ejemplos-control-de-entradas-analogicas","text":"Ver el valor del ADC por la terminal Descripci\u00f3n: Encender el led configurando un pin como salida D1 Material: 1 Potenci\u00f3metro Diagrama: C\u00f3digo: import machine # importo el modulo para control y configuraci\u00f3n de pines from time import sleep adc = machine . ADC ( 0 ) # configuro el GPIO0 como ADC o entrada anal\u00f3gica while True : valor = adc . read () # esta funci\u00f3n nos retorna el valor que existe en la entrada print ( valor ) # mando a la terminal el valor del ADC sleep ( 1 ) # espero un segundo Sensor de luz en la terminal Descripci\u00f3n: Mandar el valor que esta recibiendo el sensor de Luz a la terminal Material: 1 LDR 1 R10k 1 LED 1 R330 Diagrama: C\u00f3digo: import machine # importo el modulo para control y configuraci\u00f3n de pines from time import sleep adc = machine . ADC ( 0 ) # configuro el GPIO0 como ADC o entrada anal\u00f3gica while True : value_adc = adc . read () # esta funci\u00f3n nos retorna el valor que existe en la entrada print ( value_adc ) # mando a la terminal el valor del ADC sleep ( 1 ) # espero un segundo Encendido secuencial de luces Descripci\u00f3n: Utilizar el potenci\u00f3metro para ir enciendo 5 leds, es decir, cuando el potenci\u00f3metro este al 0% todos deben estar apagados, con forme vaya subiendo el valor deber\u00e1n ir encendiendo los leds, hasta que llegue aproximadamente al 100% y deben quedar todos los leds encendidos, dividir todo el rango del ADC y hacerlo proporcional para los 5 leds. Material: 1 Potenci\u00f3metro 5 leds 5 R330 Diagrama: C\u00f3digo: # Secuencia de luces from machine import ADC , Pin # importo el modulo para control y configuraci\u00f3n de pines from time import sleep adc = ADC ( 0 ) # configuro el GPIO0 como ADC o entrada anal\u00f3gica led_0 = Pin ( 16 , Pin . OUT , value = 0 ) led_1 = Pin ( 5 , Pin . OUT , value = 0 ) led_2 = Pin ( 4 , Pin . OUT , value = 0 ) led_3 = Pin ( 0 , Pin . OUT , value = 0 ) led_4 = Pin ( 2 , Pin . OUT , value = 0 ) while True : valor = adc . read () # esta funci\u00f3n nos retorna el valor que existe en la entrada if valor < 100 : led_0 . off () led_1 . off () led_2 . off () led_3 . off () led_4 . off () elif valor > 100 and valor <= 300 : led_0 . on () led_1 . off () led_2 . off () led_3 . off () led_4 . off () elif valor > 300 and valor <= 500 : led_0 . on () led_1 . on () led_2 . off () led_3 . off () led_4 . off () elif valor > 500 and valor <= 700 : led_0 . on () led_1 . on () led_2 . on () led_3 . off () led_4 . off () elif valor > 700 and valor < 950 : led_0 . on () led_1 . on () led_2 . on () led_3 . on () led_4 . off () else : led_0 . on () led_1 . on () led_2 . on () led_3 . on () led_4 . on () sleep ( 0.25 ) # espero un segundo","title":"Ejemplos control de entradas anal\u00f3gicas"},{"location":"ESP8266/07_pwm/","text":"Salida anal\u00f3gica PWM Modulaci\u00f3n de Ancho de Pulso ( Pulse width modulation ( PWM )) es una manera artificial de generar una salida anal\u00f3gica en un pin digital. Existen dos par\u00e1metros asociados al PWM que son la frecuencia y el ciclo de trabajo ( duty cycle ). El ciclo de trabajo define que tan largo sera el estado del pin en alto de un periodo . El m\u00e1ximo ciclo de trabajo es cuando el pin esta todo el tiempo en alto (100%) y el m\u00ednimo todo el tiempo en bajo (0%). En el ESP8266 todos los pines (excepto el GPIO16 o el pin 0) soportan PWM en su salida. Limitaci\u00f3n del PWM La limitaci\u00f3n es que todos deben correr a la misma frecuencia de trabajo, la cual esta entre 1Hz y 1kHz Aplicaci\u00f3n de PWM Para usar el PWM, primero se debe crear un objeto import machine p12 = machine . Pin ( 12 ) Despu\u00e9s, creas un objeto PWM: pwm12 = machine . PWM ( p12 ) Se puede ajustar la frecuencia y el ciclo de trabajo con: pwm12 . freq ( 500 ) pwm12 . duty ( 512 ) La frecuencia va de entre 1 a 1000 , esto es equivalente a 1Hz hasta 1kHz. El ciclo de trabajo va de 0 a 1023 , esto es equivalente a 0% hasta 100% Referencias http://docs.micropython.org/en/latest/esp8266/tutorial/pwm.html","title":"Salida anal\u00f3gica - PWM"},{"location":"ESP8266/07_pwm/#salida-analogica-pwm","text":"Modulaci\u00f3n de Ancho de Pulso ( Pulse width modulation ( PWM )) es una manera artificial de generar una salida anal\u00f3gica en un pin digital. Existen dos par\u00e1metros asociados al PWM que son la frecuencia y el ciclo de trabajo ( duty cycle ). El ciclo de trabajo define que tan largo sera el estado del pin en alto de un periodo . El m\u00e1ximo ciclo de trabajo es cuando el pin esta todo el tiempo en alto (100%) y el m\u00ednimo todo el tiempo en bajo (0%). En el ESP8266 todos los pines (excepto el GPIO16 o el pin 0) soportan PWM en su salida. Limitaci\u00f3n del PWM La limitaci\u00f3n es que todos deben correr a la misma frecuencia de trabajo, la cual esta entre 1Hz y 1kHz","title":"Salida anal\u00f3gica PWM"},{"location":"ESP8266/07_pwm/#aplicacion-de-pwm","text":"Para usar el PWM, primero se debe crear un objeto import machine p12 = machine . Pin ( 12 ) Despu\u00e9s, creas un objeto PWM: pwm12 = machine . PWM ( p12 ) Se puede ajustar la frecuencia y el ciclo de trabajo con: pwm12 . freq ( 500 ) pwm12 . duty ( 512 ) La frecuencia va de entre 1 a 1000 , esto es equivalente a 1Hz hasta 1kHz. El ciclo de trabajo va de 0 a 1023 , esto es equivalente a 0% hasta 100%","title":"Aplicaci\u00f3n de PWM"},{"location":"ESP8266/07_pwm/#referencias","text":"http://docs.micropython.org/en/latest/esp8266/tutorial/pwm.html","title":"Referencias"},{"location":"ESP8266/08_ejemplos_pwm/","text":"Ejercicios con PWM El servomotor se mueve con base a una se\u00f1al PWM, pero la librer\u00eda nos ahorra el trabajo para generar el desplazamiento. Control b\u00e1sico Cambiando el brillo de un LED autom\u00e1ticamente Descripci\u00f3n: Vamos a controlar la intensidad de un LED con una salida PWM Material: 1 R330 1 Led Diagrama: C\u00f3digo: from machine import Pin , PWM # importo el modulo para PWM y configuraci\u00f3n de pines from time import sleep pin = Pin ( 5 ) #Creo el pin led = PWM ( pin ) # configuro el pin como salida PWM while True : for i in range ( 0 , 1024 ): led . duty ( i ) # cargo el valor de 0 a 1023 print ( i ) # mando a la terminal el valor sleep ( 0.5 ) # espero medio segundo Cambiando el brillo de un LED con botones Descripci\u00f3n: Vamos a controlar el intensidad de un LED con 2 botones, uno que incremente y con otro que decremente la intensidad Material: 1 R330 1 Led 2 Push button 2 R1k Diagrama: C\u00f3digo: Cambiando el brillo de un LED con Potenci\u00f3metro Descripci\u00f3n: Vamos a controlar el intensidad de un LED con potenci\u00f3metro la variar su intensidad. Material: 1 Potenci\u00f3metro 1 R330 1 Led Diagrama: C\u00f3digo: LED RGB Para conocer mas detalles de los Leds RGB ir a esta documentaci\u00f3n . Viendo los 16 millones de colores autom\u00e1ticamente Descripci\u00f3n: Realizar un barrido de los colores con un led RGB. Material: 1 R330 1 Led RGB 2 Push button 2 R1k Diagrama: C\u00f3digo: from machine import Pin , PWM # importo el modulo para PWM y configuraci\u00f3n de pines from time import sleep led_r = Pin ( 5 ) #Creo el pin led_g = Pin ( 4 ) #Creo el pin led_b = Pin ( 0 ) #Creo el pin red = PWM ( led_r ) # configuro el pin como salida PWM green = PWM ( led_g ) # configuro el pin como salida PWM blue = PWM ( led_b ) # configuro el pin como salida PWM while True : for r in range ( 0 , 255 ): red . duty ( r ) # cargo el valor de 0 a 1023 for g in range ( 0 , 255 ): green . duty ( g ) # cargo el valor de 0 a 1023 for b in range ( 0 , 255 ): blue . duty ( b ) # cargo el valor de 0 a 1023 sleep ( 0.25 ) # espero medio segundo Viendo los 16 millones de colores con Pot Descripci\u00f3n: Realizar un barrido de los colores con un led RGB, se tendr\u00e1 un bot\u00f3n para seleccionar el color que sera modificado, y este sera variado con un potenci\u00f3metro. Material: 3 R330 1 Led RGB 1 Push button 1 R1k 1 Potenci\u00f3metro Diagrama: C\u00f3digo: Control de velocidad de Motor DC Regulador de velocidad motor DC con botones Descripci\u00f3n: Regulador de velocidad motor DC con botones, es decir, con un bot\u00f3n incrementamos y con otro decrementamos su velocidad. Material: 2 Push button 2 R1k 1 Motor DC 1 Puente H L293D Fuente externa Diagrama: C\u00f3digo: from machine import Pin , PWM # importo el modulo para PWM y configuraci\u00f3n de pines from time import sleep Regulador de velocidad motor DC con Potenci\u00f3metro Descripci\u00f3n: Vamos a controlar la velocidad de un motor con un potenci\u00f3metro. Es decir, al 0% del potenci\u00f3metro equivale al 0% de velocidad y el m\u00e1ximo del ADC corresponde a la maxima velocidad del motor. Material: 1 Potenci\u00f3metro 1 Motor DC 1 Puente H L293D Fuente externa Diagrama: C\u00f3digo: from machine import Pin , ADC , PWM # importo el modulo para PWM y configuraci\u00f3n de pines from time import sleep Servomotor El servomotor que utilizaremos el SG-90, es un servomotor b\u00e1sico. Este motor necesita la siguiente se\u00f1al para poder generar su desplazamiento: Atenci\u00f3n Un servomotor solo se puede desplazar desde 0\u00b0 hasta 180\u00b0. Por default siempre esta en 90\u00b0. Pero, com\u00fanmente se considera 0\u00b0, dado que gira hasta 90\u00b0 y -90\u00b0. Giro del Servomotor autom\u00e1ticamente Descripci\u00f3n: Controlar un Servomotor, se debe colocar en diversos \u00e1ngulos y repetir de manera indefinida. Los \u00e1ngulos a los que se desplazar son 0\u00b0,30\u00b0,60\u00b0,90\u00b0,120\u00b0,160\u00b0,180\u00b0 y volver al inicio. Material: 1 Servomotor Diagrama: C\u00f3digo: from machine import Pin , PWM from time import sleep Giro del Servomotor con botones Descripci\u00f3n: Cambiar el angulo de un servomotor con botones, es decir, con uno incrementa su angulo y con el segundo la decrementar. Material: 1 Servomotor 2 Push button 2 R1k Diagrama: C\u00f3digo: from machine import Pin , PWM from time import sleep Giro del Servomotor con potenci\u00f3metro Descripci\u00f3n: Hacer girar un servomotor en funci\u00f3n de la posici\u00f3n de un potenci\u00f3metro. Es decir, si esta en 0 el potenci\u00f3metro, sera 0\u00b0; en 0.5 sera 90\u00b0 y al 100% ser\u00e1n 180\u00b0. Material: 1 Potenci\u00f3metro 1 Servomotor Diagrama: C\u00f3digo: from machine import Pin , PWM from time import sleep","title":"Ejercicios con PWM"},{"location":"ESP8266/08_ejemplos_pwm/#ejercicios-con-pwm","text":"El servomotor se mueve con base a una se\u00f1al PWM, pero la librer\u00eda nos ahorra el trabajo para generar el desplazamiento.","title":"Ejercicios con PWM"},{"location":"ESP8266/08_ejemplos_pwm/#control-basico","text":"Cambiando el brillo de un LED autom\u00e1ticamente Descripci\u00f3n: Vamos a controlar la intensidad de un LED con una salida PWM Material: 1 R330 1 Led Diagrama: C\u00f3digo: from machine import Pin , PWM # importo el modulo para PWM y configuraci\u00f3n de pines from time import sleep pin = Pin ( 5 ) #Creo el pin led = PWM ( pin ) # configuro el pin como salida PWM while True : for i in range ( 0 , 1024 ): led . duty ( i ) # cargo el valor de 0 a 1023 print ( i ) # mando a la terminal el valor sleep ( 0.5 ) # espero medio segundo Cambiando el brillo de un LED con botones Descripci\u00f3n: Vamos a controlar el intensidad de un LED con 2 botones, uno que incremente y con otro que decremente la intensidad Material: 1 R330 1 Led 2 Push button 2 R1k Diagrama: C\u00f3digo: Cambiando el brillo de un LED con Potenci\u00f3metro Descripci\u00f3n: Vamos a controlar el intensidad de un LED con potenci\u00f3metro la variar su intensidad. Material: 1 Potenci\u00f3metro 1 R330 1 Led Diagrama: C\u00f3digo:","title":"Control b\u00e1sico"},{"location":"ESP8266/08_ejemplos_pwm/#led-rgb","text":"Para conocer mas detalles de los Leds RGB ir a esta documentaci\u00f3n . Viendo los 16 millones de colores autom\u00e1ticamente Descripci\u00f3n: Realizar un barrido de los colores con un led RGB. Material: 1 R330 1 Led RGB 2 Push button 2 R1k Diagrama: C\u00f3digo: from machine import Pin , PWM # importo el modulo para PWM y configuraci\u00f3n de pines from time import sleep led_r = Pin ( 5 ) #Creo el pin led_g = Pin ( 4 ) #Creo el pin led_b = Pin ( 0 ) #Creo el pin red = PWM ( led_r ) # configuro el pin como salida PWM green = PWM ( led_g ) # configuro el pin como salida PWM blue = PWM ( led_b ) # configuro el pin como salida PWM while True : for r in range ( 0 , 255 ): red . duty ( r ) # cargo el valor de 0 a 1023 for g in range ( 0 , 255 ): green . duty ( g ) # cargo el valor de 0 a 1023 for b in range ( 0 , 255 ): blue . duty ( b ) # cargo el valor de 0 a 1023 sleep ( 0.25 ) # espero medio segundo Viendo los 16 millones de colores con Pot Descripci\u00f3n: Realizar un barrido de los colores con un led RGB, se tendr\u00e1 un bot\u00f3n para seleccionar el color que sera modificado, y este sera variado con un potenci\u00f3metro. Material: 3 R330 1 Led RGB 1 Push button 1 R1k 1 Potenci\u00f3metro Diagrama: C\u00f3digo:","title":"LED RGB"},{"location":"ESP8266/08_ejemplos_pwm/#control-de-velocidad-de-motor-dc","text":"Regulador de velocidad motor DC con botones Descripci\u00f3n: Regulador de velocidad motor DC con botones, es decir, con un bot\u00f3n incrementamos y con otro decrementamos su velocidad. Material: 2 Push button 2 R1k 1 Motor DC 1 Puente H L293D Fuente externa Diagrama: C\u00f3digo: from machine import Pin , PWM # importo el modulo para PWM y configuraci\u00f3n de pines from time import sleep Regulador de velocidad motor DC con Potenci\u00f3metro Descripci\u00f3n: Vamos a controlar la velocidad de un motor con un potenci\u00f3metro. Es decir, al 0% del potenci\u00f3metro equivale al 0% de velocidad y el m\u00e1ximo del ADC corresponde a la maxima velocidad del motor. Material: 1 Potenci\u00f3metro 1 Motor DC 1 Puente H L293D Fuente externa Diagrama: C\u00f3digo: from machine import Pin , ADC , PWM # importo el modulo para PWM y configuraci\u00f3n de pines from time import sleep","title":"Control de velocidad de Motor DC"},{"location":"ESP8266/08_ejemplos_pwm/#servomotor","text":"El servomotor que utilizaremos el SG-90, es un servomotor b\u00e1sico. Este motor necesita la siguiente se\u00f1al para poder generar su desplazamiento: Atenci\u00f3n Un servomotor solo se puede desplazar desde 0\u00b0 hasta 180\u00b0. Por default siempre esta en 90\u00b0. Pero, com\u00fanmente se considera 0\u00b0, dado que gira hasta 90\u00b0 y -90\u00b0. Giro del Servomotor autom\u00e1ticamente Descripci\u00f3n: Controlar un Servomotor, se debe colocar en diversos \u00e1ngulos y repetir de manera indefinida. Los \u00e1ngulos a los que se desplazar son 0\u00b0,30\u00b0,60\u00b0,90\u00b0,120\u00b0,160\u00b0,180\u00b0 y volver al inicio. Material: 1 Servomotor Diagrama: C\u00f3digo: from machine import Pin , PWM from time import sleep Giro del Servomotor con botones Descripci\u00f3n: Cambiar el angulo de un servomotor con botones, es decir, con uno incrementa su angulo y con el segundo la decrementar. Material: 1 Servomotor 2 Push button 2 R1k Diagrama: C\u00f3digo: from machine import Pin , PWM from time import sleep Giro del Servomotor con potenci\u00f3metro Descripci\u00f3n: Hacer girar un servomotor en funci\u00f3n de la posici\u00f3n de un potenci\u00f3metro. Es decir, si esta en 0 el potenci\u00f3metro, sera 0\u00b0; en 0.5 sera 90\u00b0 y al 100% ser\u00e1n 180\u00b0. Material: 1 Potenci\u00f3metro 1 Servomotor Diagrama: C\u00f3digo: from machine import Pin , PWM from time import sleep","title":"Servomotor"},{"location":"ESP8266/09_sensores/","text":"Sensores Un sensor en es un sistema el cual capta una variable f\u00edsica y reacciona para la activaci\u00f3n de un actuador. Las partes generales de un sensor son: Transductor Acoplamiento de se\u00f1al del transductor Salida (Pasa la se\u00f1al o acciona un actuador) Un sensor es todo aquello que tiene una propiedad sensible a una magnitud del medio, y al variar esta magnitud tambi\u00e9n var\u00eda con cierta intensidad la propiedad, es decir, manifiesta la presencia de dicha magnitud, y tambi\u00e9n su medida... Extraido de wikipedia Variable f\u00edsica Existen 6 variables fundamentales que podemos captar que son: Temperatura (Calor, frio) Caudal (Flujo) Presi\u00f3n (Masa) Radiaci\u00f3n (Luz,...) Velocidad (velocidad, aceleraci\u00f3n) Nivel Existen muchas m\u00e1s, pero solo hago menci\u00f3n de las mas b\u00e1sicas en instrumentaci\u00f3n. Transductor Un transductor es un elemento que es capaz de captar una variable f\u00edsica (temperatura, presi\u00f3n, flujo, etc..) convirti\u00e9ndola en una se\u00f1al el\u00e9ctrica (corriente o voltaje). Sin embargo, normalmente la se\u00f1al generada es muy peque\u00f1a, por ende, se debe mandar a una etapa de amplificaci\u00f3n. La se\u00f1al el\u00e9ctrica o su variaci\u00f3n siempre se da por alg\u00fan efecto qu\u00edmico en su interior por su constituci\u00f3n f\u00edsica. Ejemplos: LDR (Resistencia dependiente de luz) : En funci\u00f3n de la luz que incide por su ventana es el valor ohmico que representa al pasar la corriente Termocupla o termopar : Es la union de dos conductores de diferente composici\u00f3n qu\u00edmica. Pizoelectrico : Es una lamina o material que al deformarse genera un nivel de voltaje. Transductor Pasivo vs Activo Existen dos tipos de transductores los cuales pueden ser pasivos o activos esto significa la forma en c\u00f3mo vamos a leer su se\u00f1al o adquirirla, en funci\u00f3n de ello vamos a acoplar, qu\u00e9 tipo es y amplificaci\u00f3n. Pasivos Los transductores pasivos son aquellos los cuales para poder leer o conocer la variable f\u00edsica, se le debe aplicar un voltaje o corriente constante, para que en funci\u00f3n de la variaci\u00f3n de este voltaje o corriente que aplicamos podamos calcular su equivalencia o proporci\u00f3n a dicha variable. Es decir, este tipo de transductor no es capaz de generar un voltaje o corriente la cual nos indique el valor de la magnitud f\u00edsica. El ejemplo m\u00e1s com\u00fan es una LDR, la cual se debe aplicar en un divisor de tensi\u00f3n, y en funci\u00f3n de la variaci\u00f3n del luz har\u00e1 variar el voltaje de la salida del voltaje. Como se puede observar en el circuito tenemos un divisor de tension din\u00e1mico que oscila el voltaje en funci\u00f3n de la entrada de luz, esta salida normalmente va a otra etapa de amplificaci\u00f3n. Activos Los transductores activos generan energ\u00eda de forma natural, generando un voltaje o corriente al ser expuesto al contexto. Sin embargo, esta se\u00f1al es demasiado peque\u00f1a para poder ser le\u00eddo o un elemento digital o cualquier otro elemento. El ejemplo m\u00e1s com\u00fan es un termopar o termocupla, la cual esta constituida por 2 alambres de diferentes elementos qu\u00edmicos. Al se expuesto a altas temperatura genera un mili voltaje. Como podemos observar al unir dos alambres de elementos distintos, al calentarse estos generan una diferencia de potencial. Aqu\u00ed tenemos un circuito de ejemplo de acoplamiento de una termocupla con su etapa de amplificaci\u00f3n. Sensores Digitales vs Anal\u00f3gicos En general todos los transductores son anal\u00f3gicos, pero generan una se\u00f1al muy peque\u00f1a, se necesita acoplar una o dos etapas de amplificaci\u00f3n para tener un voltaje mayor equivalente. Pero justamente aqu\u00ed al final de esa etapa la se\u00f1al se puede enfocar para generar solo se\u00f1ales digitales , es decir, un nivel alto o bajo , o en su defecto generar un rango de voltaje , estos ser\u00edan los anal\u00f3gicos Sensores Digitales Los sensores digitales solo pueden generar 2 tipos de se\u00f1al, sea un 1 o un 0 . Existen rangos de voltajes que si est\u00e1n en un rango se consideran 1 l\u00f3gico o 0 l\u00f3gico . A un rango se le conoce como voltajes TTL. Nivel l\u00f3gico Voltaje 1 3V a 5V 0 0V a 0.8V Debemos conocer que tipo de sistema digital estamos empleando y verificar nuestro sensor para asegurar que se puede acoplar directamente o tendremos que acoplar esta se\u00f1al al nivel que deseamos. Sensores digitales b\u00e1sicos vs protocolos Los sensores digitales b\u00e1sicos solo nos da una se\u00f1al l\u00f3gica, esto significa que tiene 2 estados, indicando si existe o no existe la variable o la magnitud f\u00edsica, si m\u00e1s. Sensores b\u00e1sicos Ejemplo: Sensor PIR : Indica si existe presencia o no. Sensor de Flama : Indica si existe flama o no. Este por su naturaleza da un rango de voltaje, entonces se debe calibrar en que punto se dispara indicando si sobrepasa este punto o no. Sensor de luz : Indica si existe luz o no. Este por su naturaleza da un rango de voltaje, entonces se debe calibrar en que punto se dispara indicando si sobrepasa este punto o no. Los sensores digitales con comunicaci\u00f3n por protocolo Son sensores que internamente son mas complejos, estos ademas de contener su etapa del transductor, amplificaci\u00f3n, acoplamiento, tienen un etapa de comunicaci\u00f3n por medio de alg\u00fan protocolo de comunicaci\u00f3n: Sensores con protocolo de comunicaci\u00f3n: DS18B20 : Sensor de temperatura con protocolo 1 Wire BME280: : Sensor de presi\u00f3n, humedad y temperatura con protocolo I2C. MAX31855K : Sensor de temperatura con protocolo SPI Sensores Anal\u00f3gicos Los sensores anal\u00f3gicos nos proveen un rango de voltaje en el que operan, este voltaje es proporcional la variable o magnitud f\u00edsica que esta censando. Los sensores que son empleados a sistemas digitales trabajan habitualmente en un rango de 0V a 5V o 0V a 3.3V , estos rangos son comunes pero no los \u00fanicos. En ocasiones tenemos que amplificar este rango para que se pueda aprovechar de mejor manera. Pero este rango de voltaje no se puede mandar directamente al sistema digital antes debe pasar por otro elemento que haga la conversion a un sistema digital, estos elementos se llaman ADC , este elemento hace posible que el microcontrolador pueda entender la se\u00f1al anal\u00f3gica. Actuadores el\u00e9ctricos o electr\u00f3nicos El actuador es el elemento que actua o realiza una acci\u00f3n a la salida de un sensor, no siempre viene el actuador incorporado al sensor. Los actuadores m\u00e1s comunes son: Relay Solenoide Bocina LED Buzzer Aqu\u00ed se pueden ver varios circuitos de sensores: Sensor crepuscular Sensor de temperatura Lista de sensores comunes Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Sensores"},{"location":"ESP8266/09_sensores/#sensores","text":"Un sensor en es un sistema el cual capta una variable f\u00edsica y reacciona para la activaci\u00f3n de un actuador. Las partes generales de un sensor son: Transductor Acoplamiento de se\u00f1al del transductor Salida (Pasa la se\u00f1al o acciona un actuador) Un sensor es todo aquello que tiene una propiedad sensible a una magnitud del medio, y al variar esta magnitud tambi\u00e9n var\u00eda con cierta intensidad la propiedad, es decir, manifiesta la presencia de dicha magnitud, y tambi\u00e9n su medida... Extraido de wikipedia","title":"Sensores"},{"location":"ESP8266/09_sensores/#variable-fisica","text":"Existen 6 variables fundamentales que podemos captar que son: Temperatura (Calor, frio) Caudal (Flujo) Presi\u00f3n (Masa) Radiaci\u00f3n (Luz,...) Velocidad (velocidad, aceleraci\u00f3n) Nivel Existen muchas m\u00e1s, pero solo hago menci\u00f3n de las mas b\u00e1sicas en instrumentaci\u00f3n.","title":"Variable f\u00edsica"},{"location":"ESP8266/09_sensores/#transductor","text":"Un transductor es un elemento que es capaz de captar una variable f\u00edsica (temperatura, presi\u00f3n, flujo, etc..) convirti\u00e9ndola en una se\u00f1al el\u00e9ctrica (corriente o voltaje). Sin embargo, normalmente la se\u00f1al generada es muy peque\u00f1a, por ende, se debe mandar a una etapa de amplificaci\u00f3n. La se\u00f1al el\u00e9ctrica o su variaci\u00f3n siempre se da por alg\u00fan efecto qu\u00edmico en su interior por su constituci\u00f3n f\u00edsica. Ejemplos: LDR (Resistencia dependiente de luz) : En funci\u00f3n de la luz que incide por su ventana es el valor ohmico que representa al pasar la corriente Termocupla o termopar : Es la union de dos conductores de diferente composici\u00f3n qu\u00edmica. Pizoelectrico : Es una lamina o material que al deformarse genera un nivel de voltaje.","title":"Transductor"},{"location":"ESP8266/09_sensores/#transductor-pasivo-vs-activo","text":"Existen dos tipos de transductores los cuales pueden ser pasivos o activos esto significa la forma en c\u00f3mo vamos a leer su se\u00f1al o adquirirla, en funci\u00f3n de ello vamos a acoplar, qu\u00e9 tipo es y amplificaci\u00f3n.","title":"Transductor Pasivo vs Activo"},{"location":"ESP8266/09_sensores/#pasivos","text":"Los transductores pasivos son aquellos los cuales para poder leer o conocer la variable f\u00edsica, se le debe aplicar un voltaje o corriente constante, para que en funci\u00f3n de la variaci\u00f3n de este voltaje o corriente que aplicamos podamos calcular su equivalencia o proporci\u00f3n a dicha variable. Es decir, este tipo de transductor no es capaz de generar un voltaje o corriente la cual nos indique el valor de la magnitud f\u00edsica. El ejemplo m\u00e1s com\u00fan es una LDR, la cual se debe aplicar en un divisor de tensi\u00f3n, y en funci\u00f3n de la variaci\u00f3n del luz har\u00e1 variar el voltaje de la salida del voltaje. Como se puede observar en el circuito tenemos un divisor de tension din\u00e1mico que oscila el voltaje en funci\u00f3n de la entrada de luz, esta salida normalmente va a otra etapa de amplificaci\u00f3n.","title":"Pasivos"},{"location":"ESP8266/09_sensores/#activos","text":"Los transductores activos generan energ\u00eda de forma natural, generando un voltaje o corriente al ser expuesto al contexto. Sin embargo, esta se\u00f1al es demasiado peque\u00f1a para poder ser le\u00eddo o un elemento digital o cualquier otro elemento. El ejemplo m\u00e1s com\u00fan es un termopar o termocupla, la cual esta constituida por 2 alambres de diferentes elementos qu\u00edmicos. Al se expuesto a altas temperatura genera un mili voltaje. Como podemos observar al unir dos alambres de elementos distintos, al calentarse estos generan una diferencia de potencial. Aqu\u00ed tenemos un circuito de ejemplo de acoplamiento de una termocupla con su etapa de amplificaci\u00f3n.","title":"Activos"},{"location":"ESP8266/09_sensores/#sensores-digitales-vs-analogicos","text":"En general todos los transductores son anal\u00f3gicos, pero generan una se\u00f1al muy peque\u00f1a, se necesita acoplar una o dos etapas de amplificaci\u00f3n para tener un voltaje mayor equivalente. Pero justamente aqu\u00ed al final de esa etapa la se\u00f1al se puede enfocar para generar solo se\u00f1ales digitales , es decir, un nivel alto o bajo , o en su defecto generar un rango de voltaje , estos ser\u00edan los anal\u00f3gicos","title":"Sensores Digitales vs Anal\u00f3gicos"},{"location":"ESP8266/09_sensores/#sensores-digitales","text":"Los sensores digitales solo pueden generar 2 tipos de se\u00f1al, sea un 1 o un 0 . Existen rangos de voltajes que si est\u00e1n en un rango se consideran 1 l\u00f3gico o 0 l\u00f3gico . A un rango se le conoce como voltajes TTL. Nivel l\u00f3gico Voltaje 1 3V a 5V 0 0V a 0.8V Debemos conocer que tipo de sistema digital estamos empleando y verificar nuestro sensor para asegurar que se puede acoplar directamente o tendremos que acoplar esta se\u00f1al al nivel que deseamos.","title":"Sensores Digitales"},{"location":"ESP8266/09_sensores/#sensores-digitales-basicos-vs-protocolos","text":"Los sensores digitales b\u00e1sicos solo nos da una se\u00f1al l\u00f3gica, esto significa que tiene 2 estados, indicando si existe o no existe la variable o la magnitud f\u00edsica, si m\u00e1s. Sensores b\u00e1sicos Ejemplo: Sensor PIR : Indica si existe presencia o no. Sensor de Flama : Indica si existe flama o no. Este por su naturaleza da un rango de voltaje, entonces se debe calibrar en que punto se dispara indicando si sobrepasa este punto o no. Sensor de luz : Indica si existe luz o no. Este por su naturaleza da un rango de voltaje, entonces se debe calibrar en que punto se dispara indicando si sobrepasa este punto o no.","title":"Sensores digitales b\u00e1sicos vs protocolos"},{"location":"ESP8266/09_sensores/#los-sensores-digitales-con-comunicacion-por-protocolo","text":"Son sensores que internamente son mas complejos, estos ademas de contener su etapa del transductor, amplificaci\u00f3n, acoplamiento, tienen un etapa de comunicaci\u00f3n por medio de alg\u00fan protocolo de comunicaci\u00f3n: Sensores con protocolo de comunicaci\u00f3n: DS18B20 : Sensor de temperatura con protocolo 1 Wire BME280: : Sensor de presi\u00f3n, humedad y temperatura con protocolo I2C. MAX31855K : Sensor de temperatura con protocolo SPI","title":"Los sensores digitales con comunicaci\u00f3n por protocolo"},{"location":"ESP8266/09_sensores/#sensores-analogicos","text":"Los sensores anal\u00f3gicos nos proveen un rango de voltaje en el que operan, este voltaje es proporcional la variable o magnitud f\u00edsica que esta censando. Los sensores que son empleados a sistemas digitales trabajan habitualmente en un rango de 0V a 5V o 0V a 3.3V , estos rangos son comunes pero no los \u00fanicos. En ocasiones tenemos que amplificar este rango para que se pueda aprovechar de mejor manera. Pero este rango de voltaje no se puede mandar directamente al sistema digital antes debe pasar por otro elemento que haga la conversion a un sistema digital, estos elementos se llaman ADC , este elemento hace posible que el microcontrolador pueda entender la se\u00f1al anal\u00f3gica.","title":"Sensores Anal\u00f3gicos"},{"location":"ESP8266/09_sensores/#actuadores-electricos-o-electronicos","text":"El actuador es el elemento que actua o realiza una acci\u00f3n a la salida de un sensor, no siempre viene el actuador incorporado al sensor. Los actuadores m\u00e1s comunes son: Relay Solenoide Bocina LED Buzzer Aqu\u00ed se pueden ver varios circuitos de sensores: Sensor crepuscular Sensor de temperatura","title":"Actuadores el\u00e9ctricos o electr\u00f3nicos"},{"location":"ESP8266/09_sensores/#lista-de-sensores-comunes","text":"Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Lista de sensores comunes"},{"location":"ESP8266/10_ejemplos_sensore_digitales/","text":"Ejemplos con Sensores Digitales La simulaci\u00f3n de sensores digitales b\u00e1sicos es muy sencillo aplicando la configuraci\u00f3n pull-up o pull-down. Dado que la se\u00f1al de un alto o bajo representa un estado u otro. Sensor PIR HC-SR501 (Sensor de presencia) Este sensor nos manda una se\u00f1al alta de 3.3V cuando existe presencia o recibe radiaci\u00f3n infrarroja. Se puede alimentar entre 5V a 12V. Ver mas en su datasheet . Aplicando el Sensor PIR Alarma de presencia Descripci\u00f3n: Tenemos un sensor PIR, que cuando exista presencia mande a activar un parpadeo de LEDs de forma r\u00e1pida (medio segundo), mientras no exista presencia los LEDs deben parpadear de manera lenta (2seg) Materiales: 1 Sensor PIR 1 Led 1 R330 Circuito: C\u00f3digo: from machine import Pin from time import sleep pir = Pin ( 5 , Pin . IN ) led = Pin ( 4 , Pin . OUT ) time_short = 0.5 time_long = 2 while True : if pir . value (): led . on () sleep ( time_short ) led . off () sleep ( time_short ) else : led . on () sleep ( time_long ) led . off () sleep ( time_long ) Luz autom\u00e1tica Descripci\u00f3n: Ahora tenemos un sensor de presencia junto a un push button en una habitaci\u00f3n. Lo que queremos es que si existe presencia y el push button se presiona se encienda la luz del cuarto, pero si la persona deja la habitaci\u00f3n pero no apago la luz se debe apagar el foco en un tiempo definido. Al salir del cuarto se presiona el push button se debe apagar el foco. Materiales: 1 Sensor PIR 1 Led 1 R330 1 Push button 1 R1k Circuito: C\u00f3digo: from machine import Pin from time import sleep pir = Pin ( 5 , Pin . IN ) light = Pin ( 4 , Pin . OUT ) switch = Pin ( 0 , Pin . IN ) status_light = False # Mi variable de estado para el foco count = 0 # contador del temporizador while True : status_pir = pir . value () # leo el valor del sensor PIR status_switch = switch . value () # Leo el valor del bot\u00f3n if status_pir and status_switch and not status_light : # Si hay presencia y tambi\u00e9n presionaron el bot\u00f3n y no esta encendido el foco, entro al bloque light . on () status_light = True sleep ( 0.25 ) # estabilizamos el presionar el bot\u00f3n elif status_switch and status_light : # de lo contrario si, presiono el bot\u00f3n y el foco esta encendido, apago el foco light . off () status_light = False sleep ( 1 ) # temporizador para apagar el foco en caso de que no exista presencia if status_light and not status_pir : if count >= 10 : light . off () status_light = False count = 0 sleep ( 1 ) count += 1 else : count = 0 Sensor de Temperatura y Humedad DTH11 Distribuci\u00f3n de pines del Sensor b\u00e1sico vs el formato de modulo. Ver datasheet . El controlador del sensor DHT es implementado por software y funciona en todos los pines: Ejemplo de sus funcionalidades En el siguiente c\u00f3digo vemos las funciones con las que cuenta el modulo del sensor, que trae incorporado Micropython. Despu\u00e9s de la creaci\u00f3n del objeto debemos llamar a su m\u00e9todo measure() la cual hace funcionar al sensor y obtener la informaci\u00f3n del ambiente en ese momento. import dht import machine d = dht . DHT11 ( machine . Pin ( 4 )) d . measure () d . temperature () # eg. 23 (\u00b0C) d . humidity () # eg. 41 (% RH) d = dht . DHT22 ( machine . Pin ( 4 )) d . measure () d . temperature () # eg. 23.6 (\u00b0C) d . humidity () # eg. 41.3 (% RH) Obteniendo los datos del DTH11 Descripci\u00f3n: Vamos a obtener los datos del sensor y mandarlos a la terminal, el invervalo sera de cada 1 segundo Materiales: 1 Sensor DTH11 Circuito: C\u00f3digo: from machine import Pin from time import sleep from dht import DHT11 sensor = DHT11 ( Pin ( 0 ) ) while True : sensor . measure () value_temperature = sensor . temperature () # se obtiene el valor de la temperatura value_humidity = sensor . humidity () # se obtiene el valor de la humedad relativa print ( value_temperature ) print ( value_humidity ) sleep ( 1 ) #esperamos 1 seg para la siguiente lectura de las variables ambientales","title":"Ejemplos con Sensores Digitales"},{"location":"ESP8266/10_ejemplos_sensore_digitales/#ejemplos-con-sensores-digitales","text":"La simulaci\u00f3n de sensores digitales b\u00e1sicos es muy sencillo aplicando la configuraci\u00f3n pull-up o pull-down. Dado que la se\u00f1al de un alto o bajo representa un estado u otro.","title":"Ejemplos con Sensores Digitales"},{"location":"ESP8266/10_ejemplos_sensore_digitales/#sensor-pir-hc-sr501-sensor-de-presencia","text":"Este sensor nos manda una se\u00f1al alta de 3.3V cuando existe presencia o recibe radiaci\u00f3n infrarroja. Se puede alimentar entre 5V a 12V. Ver mas en su datasheet .","title":"Sensor PIR HC-SR501 (Sensor de presencia)"},{"location":"ESP8266/10_ejemplos_sensore_digitales/#aplicando-el-sensor-pir","text":"Alarma de presencia Descripci\u00f3n: Tenemos un sensor PIR, que cuando exista presencia mande a activar un parpadeo de LEDs de forma r\u00e1pida (medio segundo), mientras no exista presencia los LEDs deben parpadear de manera lenta (2seg) Materiales: 1 Sensor PIR 1 Led 1 R330 Circuito: C\u00f3digo: from machine import Pin from time import sleep pir = Pin ( 5 , Pin . IN ) led = Pin ( 4 , Pin . OUT ) time_short = 0.5 time_long = 2 while True : if pir . value (): led . on () sleep ( time_short ) led . off () sleep ( time_short ) else : led . on () sleep ( time_long ) led . off () sleep ( time_long ) Luz autom\u00e1tica Descripci\u00f3n: Ahora tenemos un sensor de presencia junto a un push button en una habitaci\u00f3n. Lo que queremos es que si existe presencia y el push button se presiona se encienda la luz del cuarto, pero si la persona deja la habitaci\u00f3n pero no apago la luz se debe apagar el foco en un tiempo definido. Al salir del cuarto se presiona el push button se debe apagar el foco. Materiales: 1 Sensor PIR 1 Led 1 R330 1 Push button 1 R1k Circuito: C\u00f3digo: from machine import Pin from time import sleep pir = Pin ( 5 , Pin . IN ) light = Pin ( 4 , Pin . OUT ) switch = Pin ( 0 , Pin . IN ) status_light = False # Mi variable de estado para el foco count = 0 # contador del temporizador while True : status_pir = pir . value () # leo el valor del sensor PIR status_switch = switch . value () # Leo el valor del bot\u00f3n if status_pir and status_switch and not status_light : # Si hay presencia y tambi\u00e9n presionaron el bot\u00f3n y no esta encendido el foco, entro al bloque light . on () status_light = True sleep ( 0.25 ) # estabilizamos el presionar el bot\u00f3n elif status_switch and status_light : # de lo contrario si, presiono el bot\u00f3n y el foco esta encendido, apago el foco light . off () status_light = False sleep ( 1 ) # temporizador para apagar el foco en caso de que no exista presencia if status_light and not status_pir : if count >= 10 : light . off () status_light = False count = 0 sleep ( 1 ) count += 1 else : count = 0","title":"Aplicando el Sensor PIR"},{"location":"ESP8266/10_ejemplos_sensore_digitales/#sensor-de-temperatura-y-humedad-dth11","text":"Distribuci\u00f3n de pines del Sensor b\u00e1sico vs el formato de modulo. Ver datasheet . El controlador del sensor DHT es implementado por software y funciona en todos los pines:","title":"Sensor de Temperatura y Humedad DTH11"},{"location":"ESP8266/10_ejemplos_sensore_digitales/#ejemplo-de-sus-funcionalidades","text":"En el siguiente c\u00f3digo vemos las funciones con las que cuenta el modulo del sensor, que trae incorporado Micropython. Despu\u00e9s de la creaci\u00f3n del objeto debemos llamar a su m\u00e9todo measure() la cual hace funcionar al sensor y obtener la informaci\u00f3n del ambiente en ese momento. import dht import machine d = dht . DHT11 ( machine . Pin ( 4 )) d . measure () d . temperature () # eg. 23 (\u00b0C) d . humidity () # eg. 41 (% RH) d = dht . DHT22 ( machine . Pin ( 4 )) d . measure () d . temperature () # eg. 23.6 (\u00b0C) d . humidity () # eg. 41.3 (% RH) Obteniendo los datos del DTH11 Descripci\u00f3n: Vamos a obtener los datos del sensor y mandarlos a la terminal, el invervalo sera de cada 1 segundo Materiales: 1 Sensor DTH11 Circuito: C\u00f3digo: from machine import Pin from time import sleep from dht import DHT11 sensor = DHT11 ( Pin ( 0 ) ) while True : sensor . measure () value_temperature = sensor . temperature () # se obtiene el valor de la temperatura value_humidity = sensor . humidity () # se obtiene el valor de la humedad relativa print ( value_temperature ) print ( value_humidity ) sleep ( 1 ) #esperamos 1 seg para la siguiente lectura de las variables ambientales","title":"Ejemplo de sus funcionalidades"},{"location":"ESP8266/11_ejemplos_sensores_analogicos/","text":"Sensores Anal\u00f3gicos Un sistema digital por default no puede leer se\u00f1ales anal\u00f3gicas, rangos u oscilaciones de voltajes. Entonces c\u00f3mo se hace la medici\u00f3n?. Se utiliza un componente llamado ADC (Analogue to Digital Converter) , el cual hace la conversi\u00f3n de la se\u00f1al anal\u00f3gica a un c\u00f3digo binario, entonces en lugar de percibir un nivel de voltaje, estaremos viendo un c\u00f3digo binario equivalente. El ADC que trae incorporado el ESP8266 tiene una resoluci\u00f3n de 10 bits, es decir, tiene 1024 c\u00f3digos binarios que son equivalentes son: Voltaje Binario Decimal Micropython 0V 0b 0 0.0 5V 0b11 1111 1111 1023 1.0 Sensor de Luz Existen varios sensores de luz, aqu\u00ed estamos abarcando el mas sencillo y b\u00e1sico, el cual implementa una LDR (Resistencia dependiente de Luz) en una configuraci\u00f3n de divisor de tension. Modulo de Sensor de luz Sensor crepuscular Descripci\u00f3n: Se debe configurar el nivel en el c\u00f3digo para la activaci\u00f3n del led con cierta cantidad de luz que reciba el sensor Material: 1 LDR 1 R10k 1 LED 1 R330 Diagrama: C\u00f3digo: from machine import Pin , ADC # importo el modulo para ADC y para el control de Pines from time import sleep , sleep_ms valor_disparo = 100 adc = ADC ( 0 ) # configuro el A0 como ADC o entrada anal\u00f3gica valor = adc . read () # esta funci\u00f3n nos retorna el valor que existe en la entrada sleep ( 1 ) led = Pin ( 5 , Pin . OUT , value = 0 ) # configuro el pin para el LED y pongo en 0 while True : valor = adc . read () # esta funci\u00f3n nos retorna el valor que existe en la entrada if valor > valor_disparo : led . on () sleep_ms ( 250 ) # doy un tiempo de estabilizaci\u00f3n else : led . off () sleep_ms ( 100 ) # Doy un tiempo de espera Luces del parque Descripci\u00f3n: Cuando el sensor detecte que ha obscurecido debe mandar a encender de manera secuencial 5 lamparas, las cuales est\u00e1n ubicadas en el parque, es decir, se ir\u00e1n prendiendo una a una hasta quedar todas encendidas. A la salida del sol las luces se deben apagar de la misma manera hasta que se apaguen todas Material: 1 LDR 1 R10k 5 LED 5 R330 Diagrama: C\u00f3digo: Sensor de Temperatura LM35 Existe una enorme variedad de sensores de temperatura, estaremos viendo el LM35 , sensor de temperatura lineal. Nos da una respuesta de 10mV/\u00baC Term\u00f3metro b\u00e1sico Descripci\u00f3n: Vamos a realizar un term\u00f3metro con el LM35. La temperatura se mandar\u00e1 a la terminal. Debe mandar la temperatura en grados Celsius. Material: 1 LDR 1 R10k 1 LED 1 R330 Diagrama: C\u00f3digo: Term\u00f3metro Celsius/Fahrenheit Descripci\u00f3n: Vamos a realizar un term\u00f3metro con el LM35. La temperatura se mandar\u00e1 a la terminal. Debe mandar la temperatura en grados Celsius y grados Fahrenheit Material: 1 LDR 1 R10k 1 LED 1 R330 Diagrama: C\u00f3digo:","title":"Sensores Anal\u00f3gicos"},{"location":"ESP8266/11_ejemplos_sensores_analogicos/#sensores-analogicos","text":"Un sistema digital por default no puede leer se\u00f1ales anal\u00f3gicas, rangos u oscilaciones de voltajes. Entonces c\u00f3mo se hace la medici\u00f3n?. Se utiliza un componente llamado ADC (Analogue to Digital Converter) , el cual hace la conversi\u00f3n de la se\u00f1al anal\u00f3gica a un c\u00f3digo binario, entonces en lugar de percibir un nivel de voltaje, estaremos viendo un c\u00f3digo binario equivalente. El ADC que trae incorporado el ESP8266 tiene una resoluci\u00f3n de 10 bits, es decir, tiene 1024 c\u00f3digos binarios que son equivalentes son: Voltaje Binario Decimal Micropython 0V 0b 0 0.0 5V 0b11 1111 1111 1023 1.0","title":"Sensores Anal\u00f3gicos"},{"location":"ESP8266/11_ejemplos_sensores_analogicos/#sensor-de-luz","text":"Existen varios sensores de luz, aqu\u00ed estamos abarcando el mas sencillo y b\u00e1sico, el cual implementa una LDR (Resistencia dependiente de Luz) en una configuraci\u00f3n de divisor de tension. Modulo de Sensor de luz Sensor crepuscular Descripci\u00f3n: Se debe configurar el nivel en el c\u00f3digo para la activaci\u00f3n del led con cierta cantidad de luz que reciba el sensor Material: 1 LDR 1 R10k 1 LED 1 R330 Diagrama: C\u00f3digo: from machine import Pin , ADC # importo el modulo para ADC y para el control de Pines from time import sleep , sleep_ms valor_disparo = 100 adc = ADC ( 0 ) # configuro el A0 como ADC o entrada anal\u00f3gica valor = adc . read () # esta funci\u00f3n nos retorna el valor que existe en la entrada sleep ( 1 ) led = Pin ( 5 , Pin . OUT , value = 0 ) # configuro el pin para el LED y pongo en 0 while True : valor = adc . read () # esta funci\u00f3n nos retorna el valor que existe en la entrada if valor > valor_disparo : led . on () sleep_ms ( 250 ) # doy un tiempo de estabilizaci\u00f3n else : led . off () sleep_ms ( 100 ) # Doy un tiempo de espera Luces del parque Descripci\u00f3n: Cuando el sensor detecte que ha obscurecido debe mandar a encender de manera secuencial 5 lamparas, las cuales est\u00e1n ubicadas en el parque, es decir, se ir\u00e1n prendiendo una a una hasta quedar todas encendidas. A la salida del sol las luces se deben apagar de la misma manera hasta que se apaguen todas Material: 1 LDR 1 R10k 5 LED 5 R330 Diagrama: C\u00f3digo:","title":"Sensor de Luz"},{"location":"ESP8266/11_ejemplos_sensores_analogicos/#sensor-de-temperatura-lm35","text":"Existe una enorme variedad de sensores de temperatura, estaremos viendo el LM35 , sensor de temperatura lineal. Nos da una respuesta de 10mV/\u00baC Term\u00f3metro b\u00e1sico Descripci\u00f3n: Vamos a realizar un term\u00f3metro con el LM35. La temperatura se mandar\u00e1 a la terminal. Debe mandar la temperatura en grados Celsius. Material: 1 LDR 1 R10k 1 LED 1 R330 Diagrama: C\u00f3digo: Term\u00f3metro Celsius/Fahrenheit Descripci\u00f3n: Vamos a realizar un term\u00f3metro con el LM35. La temperatura se mandar\u00e1 a la terminal. Debe mandar la temperatura en grados Celsius y grados Fahrenheit Material: 1 LDR 1 R10k 1 LED 1 R330 Diagrama: C\u00f3digo:","title":"Sensor de Temperatura LM35"},{"location":"ESP8266/99_practicas/","text":"Pr\u00e1cticas Encender LEDs Descripci\u00f3n: Hacer parpadear los leds, encendidos deben estar 2 segundos, y apagados un segundo, esto debe repetirse 5 veces Material: 1 Led 1 R330 Diagrama: Parpadear un led 3 veces Descripci\u00f3n: Se debe lograr que parpadee un led 3 veces, en un intervalo de tiempo de medio segundo Material: 1 Led 1 R330 Diagrama: Parpadear leds de manera indefinida Descripci\u00f3n: Deben quedar 2 leds parpadeando de manera indefinida, encendidos 2 segundos y apagados un segundo Material: 2 Led 2 R330 Diagrama: Sem\u00e1foro de crucero Descripci\u00f3n: Realizar dos sem\u00e1foros en una intersecci\u00f3n, deben trabajar de manera complementaria. Material: 6 Leds (rojo,verde y \u00e1mbar) 6 R330 Diagrama: Ejemplo: Controlando 2 leds con sus botones Descripci\u00f3n: Control de 2 leds, cada uno con su propio push button, mientras sea presionado el push button debe mantenerse encendido su respectivo LED, de lo contrario se deben apagar Material: 2 Led 2 R330 2 Push button 2 R1k Diagrama: Controlando 2 leds blink, con sus botones Descripci\u00f3n: Control de 2 leds, cada uno con su propio push button, mientras sea presionado el push button debe parpadear a 1/4 de segundo, encendido su respectivo LED Material: 2 Led 2 R330 2 Push button 2 R1k Diagrama: Toggle 2 Descripci\u00f3n: Hay 2 leds con sus respectivos botones. Al presionar el push button se debe encender el led y mantenerse en ese estado; hasta que se vuelva a presionar el led regresar\u00e1 a su estado anterior Material: 2 Led 2 R330 2 Push button 2 R1k Diagrama: Secuencia de luces Descripci\u00f3n: Realizar una secuencia de leds b\u00e1sica, se deben ir encendiendo en secuencia, el tiempo lo decide el programador, primero enciende el primero, unos instantes despu\u00e9s el segundo, un instante, despu\u00e9s el ultimo, quedan encendido todos y unos segundos despu\u00e9s se apagan y vuelve a comenzar la secuencia. Material: 2 Led 2 R330 2 Push button 2 R1k Diagrama: Tren Descripci\u00f3n: Simular las luces de alto en un cruce de ferrocarril, como se muestra en la imagen animada. Se debe simular con un bot\u00f3n el paso del ferrocarril, que si se presiona haga los parpadeos de las luces, mientras no este presionado el bot\u00f3n, las luces deben quedar encendidas; es decir, que no estar\u00eda pasando el tren. Material: 4 Led 4 R330 1 Push button 1 R1k Diagrama: Display de 7 segmentos Descripci\u00f3n: Crear un mensaje que se vaya leyendo en el display de 7 segmentos, tu elijes la palabra o frase , el intervalo de cada letra ser\u00e1 de medio segundo Material: 1 Display 7 segmentos, c\u00e1todo com\u00fan 7 R330 Diagrama: Frases con display 7-seg Descripci\u00f3n: Realizar el control de un display de 7 segmentos, mandando un mensaje. Es decir, mandar\u00e1 una palabra la cual el programador eleg\u00eda, esta palabra se debe poder escribir con los segmentos con los que cuenta el display. Desplegar\u00e1 su palabra, despu\u00e9s desplegar\u00e1 la palabra \"cbtis\" y terminar\u00e1 con \"85\", todas las palabras deben ser separadas por un guion. Ejemplo: HOLA-Cbtis-85 Debe quedar de manera indefinida la frase. Material: 1 Display 7 segmentos c\u00e1todo com\u00fan 7 R330 1 Push button 1 R1k Diagrama: Frases con display 7-seg Descripci\u00f3n: Utilizando el problema anterior, pero se agregar\u00e1 un bot\u00f3n; es decir, se mantendr\u00e1 la palabra repiti\u00e9ndose infinitamente hasta que se presione el bot\u00f3n, para hacer el cambio de palabra. Ejemplos, desplegar\u00e1 la palabra \"HOLA\", cuando se presione el bot\u00f3n se desplegar\u00e1 la siguiente frase \"Cbtis-85\", se vuelve a presionar el bot\u00f3n y regresa a la palabra anterior, y esto se repetir\u00e1 Material: 1 Display 7 segmentos c\u00e1todo com\u00fan 7 R330 1 Push button 1 R1k Diagrama: Motor PAP medio y paso completo Descripci\u00f3n: Cuando se presione un boton el motor debe girar en un sentido a medio paso, y cuando se suelte debe detenerse, en caso que presione el otro boton debe girar a paso completo y cuando se deje de presionar que se detenga, en caso que se presionen ambos botones, no debe girar en ning\u00fan sentido. Material: 1 Motor PAP 1 Driver ULN2003 2 Push button 2 R1k Fuente externa Diagrama: Invertir Motor PAP Descripci\u00f3n: Cuando se presione un boton el motor debe girar hacia un sentido, y cuando se suelte debe detenerse, en caso que presione el otro boton debe girar en sentido contrario y cuando se deje de presionar que se detenga, en caso que se presionen ambos botones, no debe girar en ning\u00fan sentido. Material: 1 Motor PAP 1 Driver ULN2003 2 Push button 2 R1k Fuente externa Diagrama: Control de un motor DC (ON-OFF) Calcular la resistencia para el control del motor DC Motor PAP DTH11 Descripci\u00f3n Materiales Diagrama pict\u00f3rico 6.2.1 Leer los valores de Temperatura y humedad relativa en la terminal 1 DTH11 6.2.2 Leer los valores de Temperatura y humedad mostrandolo en la LCD 1 DTH11 1 LCD con I2C 6.2.3 Leer los valores de Temperatura y humedad mostrandolo en la LCD, mostrar la temperatura en grados celsius y grados farenheit 1 DTH11 1 LCD con I2C 6.2.4 Leer la temperatura,con forme vaya incrementando la temperatura vay\u00e1n encendiendo los leds, y apagando en secuencia en funci\u00f3n de la temperatura 1 LCD con I2C 3 LEDs 3 Resistencias Salidas anal\u00f3gicas (PWM) Control de Led RGB Control de un motor DC Regulador de velocidad motor DC Giro de un motor DC Servo Control de velocidad de un motor DC, se controlara la velocidad del motor a traves de un potenci\u00f3metro. Si el potenci\u00f3metro esta en 0 el motor debe estar apagado, si esta al 50% el motor girara a la mitad de su velocidad, cuando llegue a 100% el motor debe girar a su maxima velocidad. Control de la intensidad de varias luces, se tendr\u00e1n 3 leds cada uno controlado con su respectivo potenci\u00f3metro para hacer variar la intensidad de la luz de cada uno. Todos de manera independiente. Control de la intensidad de varias luces, se tendr\u00e1n 3 luces. 2 leds cada uno controlado con su respectivo potenci\u00f3metro para hacer variar la intensidad de la luz de cada uno, un tercero controlado con botones, uno para incrementar y otro para decrementar la intensidad. Todos de manera independiente. Utilizando un servomotor que se utilizara para controlar la pluma de la entrada de estacionamiento. Se simula un sensor infrarrojo para detectar el auto y se levante la pluma (180\u00b0), cuando no detecte el auto, bajara la pluma (0\u00b0) Sensores digitales Sensor PIR Sensores anal\u00f3gicos Varios Control de cargas de alta potencia (Relay) Ajustar estos ejercicios Sensores Salidas digitales Simula un sensor de luz el cual haga encender un foco cuando incida poca luz (por debajo del 45%). En caso que supere esa cantidad de luz el foco se debe mantener apagado. Simula un sensor de distancia (infrarrojo). Carrito seguido de luz. Se tendran 2 sensores infrarrojos, el derecho e izquierdo, cuando el sensor derecho detecte luz debe arrancar una llanta (motor DC izquierdo), cuando el sensor izquierdo reciba luz debe encender la llanta derecha (motor DC derecho). Cuando no reciba luz ningun sensor debe apagar ambos motores, si ambos reciben luz deben encender ambos motores. entrandas analogicas Leer 2 potenciometros, cada uno controla una barra de leds, en el rango del 0 al 100% los leds iran encendiendo. Leer un potenciometro e indicar por terminal el porcentaje equivalente, es decir, si se recibe 0.0 es equivalente al 0%, si recibes el 0.5 se imprime 50%, hasta llegar al 100%. sensores Anal\u00f3gicos Simular un sensor de luz junto con un sensor de presencia (digital). Dicho sensores trabajan a la par, si hay poca luz y existe presencia en el cuarto se debe encender un foco. En caso que no exista presencia sin importar la intensidad de la luz, el foco no enciende. 3. Simular un sensor infrarrojo para accionar el movimiento de un servomotor, entre mas luz incida debe incrementar el angulo del servomotor. Es decir, entre mas cerca se incrementa el angulo, entre mas lejos es menor el angulo. Carrito seguido de luz Descripci\u00f3n: El carrito debe reaccionar a la estimulaci\u00f3n de la luz. El carrito debe seguir la direcci\u00f3n de la luz. Por ende, las llantitas deben activarse para lograr dicho efecto. Material: 2 LDR 2 R10k 2 Motor DC 1 L293D Esquema:","title":"Pr\u00e1cticas"},{"location":"ESP8266/99_practicas/#practicas","text":"Encender LEDs Descripci\u00f3n: Hacer parpadear los leds, encendidos deben estar 2 segundos, y apagados un segundo, esto debe repetirse 5 veces Material: 1 Led 1 R330 Diagrama: Parpadear un led 3 veces Descripci\u00f3n: Se debe lograr que parpadee un led 3 veces, en un intervalo de tiempo de medio segundo Material: 1 Led 1 R330 Diagrama: Parpadear leds de manera indefinida Descripci\u00f3n: Deben quedar 2 leds parpadeando de manera indefinida, encendidos 2 segundos y apagados un segundo Material: 2 Led 2 R330 Diagrama: Sem\u00e1foro de crucero Descripci\u00f3n: Realizar dos sem\u00e1foros en una intersecci\u00f3n, deben trabajar de manera complementaria. Material: 6 Leds (rojo,verde y \u00e1mbar) 6 R330 Diagrama: Ejemplo: Controlando 2 leds con sus botones Descripci\u00f3n: Control de 2 leds, cada uno con su propio push button, mientras sea presionado el push button debe mantenerse encendido su respectivo LED, de lo contrario se deben apagar Material: 2 Led 2 R330 2 Push button 2 R1k Diagrama: Controlando 2 leds blink, con sus botones Descripci\u00f3n: Control de 2 leds, cada uno con su propio push button, mientras sea presionado el push button debe parpadear a 1/4 de segundo, encendido su respectivo LED Material: 2 Led 2 R330 2 Push button 2 R1k Diagrama: Toggle 2 Descripci\u00f3n: Hay 2 leds con sus respectivos botones. Al presionar el push button se debe encender el led y mantenerse en ese estado; hasta que se vuelva a presionar el led regresar\u00e1 a su estado anterior Material: 2 Led 2 R330 2 Push button 2 R1k Diagrama: Secuencia de luces Descripci\u00f3n: Realizar una secuencia de leds b\u00e1sica, se deben ir encendiendo en secuencia, el tiempo lo decide el programador, primero enciende el primero, unos instantes despu\u00e9s el segundo, un instante, despu\u00e9s el ultimo, quedan encendido todos y unos segundos despu\u00e9s se apagan y vuelve a comenzar la secuencia. Material: 2 Led 2 R330 2 Push button 2 R1k Diagrama: Tren Descripci\u00f3n: Simular las luces de alto en un cruce de ferrocarril, como se muestra en la imagen animada. Se debe simular con un bot\u00f3n el paso del ferrocarril, que si se presiona haga los parpadeos de las luces, mientras no este presionado el bot\u00f3n, las luces deben quedar encendidas; es decir, que no estar\u00eda pasando el tren. Material: 4 Led 4 R330 1 Push button 1 R1k Diagrama: Display de 7 segmentos Descripci\u00f3n: Crear un mensaje que se vaya leyendo en el display de 7 segmentos, tu elijes la palabra o frase , el intervalo de cada letra ser\u00e1 de medio segundo Material: 1 Display 7 segmentos, c\u00e1todo com\u00fan 7 R330 Diagrama: Frases con display 7-seg Descripci\u00f3n: Realizar el control de un display de 7 segmentos, mandando un mensaje. Es decir, mandar\u00e1 una palabra la cual el programador eleg\u00eda, esta palabra se debe poder escribir con los segmentos con los que cuenta el display. Desplegar\u00e1 su palabra, despu\u00e9s desplegar\u00e1 la palabra \"cbtis\" y terminar\u00e1 con \"85\", todas las palabras deben ser separadas por un guion. Ejemplo: HOLA-Cbtis-85 Debe quedar de manera indefinida la frase. Material: 1 Display 7 segmentos c\u00e1todo com\u00fan 7 R330 1 Push button 1 R1k Diagrama: Frases con display 7-seg Descripci\u00f3n: Utilizando el problema anterior, pero se agregar\u00e1 un bot\u00f3n; es decir, se mantendr\u00e1 la palabra repiti\u00e9ndose infinitamente hasta que se presione el bot\u00f3n, para hacer el cambio de palabra. Ejemplos, desplegar\u00e1 la palabra \"HOLA\", cuando se presione el bot\u00f3n se desplegar\u00e1 la siguiente frase \"Cbtis-85\", se vuelve a presionar el bot\u00f3n y regresa a la palabra anterior, y esto se repetir\u00e1 Material: 1 Display 7 segmentos c\u00e1todo com\u00fan 7 R330 1 Push button 1 R1k Diagrama: Motor PAP medio y paso completo Descripci\u00f3n: Cuando se presione un boton el motor debe girar en un sentido a medio paso, y cuando se suelte debe detenerse, en caso que presione el otro boton debe girar a paso completo y cuando se deje de presionar que se detenga, en caso que se presionen ambos botones, no debe girar en ning\u00fan sentido. Material: 1 Motor PAP 1 Driver ULN2003 2 Push button 2 R1k Fuente externa Diagrama: Invertir Motor PAP Descripci\u00f3n: Cuando se presione un boton el motor debe girar hacia un sentido, y cuando se suelte debe detenerse, en caso que presione el otro boton debe girar en sentido contrario y cuando se deje de presionar que se detenga, en caso que se presionen ambos botones, no debe girar en ning\u00fan sentido. Material: 1 Motor PAP 1 Driver ULN2003 2 Push button 2 R1k Fuente externa Diagrama: Control de un motor DC (ON-OFF) Calcular la resistencia para el control del motor DC Motor PAP","title":"Pr\u00e1cticas"},{"location":"ESP8266/99_practicas/#dth11","text":"Descripci\u00f3n Materiales Diagrama pict\u00f3rico 6.2.1 Leer los valores de Temperatura y humedad relativa en la terminal 1 DTH11 6.2.2 Leer los valores de Temperatura y humedad mostrandolo en la LCD 1 DTH11 1 LCD con I2C 6.2.3 Leer los valores de Temperatura y humedad mostrandolo en la LCD, mostrar la temperatura en grados celsius y grados farenheit 1 DTH11 1 LCD con I2C 6.2.4 Leer la temperatura,con forme vaya incrementando la temperatura vay\u00e1n encendiendo los leds, y apagando en secuencia en funci\u00f3n de la temperatura 1 LCD con I2C 3 LEDs 3 Resistencias","title":"DTH11"},{"location":"ESP8266/99_practicas/#salidas-analogicas-pwm","text":"Control de Led RGB Control de un motor DC Regulador de velocidad motor DC Giro de un motor DC Servo Control de velocidad de un motor DC, se controlara la velocidad del motor a traves de un potenci\u00f3metro. Si el potenci\u00f3metro esta en 0 el motor debe estar apagado, si esta al 50% el motor girara a la mitad de su velocidad, cuando llegue a 100% el motor debe girar a su maxima velocidad. Control de la intensidad de varias luces, se tendr\u00e1n 3 leds cada uno controlado con su respectivo potenci\u00f3metro para hacer variar la intensidad de la luz de cada uno. Todos de manera independiente. Control de la intensidad de varias luces, se tendr\u00e1n 3 luces. 2 leds cada uno controlado con su respectivo potenci\u00f3metro para hacer variar la intensidad de la luz de cada uno, un tercero controlado con botones, uno para incrementar y otro para decrementar la intensidad. Todos de manera independiente. Utilizando un servomotor que se utilizara para controlar la pluma de la entrada de estacionamiento. Se simula un sensor infrarrojo para detectar el auto y se levante la pluma (180\u00b0), cuando no detecte el auto, bajara la pluma (0\u00b0)","title":"Salidas anal\u00f3gicas (PWM)"},{"location":"ESP8266/99_practicas/#sensores-digitales","text":"","title":"Sensores digitales"},{"location":"ESP8266/99_practicas/#sensor-pir","text":"","title":"Sensor PIR"},{"location":"ESP8266/99_practicas/#sensores-analogicos","text":"","title":"Sensores anal\u00f3gicos"},{"location":"ESP8266/99_practicas/#varios","text":"","title":"Varios"},{"location":"ESP8266/99_practicas/#control-de-cargas-de-alta-potencia-relay","text":"","title":"Control de cargas de alta potencia (Relay)"},{"location":"ESP8266/99_practicas/#ajustar-estos-ejercicios","text":"","title":"Ajustar estos ejercicios"},{"location":"ESP8266/99_practicas/#sensores","text":"","title":"Sensores"},{"location":"ESP8266/99_practicas/#salidas-digitales","text":"Simula un sensor de luz el cual haga encender un foco cuando incida poca luz (por debajo del 45%). En caso que supere esa cantidad de luz el foco se debe mantener apagado. Simula un sensor de distancia (infrarrojo). Carrito seguido de luz. Se tendran 2 sensores infrarrojos, el derecho e izquierdo, cuando el sensor derecho detecte luz debe arrancar una llanta (motor DC izquierdo), cuando el sensor izquierdo reciba luz debe encender la llanta derecha (motor DC derecho). Cuando no reciba luz ningun sensor debe apagar ambos motores, si ambos reciben luz deben encender ambos motores.","title":"Salidas digitales"},{"location":"ESP8266/99_practicas/#entrandas-analogicas","text":"Leer 2 potenciometros, cada uno controla una barra de leds, en el rango del 0 al 100% los leds iran encendiendo. Leer un potenciometro e indicar por terminal el porcentaje equivalente, es decir, si se recibe 0.0 es equivalente al 0%, si recibes el 0.5 se imprime 50%, hasta llegar al 100%.","title":"entrandas analogicas"},{"location":"ESP8266/99_practicas/#sensores-analogicos_1","text":"Simular un sensor de luz junto con un sensor de presencia (digital). Dicho sensores trabajan a la par, si hay poca luz y existe presencia en el cuarto se debe encender un foco. En caso que no exista presencia sin importar la intensidad de la luz, el foco no enciende. 3. Simular un sensor infrarrojo para accionar el movimiento de un servomotor, entre mas luz incida debe incrementar el angulo del servomotor. Es decir, entre mas cerca se incrementa el angulo, entre mas lejos es menor el angulo. Carrito seguido de luz Descripci\u00f3n: El carrito debe reaccionar a la estimulaci\u00f3n de la luz. El carrito debe seguir la direcci\u00f3n de la luz. Por ende, las llantitas deben activarse para lograr dicho efecto. Material: 2 LDR 2 R10k 2 Motor DC 1 L293D Esquema:","title":"sensores Anal\u00f3gicos"},{"location":"assets/motor_step/step_motor/","text":"fritzing-parts My own Fritzing parts repository, ready to be used. EXAMPLE A 28BYJ-48 Unipolar Stepper Motor with its ULN2003 Driver Module attached, mounted with an Arduino UNO. Download this fritzing example . LICENSE This work is licensed under the GNU General Public License v3.0 . All media and data files that are not source code are licensed under the Creative Commons Attribution 4.0 BY-SA license . More information about licenses in Opensource licenses and Creative Commons licenses .","title":"fritzing-parts"},{"location":"assets/motor_step/step_motor/#fritzing-parts","text":"My own Fritzing parts repository, ready to be used.","title":"fritzing-parts"},{"location":"assets/motor_step/step_motor/#example","text":"A 28BYJ-48 Unipolar Stepper Motor with its ULN2003 Driver Module attached, mounted with an Arduino UNO. Download this fritzing example .","title":"EXAMPLE"},{"location":"assets/motor_step/step_motor/#license","text":"This work is licensed under the GNU General Public License v3.0 . All media and data files that are not source code are licensed under the Creative Commons Attribution 4.0 BY-SA license . More information about licenses in Opensource licenses and Creative Commons licenses .","title":"LICENSE"},{"location":"assets/motor_step/step_motor/28BYJ-48-driver/","text":"28BYJ-48 Driver Module ULN2003 A fritzing part for the 28BYJ-48 Driver Module ULN2003 with its JST connector and all the control and power pins. Includes also the schematic symbol and the pcb footprint. Have a look at the 28BYJ-48 Stepper Motor part also. NOTES The JST connector pins are incorrectly marked as female on purpose, as a trick to help Fritzing connect the 28BYJ-48 Unipolar Stepper Motor to it more naturally (the same trick is applied to the motor itself). Used some of the fritzing tools by @Vanepp : go check them. LICENSE This work is licensed under the GNU General Public License v3.0 . All media and data files that are not source code are licensed under the Creative Commons Attribution 4.0 BY-SA license . More information about licenses in Opensource licenses and Creative Commons licenses .","title":"28BYJ-48 Driver Module ULN2003"},{"location":"assets/motor_step/step_motor/28BYJ-48-driver/#28byj-48-driver-module-uln2003","text":"A fritzing part for the 28BYJ-48 Driver Module ULN2003 with its JST connector and all the control and power pins. Includes also the schematic symbol and the pcb footprint. Have a look at the 28BYJ-48 Stepper Motor part also.","title":"28BYJ-48 Driver Module ULN2003"},{"location":"assets/motor_step/step_motor/28BYJ-48-driver/#notes","text":"The JST connector pins are incorrectly marked as female on purpose, as a trick to help Fritzing connect the 28BYJ-48 Unipolar Stepper Motor to it more naturally (the same trick is applied to the motor itself). Used some of the fritzing tools by @Vanepp : go check them.","title":"NOTES"},{"location":"assets/motor_step/step_motor/28BYJ-48-driver/#license","text":"This work is licensed under the GNU General Public License v3.0 . All media and data files that are not source code are licensed under the Creative Commons Attribution 4.0 BY-SA license . More information about licenses in Opensource licenses and Creative Commons licenses .","title":"LICENSE"},{"location":"assets/motor_step/step_motor/28BYJ-48-motor/","text":"28BYJ-48 Stepper Motor A fritzing part for the 28BYJ-48 Stepper Motor with its JST connector and all the wiring done correctly. Includes also the schematic symbol and the pcb footprint. Have a look at the 28BYJ-48 ULN2003 driver module part also. NOTES The connector pins are incorrectly marked as male on purpose as a trick to help Fritzing connect it to the driver module more easily (where the same trick is applied). Used some of the fritzing tools by @Vanepp : go check them. LICENSE This work is licensed under the GNU General Public License v3.0 . All media and data files that are not source code are licensed under the Creative Commons Attribution 4.0 BY-SA license . More information about licenses in Opensource licenses and Creative Commons licenses .","title":"28BYJ-48 Stepper Motor"},{"location":"assets/motor_step/step_motor/28BYJ-48-motor/#28byj-48-stepper-motor","text":"A fritzing part for the 28BYJ-48 Stepper Motor with its JST connector and all the wiring done correctly. Includes also the schematic symbol and the pcb footprint. Have a look at the 28BYJ-48 ULN2003 driver module part also.","title":"28BYJ-48 Stepper Motor"},{"location":"assets/motor_step/step_motor/28BYJ-48-motor/#notes","text":"The connector pins are incorrectly marked as male on purpose as a trick to help Fritzing connect it to the driver module more easily (where the same trick is applied). Used some of the fritzing tools by @Vanepp : go check them.","title":"NOTES"},{"location":"assets/motor_step/step_motor/28BYJ-48-motor/#license","text":"This work is licensed under the GNU General Public License v3.0 . All media and data files that are not source code are licensed under the Creative Commons Attribution 4.0 BY-SA license . More information about licenses in Opensource licenses and Creative Commons licenses .","title":"LICENSE"},{"location":"assets/motor_step/step_motor/EscornaKeypad/","text":"Escornabot 5 keys Keypad A fritzing part for the Escornabot 5 keys Keypad with bendable legs/connectors. NOTES Part of the Escornabot project . Fritzing part of the original design . Used some of the fritzing tools by @Vanepp : go check them. LICENSE This work is licensed under the GNU General Public License v3.0 . All media and data files that are not source code are licensed under the Creative Commons Attribution 4.0 BY-SA license . More information about licenses in Opensource licenses and Creative Commons licenses .","title":"Escornabot 5 keys Keypad"},{"location":"assets/motor_step/step_motor/EscornaKeypad/#escornabot-5-keys-keypad","text":"A fritzing part for the Escornabot 5 keys Keypad with bendable legs/connectors.","title":"Escornabot 5 keys Keypad"},{"location":"assets/motor_step/step_motor/EscornaKeypad/#notes","text":"Part of the Escornabot project . Fritzing part of the original design . Used some of the fritzing tools by @Vanepp : go check them.","title":"NOTES"},{"location":"assets/motor_step/step_motor/EscornaKeypad/#license","text":"This work is licensed under the GNU General Public License v3.0 . All media and data files that are not source code are licensed under the Creative Commons Attribution 4.0 BY-SA license . More information about licenses in Opensource licenses and Creative Commons licenses .","title":"LICENSE"},{"location":"assets/motor_step/step_motor/NeoPixel/","text":"NeoPixel WS2812B RGB LED A fritzing part of a chainable WS2812B 5V RGB LED in a circular 10mm diameter PCB. LICENSE This work is licensed under the GNU General Public License v3.0 . All media and data files that are not source code are licensed under the Creative Commons Attribution 4.0 BY-SA license . More information about licenses in Opensource licenses and Creative Commons licenses .","title":"NeoPixel WS2812B RGB LED"},{"location":"assets/motor_step/step_motor/NeoPixel/#neopixel-ws2812b-rgb-led","text":"A fritzing part of a chainable WS2812B 5V RGB LED in a circular 10mm diameter PCB.","title":"NeoPixel WS2812B RGB LED"},{"location":"assets/motor_step/step_motor/NeoPixel/#license","text":"This work is licensed under the GNU General Public License v3.0 . All media and data files that are not source code are licensed under the Creative Commons Attribution 4.0 BY-SA license . More information about licenses in Opensource licenses and Creative Commons licenses .","title":"LICENSE"},{"location":"assets/motor_step/step_motor/NodeMCUv3/","text":"Lolin NodeMCU v3 A fritzing part of an ESP-8266 Lolin NodeMCU v3 board, based on the work of Achim Pieters . LICENSE This work is licensed under the GNU General Public License v3.0 . All media and data files that are not source code are licensed under the Creative Commons Attribution 4.0 BY-SA license . More information about licenses in Opensource licenses and Creative Commons licenses .","title":"Lolin NodeMCU v3"},{"location":"assets/motor_step/step_motor/NodeMCUv3/#lolin-nodemcu-v3","text":"A fritzing part of an ESP-8266 Lolin NodeMCU v3 board, based on the work of Achim Pieters .","title":"Lolin NodeMCU v3"},{"location":"assets/motor_step/step_motor/NodeMCUv3/#license","text":"This work is licensed under the GNU General Public License v3.0 . All media and data files that are not source code are licensed under the Creative Commons Attribution 4.0 BY-SA license . More information about licenses in Opensource licenses and Creative Commons licenses .","title":"LICENSE"},{"location":"assets/motor_step/step_motor/Sensirion-SCD30/","text":"Sensirion SCD30 A fritzing part of a Sensirion SCD30 CO 2 NDIR sensor . LICENSE This work is licensed under the GNU General Public License v3.0 . All media and data files that are not source code are licensed under the Creative Commons Attribution 4.0 BY-SA license . More information about licenses in Opensource licenses and Creative Commons licenses .","title":"Sensirion SCD30"},{"location":"assets/motor_step/step_motor/Sensirion-SCD30/#sensirion-scd30","text":"A fritzing part of a Sensirion SCD30 CO 2 NDIR sensor .","title":"Sensirion SCD30"},{"location":"assets/motor_step/step_motor/Sensirion-SCD30/#license","text":"This work is licensed under the GNU General Public License v3.0 . All media and data files that are not source code are licensed under the Creative Commons Attribution 4.0 BY-SA license . More information about licenses in Opensource licenses and Creative Commons licenses .","title":"LICENSE"},{"location":"assets/motor_step/step_motor/buzzer-active/","text":"Active buzzer 12mm, 3-5V A fritzing part of an active buzzer of 12mm diameter and 3-5V, without a breakout board and with bendable legs. LICENSE This work is licensed under the GNU General Public License v3.0 . All media and data files that are not source code are licensed under the Creative Commons Attribution 4.0 BY-SA license . More information about licenses in Opensource licenses and Creative Commons licenses .","title":"Active buzzer 12mm, 3-5V"},{"location":"assets/motor_step/step_motor/buzzer-active/#active-buzzer-12mm-3-5v","text":"A fritzing part of an active buzzer of 12mm diameter and 3-5V, without a breakout board and with bendable legs.","title":"Active buzzer 12mm, 3-5V"},{"location":"assets/motor_step/step_motor/buzzer-active/#license","text":"This work is licensed under the GNU General Public License v3.0 . All media and data files that are not source code are licensed under the Creative Commons Attribution 4.0 BY-SA license . More information about licenses in Opensource licenses and Creative Commons licenses .","title":"LICENSE"},{"location":"assets/motor_step/step_motor/buzzer-passive/","text":"Passive buzzer 12mm, 3-5V A fritzing part of a passive buzzer of 12mm diameter and 3-5V, without a breakout board and with bendable legs. NOTES Used some of the fritzing tools by @Vanepp : go check them. LICENSE This work is licensed under the GNU General Public License v3.0 . All media and data files that are not source code are licensed under the Creative Commons Attribution 4.0 BY-SA license . More information about licenses in Opensource licenses and Creative Commons licenses .","title":"Passive buzzer 12mm, 3-5V"},{"location":"assets/motor_step/step_motor/buzzer-passive/#passive-buzzer-12mm-3-5v","text":"A fritzing part of a passive buzzer of 12mm diameter and 3-5V, without a breakout board and with bendable legs.","title":"Passive buzzer 12mm, 3-5V"},{"location":"assets/motor_step/step_motor/buzzer-passive/#notes","text":"Used some of the fritzing tools by @Vanepp : go check them.","title":"NOTES"},{"location":"assets/motor_step/step_motor/buzzer-passive/#license","text":"This work is licensed under the GNU General Public License v3.0 . All media and data files that are not source code are licensed under the Creative Commons Attribution 4.0 BY-SA license . More information about licenses in Opensource licenses and Creative Commons licenses .","title":"LICENSE"},{"location":"capitulo_1/","text":"Capitulo 1 Python - Mecatr\u00f3nica 85 En el capitulo 1 es para toda la base del Lenguaje Python Mapa del sitio","title":"Python"},{"location":"capitulo_1/#capitulo-1","text":"","title":"Capitulo 1"},{"location":"capitulo_1/#python-mecatronica-85","text":"En el capitulo 1 es para toda la base del Lenguaje Python","title":"Python - Mecatr\u00f3nica 85"},{"location":"capitulo_1/#mapa-del-sitio","text":"","title":"Mapa del sitio"},{"location":"capitulo_1/01_Introducci%C3%B3n_a_python/","text":"Introducci\u00f3n a Python Python es un lenguaje de programaci\u00f3n interpretado de prop\u00f3sito general, es dinamicamente tipado. Estamos hablando de un lenguaje de programaci\u00f3n dinamicamente tipado. Como tal si existen los tipos pero no se definen explicitamente y pueden ir cambiando en cualquier momento. Instalaci\u00f3n de Python Para instalar Python se entra a su sitio oficial https://www.python.org/ Al momento de realizar esta documentaci\u00f3n estamos en la versi\u00f3n 3.9.2 Pero usaremos una versi\u00f3n estable de Python 3.7.3 . Instalaci\u00f3n de Python en Windows Se elige para la versi\u00f3n del sistema operativo. En esta caso vamos a suponer que tenemos una versi\u00f3n de Windows a 64 bits (x64). Elegimos la versi\u00f3n Windows x86-64 executable installer Al ejecutar el instalador se debe activar la creaci\u00f3n del PATH (variable de entorno), para que se agregue de forma autom\u00e1tica y se pueda ocupar en la linea de comando (CMD) de Windows. Tipos de lenguajes de programaci\u00f3n Lenguaje COMPILADO Lenguaje INTERPRETADO Ventajas de Python Python es multiplaforma Python es Open Source Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Introducci\u00f3n a Python"},{"location":"capitulo_1/01_Introducci%C3%B3n_a_python/#introduccion-a-python","text":"Python es un lenguaje de programaci\u00f3n interpretado de prop\u00f3sito general, es dinamicamente tipado. Estamos hablando de un lenguaje de programaci\u00f3n dinamicamente tipado. Como tal si existen los tipos pero no se definen explicitamente y pueden ir cambiando en cualquier momento.","title":"Introducci\u00f3n a Python"},{"location":"capitulo_1/01_Introducci%C3%B3n_a_python/#instalacion-de-python","text":"Para instalar Python se entra a su sitio oficial https://www.python.org/ Al momento de realizar esta documentaci\u00f3n estamos en la versi\u00f3n 3.9.2 Pero usaremos una versi\u00f3n estable de Python 3.7.3 .","title":"Instalaci\u00f3n de Python"},{"location":"capitulo_1/01_Introducci%C3%B3n_a_python/#instalacion-de-python-en-windows","text":"Se elige para la versi\u00f3n del sistema operativo. En esta caso vamos a suponer que tenemos una versi\u00f3n de Windows a 64 bits (x64). Elegimos la versi\u00f3n Windows x86-64 executable installer Al ejecutar el instalador se debe activar la creaci\u00f3n del PATH (variable de entorno), para que se agregue de forma autom\u00e1tica y se pueda ocupar en la linea de comando (CMD) de Windows.","title":"Instalaci\u00f3n de Python en Windows"},{"location":"capitulo_1/01_Introducci%C3%B3n_a_python/#tipos-de-lenguajes-de-programacion","text":"Lenguaje COMPILADO Lenguaje INTERPRETADO","title":"Tipos de lenguajes de programaci\u00f3n"},{"location":"capitulo_1/01_Introducci%C3%B3n_a_python/#ventajas-de-python","text":"Python es multiplaforma Python es Open Source Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Ventajas de Python"},{"location":"capitulo_1/02_Variables_en_Python/","text":"Variables en Python Python es un lenguaje dinamicamente tipado, y sin declaraci\u00f3n de tipo, tan solo se declara la variable con un valor de inicializaci\u00f3n, es lo \u00fanico necesario . Buenas pr\u00e1cticas para declaraci\u00f3n de variables en Python En Python las buenas practicas que se aplican a la declaraci\u00f3n de variables, son las siguientes: Se deben escribir en min\u00fasculas Solo puede contener n\u00fameros despu\u00e9s de la primera letra con el que comienza el nombre de la variable que estamos declarando. Ejemplo: k5m variable1 v2s variable_2 Sensibles a min\u00fasculas y may\u00fasculas; es decir, si declaro una variable llamada variable1 y otra llamada Variable1 , para la computadora son variables o espacios de memoria distintos, aun que suenen igual, con el solo hecho de cambiar una letra, ya estamos hablando de una variable distinta. No pueden contener espacios entre letras o palabras No puede comenzar con n\u00fameros o s\u00edmbolos No puede contener caracteres especiales, todos son caracteres especiales menos el abecedario ingles. Ejemplo: !\"\u00b7$%&\\/()=?\u00bf. El nombre debe ser descriptivo ; es decir, con solo leerlo podemos deducir qu\u00e9 hace o para qu\u00e9 fue declarada (Regla especial): Todo de escribe en ingles. Si se desea escribir una variable combinando dos palabras o m\u00e1s, se separar\u00e1n con un gui\u00f3n bajo (_). Esta convensi\u00f3n se llama Snake Case (snake_case) Ejemplos: valor valor1 valor_uno valor_1 Siempre se debe inicializar la variable : Ejemplo: mi_variable = 10 variable_2 = \"mensaje\" Tipos de datos en Python Al ser un lenguaje dinamicamente tipado no es necesario indicar que tipo es variable, pero se deben conocer para la compatibilidad de tipos y c\u00f3mo podemos trabajar con ellos. Tipo Descripci\u00f3n Ejemplo Int N\u00fameros enteros naturales variable_int = 10 Float N\u00fameros con punto decimal variable_flotante = 2.2 str Cadena de caracteres (String) variable_str = \"texto\" Bool Tipo booleano variable_bool = True Complex Tipo n\u00famero complejo variable_complex = 3+5j (Int) Hexadecimal N\u00famero hexadecimal variable_hex = 0xa (Int) Octal N\u00famero octal variable_oct = 0o12 (Int) Binario N\u00famero binario variable_bin = 0b1010 Variables tipo Enteras (int) El tipo de variable m\u00e1s com\u00fan son las variables enteras, que son valores tanto negativos o positivos enteros . Pr\u00e1cticamente no hay l\u00edmite con el valor que se puede asignar, siempre y cuando no tenga parte fraccionaria. Ejemplo: variable = 10 # Inicializo con un valor de 10 variable_2 = 0 # Inicializo con un valor de 0 variable_3 = - 5 # Inicializo con un valor de -5 valor_enorme = 5000000000000000000000000000000000000000000000000000000 print ( variable ) print ( \"-----\" ) print ( variable_2 ) print ( \"-----\" ) print ( variable_3 ) print ( \"-----\" ) print ( valor_enorme ) 10 ----- 0 ----- -5 ----- 5000000000000000000000000000000000000000000000000000000 Dentro de la variables enteras tambi\u00e9n est\u00e1n comprendidas otro n\u00fameros con base diferente, siempre manejamos base decimal. En el ejemplo que se muestra asignaci\u00f3n de otros tipos de variables. diez = 10 # Base diez, comprende de 0 a 9 diez_binario = 0b1010 # N\u00famero binario, comprende de 0 y 1 diez_octal = 0o12 # Base Octal, comprende de 0 a 7 diez_hex = 0x0a # Base hexadecimal comprende de 0 a F print ( diez ) print ( \"-----\" ) print ( diez_binario ) print ( \"-----\" ) print ( diez_octal ) print ( \"-----\" ) print ( diez_hex ) 10 ----- 10 ----- 10 ----- 10 Variables tipo Flotantes (float) El tipo de variable flotante o punto flotante, que son valores tanto negativos o positivos con parte decimal . Pr\u00e1cticamente no hay l\u00edmite con el valor que se puede asignar. Ejemplo: variable = 5.6 # Inicializo con un valor de 5.6 variable_2 = 0.4 # Inicializo con un valor de 0.4 variable_3 = - 5.4 # Inicializo con un valor de -5.4 variable_4 = 0.000000000000000005616516851654864651 print ( variable ) print ( \"-----\" ) print ( variable_2 ) print ( \"-----\" ) print ( variable_3 ) print ( \"-----\" ) print ( variable_4 ) print ( \"-----\" ) 5.6 ----- 0.4 ----- -5.4 ----- 5.616516851654865e-18 ----- Variables tipo str (String) o Cadena de caracteres Otro tipo de dato utilizado es el tipo de dato String, abreviado str . Hay varias formas para crear este tipo de dato, se debe escribir entre doble comilla \"\" , entre doble comilla simple '' , entre tripe comilla simple ''' ''' , entre triple dobles comillas \"\"\" \"\"\" cadena_1 = 'This is a string in Python' # string in single quotes cadena_2 = \"This is a string in Python\" # string in double quotes cadena_3 = '''This is a string in Python''' # string in triple quotes cadena_4 = \"\"\"This is a string in Python\"\"\" # string in triple double-quotes print ( cadena_1 ) print ( \"----------------\" ) print ( cadena_2 ) print ( \"----------------\" ) print ( cadena_3 ) print ( \"----------------\" ) print ( cadena_4 ) This is a string in Python ---------------- This is a string in Python ---------------- This is a string in Python ---------------- This is a string in Python En concreto entre doble comilla y comilla simple no hay diferencias pero con lo que respecta a triple comilla simple y triple comilla doble, se conoce como multilinea. str1 = '''This is the first Multi-line string. ''' print ( str1 ) str2 = \"\"\"This is the second Multi-line string.\"\"\" print ( str2 ) No se pueden mezclar entre doble comilla y simple comilla, y tienen efectos similares, es decir, si necesitamos mostrar un texto con comillas simples o doble comilla, se realiza de la siguiente manera. str1 = 'Estamos aprendiendo \"Python\" paso a paso' print ( str1 ) str2 = \"Estamos aprendiendo 'Python' paso a paso\" print ( str2 ) Estamos aprendiendo \"Python\" paso a paso Estamos aprendiendo 'Python' paso a paso Variables tipo Booleana (bool) El tipo de dato booleano solo tiene dos tipos de valores: - True - False Creamos unas variables y asignamos valores tipo booleanos. Ejemplo: valor_verdadero = True valor_falso = False print ( valor_verdadero ) print ( '----------' ) print ( valor_falso ) True ---------- False Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Variables en Python"},{"location":"capitulo_1/02_Variables_en_Python/#variables-en-python","text":"Python es un lenguaje dinamicamente tipado, y sin declaraci\u00f3n de tipo, tan solo se declara la variable con un valor de inicializaci\u00f3n, es lo \u00fanico necesario .","title":"Variables en Python"},{"location":"capitulo_1/02_Variables_en_Python/#buenas-practicas-para-declaracion-de-variables-en-python","text":"En Python las buenas practicas que se aplican a la declaraci\u00f3n de variables, son las siguientes: Se deben escribir en min\u00fasculas Solo puede contener n\u00fameros despu\u00e9s de la primera letra con el que comienza el nombre de la variable que estamos declarando. Ejemplo: k5m variable1 v2s variable_2 Sensibles a min\u00fasculas y may\u00fasculas; es decir, si declaro una variable llamada variable1 y otra llamada Variable1 , para la computadora son variables o espacios de memoria distintos, aun que suenen igual, con el solo hecho de cambiar una letra, ya estamos hablando de una variable distinta. No pueden contener espacios entre letras o palabras No puede comenzar con n\u00fameros o s\u00edmbolos No puede contener caracteres especiales, todos son caracteres especiales menos el abecedario ingles. Ejemplo: !\"\u00b7$%&\\/()=?\u00bf. El nombre debe ser descriptivo ; es decir, con solo leerlo podemos deducir qu\u00e9 hace o para qu\u00e9 fue declarada (Regla especial): Todo de escribe en ingles. Si se desea escribir una variable combinando dos palabras o m\u00e1s, se separar\u00e1n con un gui\u00f3n bajo (_). Esta convensi\u00f3n se llama Snake Case (snake_case) Ejemplos: valor valor1 valor_uno valor_1 Siempre se debe inicializar la variable : Ejemplo: mi_variable = 10 variable_2 = \"mensaje\"","title":"Buenas pr\u00e1cticas para declaraci\u00f3n de variables en Python"},{"location":"capitulo_1/02_Variables_en_Python/#tipos-de-datos-en-python","text":"Al ser un lenguaje dinamicamente tipado no es necesario indicar que tipo es variable, pero se deben conocer para la compatibilidad de tipos y c\u00f3mo podemos trabajar con ellos. Tipo Descripci\u00f3n Ejemplo Int N\u00fameros enteros naturales variable_int = 10 Float N\u00fameros con punto decimal variable_flotante = 2.2 str Cadena de caracteres (String) variable_str = \"texto\" Bool Tipo booleano variable_bool = True Complex Tipo n\u00famero complejo variable_complex = 3+5j (Int) Hexadecimal N\u00famero hexadecimal variable_hex = 0xa (Int) Octal N\u00famero octal variable_oct = 0o12 (Int) Binario N\u00famero binario variable_bin = 0b1010","title":"Tipos de datos en Python"},{"location":"capitulo_1/02_Variables_en_Python/#variables-tipo-enteras-int","text":"El tipo de variable m\u00e1s com\u00fan son las variables enteras, que son valores tanto negativos o positivos enteros . Pr\u00e1cticamente no hay l\u00edmite con el valor que se puede asignar, siempre y cuando no tenga parte fraccionaria. Ejemplo: variable = 10 # Inicializo con un valor de 10 variable_2 = 0 # Inicializo con un valor de 0 variable_3 = - 5 # Inicializo con un valor de -5 valor_enorme = 5000000000000000000000000000000000000000000000000000000 print ( variable ) print ( \"-----\" ) print ( variable_2 ) print ( \"-----\" ) print ( variable_3 ) print ( \"-----\" ) print ( valor_enorme ) 10 ----- 0 ----- -5 ----- 5000000000000000000000000000000000000000000000000000000 Dentro de la variables enteras tambi\u00e9n est\u00e1n comprendidas otro n\u00fameros con base diferente, siempre manejamos base decimal. En el ejemplo que se muestra asignaci\u00f3n de otros tipos de variables. diez = 10 # Base diez, comprende de 0 a 9 diez_binario = 0b1010 # N\u00famero binario, comprende de 0 y 1 diez_octal = 0o12 # Base Octal, comprende de 0 a 7 diez_hex = 0x0a # Base hexadecimal comprende de 0 a F print ( diez ) print ( \"-----\" ) print ( diez_binario ) print ( \"-----\" ) print ( diez_octal ) print ( \"-----\" ) print ( diez_hex ) 10 ----- 10 ----- 10 ----- 10","title":"Variables tipo Enteras (int)"},{"location":"capitulo_1/02_Variables_en_Python/#variables-tipo-flotantes-float","text":"El tipo de variable flotante o punto flotante, que son valores tanto negativos o positivos con parte decimal . Pr\u00e1cticamente no hay l\u00edmite con el valor que se puede asignar. Ejemplo: variable = 5.6 # Inicializo con un valor de 5.6 variable_2 = 0.4 # Inicializo con un valor de 0.4 variable_3 = - 5.4 # Inicializo con un valor de -5.4 variable_4 = 0.000000000000000005616516851654864651 print ( variable ) print ( \"-----\" ) print ( variable_2 ) print ( \"-----\" ) print ( variable_3 ) print ( \"-----\" ) print ( variable_4 ) print ( \"-----\" ) 5.6 ----- 0.4 ----- -5.4 ----- 5.616516851654865e-18 -----","title":"Variables tipo Flotantes (float)"},{"location":"capitulo_1/02_Variables_en_Python/#variables-tipo-str-string-o-cadena-de-caracteres","text":"Otro tipo de dato utilizado es el tipo de dato String, abreviado str . Hay varias formas para crear este tipo de dato, se debe escribir entre doble comilla \"\" , entre doble comilla simple '' , entre tripe comilla simple ''' ''' , entre triple dobles comillas \"\"\" \"\"\" cadena_1 = 'This is a string in Python' # string in single quotes cadena_2 = \"This is a string in Python\" # string in double quotes cadena_3 = '''This is a string in Python''' # string in triple quotes cadena_4 = \"\"\"This is a string in Python\"\"\" # string in triple double-quotes print ( cadena_1 ) print ( \"----------------\" ) print ( cadena_2 ) print ( \"----------------\" ) print ( cadena_3 ) print ( \"----------------\" ) print ( cadena_4 ) This is a string in Python ---------------- This is a string in Python ---------------- This is a string in Python ---------------- This is a string in Python En concreto entre doble comilla y comilla simple no hay diferencias pero con lo que respecta a triple comilla simple y triple comilla doble, se conoce como multilinea. str1 = '''This is the first Multi-line string. ''' print ( str1 ) str2 = \"\"\"This is the second Multi-line string.\"\"\" print ( str2 ) No se pueden mezclar entre doble comilla y simple comilla, y tienen efectos similares, es decir, si necesitamos mostrar un texto con comillas simples o doble comilla, se realiza de la siguiente manera. str1 = 'Estamos aprendiendo \"Python\" paso a paso' print ( str1 ) str2 = \"Estamos aprendiendo 'Python' paso a paso\" print ( str2 ) Estamos aprendiendo \"Python\" paso a paso Estamos aprendiendo 'Python' paso a paso","title":"Variables tipo str (String) o Cadena de caracteres"},{"location":"capitulo_1/02_Variables_en_Python/#variables-tipo-booleana-bool","text":"El tipo de dato booleano solo tiene dos tipos de valores: - True - False Creamos unas variables y asignamos valores tipo booleanos. Ejemplo: valor_verdadero = True valor_falso = False print ( valor_verdadero ) print ( '----------' ) print ( valor_falso ) True ---------- False Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Variables tipo Booleana (bool)"},{"location":"capitulo_1/03_Concatenacion_de_Strings/","text":"Concatenaci\u00f3n de Strings La concatenaci\u00f3n es el poder agrupar, juntar, unir, fusionar, pegar cadenas de caracteres, es decir, \"sumar\" varios string para formar uno solo. La concatenaci\u00f3n es realiza con el s\u00edmbolo del signo m\u00e1s + . Concatenando con + Tenemos variables tipo str en donde guardamos texto. Ejemplo frase = \"La mejor especialidad es: \" nombre = \"Mecatronica\" frase_completa = frase + nombre print ( frase + nombre ) print ( frase_completa ) La mejor especialidad es: Mecatronica La mejor especialidad es: Mecatronica Funci\u00f3n str() En la concatenaci\u00f3n b\u00e1sica solo se pueden concatenar tipos str , por lo tanto, si necesitamos hacer un paso previo para que el tipo de dato que no sea str se convierta a este tipo. Para ello contamos con funci\u00f3n str() la cual realiza ese trabajo. La sintaxis es: str ( object , encoding = encoding , errors = errors ) Par\u00e1metros: object Cualquier tipo de objeto encoding El encoding del objeto. Por default es UTF-8 errors Especifica que si hay un error en el encoding, que debe hacer return: Regresa el dato en tipo str : (str) Entonces, si tenemos un tipo int , float o boolean primero debemos convertirlos a tipo str . Ejemplo: frase = \"Mi edad es: \" edad = 25 edad_str = str ( 25 ) print ( frase + edad ) Concatenando otros tipos de datos. Si queremos hacer una concatenaci\u00f3n directa entre un tipo str y otro tipo de dato, nos saldr\u00e1 un error de tipo, indicando que no se puede concatenar str con alguno otro tipo. Como se muestra a continuaci\u00f3n: print ( \"Mi edad es: \" + 25 ) --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-2-fb8333b91b59> in <module> ----> 1 print(\"Mi edad es: \" + 25) TypeError: can only concatenate str (not \"int\") to str Por lo tanto, debemos hacer esa conversi\u00f3n previa a la concatenaci\u00f3n. Existen dos formas, tomamos el valor, realizamos la conversi\u00f3n y se guarda en otra variable o la forma directa. Ejemplo: #Por partes frase = \"Mi edad es: \" edad = 25 edad_str = str ( 25 ) print ( frase + edad_str ) print ( \"Mi edad es: \" + edad_str ) Mi edad es: 25 Mi edad es: 25 Vamos a realizar una combinaci\u00f3n b\u00e1sica entre los tipos de datos b\u00e1sicos # Declaro las variables edad = 25 altura = 1.68 nombre = \"Alejandro\" casado = False #Las convierto a tipo str edad_str = str ( edad ) altura_str = str ( altura ) casado_str = str ( casado ) print ( \"Mi nombre es \" + nombre + \", mi edad es de \" + edad_str + \" anios,\" + \"tengo una altura de \" + altura_str + \" mi estado de casado es: \" + casado_str ) print ( \"Mi nombre es \" + nombre + \", mi edad es de \" + str ( edad ) + \" anios,\" + \"tengo una altura de \" + str ( altura ) + \" mi estado de casado es: \" + str ( casado )) Mi nombre es Alejandro, mi edad es de 25 anios,tengo una altura de 1.68 mi estado de casado es: False Mi nombre es Alejandro, mi edad es de 25 anios,tengo una altura de 1.68 mi estado de casado es: False Secuencias de espace Las secuencias de espace son caracteres especiales para darle formato a las cadenas de texto (Strings). Nombre Simbolo Secuencia de escape Backslash \\ \\\\ Comilla simple \\' \\' Comilla doble \\\" \\\" Bell (sonido) \\a Retroceso \\b Nueva l\u00ednea (enter) \\n Carriage return \\r \\r Tab horizontal tab \\t Tab vertical tab vertical \\v Salto de l\u00ednea \\n Cuando queremos que el texto tenga un salto de l\u00ednea (enter), tenemos la secuencia \\n . mensaje = \"Hola \\n Texto en siguiente linea \\n la siguiente linea\" print ( \" \\n \" + mensaje + \" \\n \" ) Hola Texto en siguiente linea la siguiente linea Tabulaci\u00f3n En ocasiones queremos tabular (sangr\u00eda) nuestro texto para darle un acomodo se aplica \\t mensaje = \"Columa 1 \\t Columna2 \\t Columna 3 \\n Columa 1 \\t Columna2 \\t Columna 3\" print ( mensaje ) Columa 1 Columna2 Columna 3 Columa 1 Columna2 Columna 3 Comillas En python nos da una ventaja con respecto al uso de comillas simples y dobles por default. Recordando que se pueden escribir Strings str con \" y ' . Pero vamos a ver la diferencia si queremos utilizar las comillas ya sean simple o doble dentro del mensaje que queremos transmitir; al igual la equivalencia de las secuencias de escape \\' y \\\" . # Si que queremos usar las comillas simples en un string sin utilizar la secuencia de escape, debemos usar # la comilla doble para generar dicho string mensajeDobleComilla = \"hola 'este texto esta en comilla simple' , texto fuera de la comilla\" mensajeComillaSimple = 'hola \\' este texto esta en comilla simple \\' , texto fuera de la comilla ' print ( mensajeDobleComilla ) print ( mensajeComillaSimple ) hola 'este texto esta en comilla simple' , texto fuera de la comilla hola 'este texto esta en comilla simple' , texto fuera de la comilla # Si que queremos usar doble comilla en un string sin utilizar la secuencia de escape, debemos usar # la comilla simple para generar dicho string mensajeComillaSimple = 'hola \"este texto esta en doble comilla\" texto fuera de la comilla ' mensajeDobleComilla = \"hola \\\" este texto esta en comilla simple \\\" , texto fuera de la comilla\" print ( mensajeDobleComilla ) print ( mensajeComillaSimple ) hola \"este texto esta en comilla simple\" , texto fuera de la comilla hola \"este texto esta en doble comilla\" texto fuera de la comilla Back Slash En ocasiones necesitamos utilizar la diagonal (slash) en un texto, para esto existe la secuencia de escape slasj doble \\\\ . # Utilizando slash en un texto, por ejemplo para rutas dentro de un string mensaje = 'ruta \\\\ carperta1 \\\\ carperta2 \\\\ archivo' print ( mensaje ) ruta\\carperta1\\carperta2\\archivo Formateo de Strings - funci\u00f3n format() Los str tienen una propiedad llamada format() con la cual podemos concatenar variables, se tienen en varias formas para realizar la concatenacion con este m\u00e9todo. Retorna el str con el formato indicado. Las variables se colocaran automaticamente en la llaves. Sintaxis: 'string {} ... {} ... ' . format ( variable1 , variable2 , ... ) 'string {0} ... {1} ... ' . format ( variable1 , variable2 , ... ) 'string {variable1} ... {variable2} ... ' . format ( variable1 = \"hola\" , variable2 = 5 , ... ) # La forma que es por default sin indicar nada, en el orden que los pasamos, seran asignados nombre = \"Alejandro\" edad = 30 texto_default = \"Mi nombre es {} y tengo {} anios de edad\" . format ( nombre , edad ) print ( texto_default ) Mi nombre es Alejandro y tengo 30 anios de edad # Formato indicando la varible en las llaves, esto sirve para cambiar el orden color = \"Rojo\" numero = 3 texto = \"El numero ' {1} ' corresponde al color ' {0} '\" . format ( color , numero ) print ( texto ) El numero '3' corresponde al color 'Rojo', con el numero 3 # Indicando el nombre de la variable texto_variables = \"Mi nombre es {nombre} tengo {edad} anios\" . format ( nombre = \"Alejandro\" , edad = 25 ) print ( texto_variables ) Mi nombre es Alejandro tengo 25 anios Formato para n\u00fameros y la precision En muchas ocasiones queremos imprimir un valor numerico pero con cierta cantidad decimales, con la funci\u00f3n format() nos da un formato para especificar como queremos la salida. Debemos marcar una sintaxis especial que sigue el siguiente formato, principalmente es para valores flotantes: Sintaxis: [index]:[width][.precision][type] Tipos: d para enteros f para flotantes b para n\u00fameros binarios o para n\u00fameros octal x para n\u00fameros hexadecimal s para strings e para flotante en formato exponente Aplicado: \"El precio es {0:1.2f} \" . format ( 25.365894 ) #es la primera posici\u00f3n [0] #es la primera posici\u00f3n [0], parte entera como minimo un valor, con 2 decimales y tomarlo como tipo flotante numero = 561.265264161 valor1 = \"El precio es {0:1.2f} \" . format ( numero ) # los valores enteros no es necesario indicar la parte decimal, solo se indica la posici\u00f3n valor2 = \"La calificacion final es {0:1.2f} de {1:1.1f} parciales\" . format ( 8.369 , 3 ) print ( valor1 ) print ( valor2 ) El precio es 561.27 La calificacion final es 8.37 de 3.0 parciales valor1 = float ( input ( 'Dar valor 1: ' )) valor2 = float ( input ( 'Dar valor 2: ' )) suma = valor1 + valor2 print ( 'El resultado es {0:1.3f} ' . format ( suma )) Dar valor 1: 2.56256 Dar valor 2: 2.6839 El resultado es 5.246 # Dar formato con decimales de forma din\u00e1mica valor = float ( input ( 'Dar un valor para redondear: ' )) redondeo = int ( input ( 'A cuantos decimales?: ' )) r = '0:1. {} f' . format ( redondeo ) msg = 'El valor redondeado a {1} decimales es: {' + r + '}' print ( msg ) print ( msg . format ( valor , redondeo )) Dar un valor para redondear: 25.0 A cuantos decimales?: 20 El valor redondeado a {1} decimales es: {0:1.20f} El valor redondeado a 20 decimales es: 25.00000000000000000000 nombre = \"Alejandro\" print ( \"Mi nombre es {0:s} \" . format ( nombre )) Mi nombre es Alejandro f'String' Actualmente se tiene una nueva forma para crear strings de forma mas sencilla y dar formato. Esta es la forma mas actual que se usa. Sintaxis: cantidad = 5 color = \"verde\" f 'El numero de autos es { cantidad } y todos son color { color } ' f \"El numero de autos es { cantidad } y todos son color { color } \" cantidad = 5 color = \"tutifruti\" mensaje1 = f 'El numero de autos es { cantidad } y todos son color { color } ' mensaje2 = f \"El numero de autos es \\\" { cantidad } \\\" y todos son color \\\" { color } \\\" \" print ( mensaje1 ) print ( mensaje2 ) El numero de autos es 5 y todos son color tutifruti El numero de autos es \"5\" y todos son color \"tutifruti\" Formato a n\u00fameros con f'string' Sintaxis: {variable:{width}.{decimal-1}} Aplicacion: num = 3.141592 print ( f \"El valor de pi es: { num :{ 1 } . { 3 }} \" ) # Es similar a la funci\u00f3n format(), con respecto a la sintaxis, no es necesario indicar la posici\u00f3n de la variable # los decimales es el valor menos 1 num = 3.14159 texto_formateado = f \"El valor de pi es: { num :{ 1 } . { 3 }} \" # queremos 2 decimales print ( texto_formateado ) El valor de pi es: 3.14 Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Concatenaci\u00f3n de Strings"},{"location":"capitulo_1/03_Concatenacion_de_Strings/#concatenacion-de-strings","text":"La concatenaci\u00f3n es el poder agrupar, juntar, unir, fusionar, pegar cadenas de caracteres, es decir, \"sumar\" varios string para formar uno solo. La concatenaci\u00f3n es realiza con el s\u00edmbolo del signo m\u00e1s + .","title":"Concatenaci\u00f3n de Strings"},{"location":"capitulo_1/03_Concatenacion_de_Strings/#concatenando-con","text":"Tenemos variables tipo str en donde guardamos texto. Ejemplo frase = \"La mejor especialidad es: \" nombre = \"Mecatronica\" frase_completa = frase + nombre print ( frase + nombre ) print ( frase_completa ) La mejor especialidad es: Mecatronica La mejor especialidad es: Mecatronica","title":"Concatenando con +"},{"location":"capitulo_1/03_Concatenacion_de_Strings/#funcion-str","text":"En la concatenaci\u00f3n b\u00e1sica solo se pueden concatenar tipos str , por lo tanto, si necesitamos hacer un paso previo para que el tipo de dato que no sea str se convierta a este tipo. Para ello contamos con funci\u00f3n str() la cual realiza ese trabajo. La sintaxis es: str ( object , encoding = encoding , errors = errors ) Par\u00e1metros: object Cualquier tipo de objeto encoding El encoding del objeto. Por default es UTF-8 errors Especifica que si hay un error en el encoding, que debe hacer return: Regresa el dato en tipo str : (str) Entonces, si tenemos un tipo int , float o boolean primero debemos convertirlos a tipo str . Ejemplo: frase = \"Mi edad es: \" edad = 25 edad_str = str ( 25 ) print ( frase + edad )","title":"Funci\u00f3n str()"},{"location":"capitulo_1/03_Concatenacion_de_Strings/#concatenando-otros-tipos-de-datos","text":"Si queremos hacer una concatenaci\u00f3n directa entre un tipo str y otro tipo de dato, nos saldr\u00e1 un error de tipo, indicando que no se puede concatenar str con alguno otro tipo. Como se muestra a continuaci\u00f3n: print ( \"Mi edad es: \" + 25 ) --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-2-fb8333b91b59> in <module> ----> 1 print(\"Mi edad es: \" + 25) TypeError: can only concatenate str (not \"int\") to str Por lo tanto, debemos hacer esa conversi\u00f3n previa a la concatenaci\u00f3n. Existen dos formas, tomamos el valor, realizamos la conversi\u00f3n y se guarda en otra variable o la forma directa. Ejemplo: #Por partes frase = \"Mi edad es: \" edad = 25 edad_str = str ( 25 ) print ( frase + edad_str ) print ( \"Mi edad es: \" + edad_str ) Mi edad es: 25 Mi edad es: 25 Vamos a realizar una combinaci\u00f3n b\u00e1sica entre los tipos de datos b\u00e1sicos # Declaro las variables edad = 25 altura = 1.68 nombre = \"Alejandro\" casado = False #Las convierto a tipo str edad_str = str ( edad ) altura_str = str ( altura ) casado_str = str ( casado ) print ( \"Mi nombre es \" + nombre + \", mi edad es de \" + edad_str + \" anios,\" + \"tengo una altura de \" + altura_str + \" mi estado de casado es: \" + casado_str ) print ( \"Mi nombre es \" + nombre + \", mi edad es de \" + str ( edad ) + \" anios,\" + \"tengo una altura de \" + str ( altura ) + \" mi estado de casado es: \" + str ( casado )) Mi nombre es Alejandro, mi edad es de 25 anios,tengo una altura de 1.68 mi estado de casado es: False Mi nombre es Alejandro, mi edad es de 25 anios,tengo una altura de 1.68 mi estado de casado es: False","title":"Concatenando otros tipos de datos."},{"location":"capitulo_1/03_Concatenacion_de_Strings/#secuencias-de-espace","text":"Las secuencias de espace son caracteres especiales para darle formato a las cadenas de texto (Strings). Nombre Simbolo Secuencia de escape Backslash \\ \\\\ Comilla simple \\' \\' Comilla doble \\\" \\\" Bell (sonido) \\a Retroceso \\b Nueva l\u00ednea (enter) \\n Carriage return \\r \\r Tab horizontal tab \\t Tab vertical tab vertical \\v","title":"Secuencias de espace"},{"location":"capitulo_1/03_Concatenacion_de_Strings/#salto-de-linea-n","text":"Cuando queremos que el texto tenga un salto de l\u00ednea (enter), tenemos la secuencia \\n . mensaje = \"Hola \\n Texto en siguiente linea \\n la siguiente linea\" print ( \" \\n \" + mensaje + \" \\n \" ) Hola Texto en siguiente linea la siguiente linea","title":"Salto de l\u00ednea \\n"},{"location":"capitulo_1/03_Concatenacion_de_Strings/#tabulacion","text":"En ocasiones queremos tabular (sangr\u00eda) nuestro texto para darle un acomodo se aplica \\t mensaje = \"Columa 1 \\t Columna2 \\t Columna 3 \\n Columa 1 \\t Columna2 \\t Columna 3\" print ( mensaje ) Columa 1 Columna2 Columna 3 Columa 1 Columna2 Columna 3","title":"Tabulaci\u00f3n"},{"location":"capitulo_1/03_Concatenacion_de_Strings/#comillas","text":"En python nos da una ventaja con respecto al uso de comillas simples y dobles por default. Recordando que se pueden escribir Strings str con \" y ' . Pero vamos a ver la diferencia si queremos utilizar las comillas ya sean simple o doble dentro del mensaje que queremos transmitir; al igual la equivalencia de las secuencias de escape \\' y \\\" . # Si que queremos usar las comillas simples en un string sin utilizar la secuencia de escape, debemos usar # la comilla doble para generar dicho string mensajeDobleComilla = \"hola 'este texto esta en comilla simple' , texto fuera de la comilla\" mensajeComillaSimple = 'hola \\' este texto esta en comilla simple \\' , texto fuera de la comilla ' print ( mensajeDobleComilla ) print ( mensajeComillaSimple ) hola 'este texto esta en comilla simple' , texto fuera de la comilla hola 'este texto esta en comilla simple' , texto fuera de la comilla # Si que queremos usar doble comilla en un string sin utilizar la secuencia de escape, debemos usar # la comilla simple para generar dicho string mensajeComillaSimple = 'hola \"este texto esta en doble comilla\" texto fuera de la comilla ' mensajeDobleComilla = \"hola \\\" este texto esta en comilla simple \\\" , texto fuera de la comilla\" print ( mensajeDobleComilla ) print ( mensajeComillaSimple ) hola \"este texto esta en comilla simple\" , texto fuera de la comilla hola \"este texto esta en doble comilla\" texto fuera de la comilla","title":"Comillas"},{"location":"capitulo_1/03_Concatenacion_de_Strings/#back-slash","text":"En ocasiones necesitamos utilizar la diagonal (slash) en un texto, para esto existe la secuencia de escape slasj doble \\\\ . # Utilizando slash en un texto, por ejemplo para rutas dentro de un string mensaje = 'ruta \\\\ carperta1 \\\\ carperta2 \\\\ archivo' print ( mensaje ) ruta\\carperta1\\carperta2\\archivo","title":"Back Slash"},{"location":"capitulo_1/03_Concatenacion_de_Strings/#formateo-de-strings-funcion-format","text":"Los str tienen una propiedad llamada format() con la cual podemos concatenar variables, se tienen en varias formas para realizar la concatenacion con este m\u00e9todo. Retorna el str con el formato indicado. Las variables se colocaran automaticamente en la llaves. Sintaxis: 'string {} ... {} ... ' . format ( variable1 , variable2 , ... ) 'string {0} ... {1} ... ' . format ( variable1 , variable2 , ... ) 'string {variable1} ... {variable2} ... ' . format ( variable1 = \"hola\" , variable2 = 5 , ... ) # La forma que es por default sin indicar nada, en el orden que los pasamos, seran asignados nombre = \"Alejandro\" edad = 30 texto_default = \"Mi nombre es {} y tengo {} anios de edad\" . format ( nombre , edad ) print ( texto_default ) Mi nombre es Alejandro y tengo 30 anios de edad # Formato indicando la varible en las llaves, esto sirve para cambiar el orden color = \"Rojo\" numero = 3 texto = \"El numero ' {1} ' corresponde al color ' {0} '\" . format ( color , numero ) print ( texto ) El numero '3' corresponde al color 'Rojo', con el numero 3 # Indicando el nombre de la variable texto_variables = \"Mi nombre es {nombre} tengo {edad} anios\" . format ( nombre = \"Alejandro\" , edad = 25 ) print ( texto_variables ) Mi nombre es Alejandro tengo 25 anios","title":"Formateo de Strings - funci\u00f3n format()"},{"location":"capitulo_1/03_Concatenacion_de_Strings/#formato-para-numeros-y-la-precision","text":"En muchas ocasiones queremos imprimir un valor numerico pero con cierta cantidad decimales, con la funci\u00f3n format() nos da un formato para especificar como queremos la salida. Debemos marcar una sintaxis especial que sigue el siguiente formato, principalmente es para valores flotantes: Sintaxis: [index]:[width][.precision][type] Tipos: d para enteros f para flotantes b para n\u00fameros binarios o para n\u00fameros octal x para n\u00fameros hexadecimal s para strings e para flotante en formato exponente Aplicado: \"El precio es {0:1.2f} \" . format ( 25.365894 ) #es la primera posici\u00f3n [0] #es la primera posici\u00f3n [0], parte entera como minimo un valor, con 2 decimales y tomarlo como tipo flotante numero = 561.265264161 valor1 = \"El precio es {0:1.2f} \" . format ( numero ) # los valores enteros no es necesario indicar la parte decimal, solo se indica la posici\u00f3n valor2 = \"La calificacion final es {0:1.2f} de {1:1.1f} parciales\" . format ( 8.369 , 3 ) print ( valor1 ) print ( valor2 ) El precio es 561.27 La calificacion final es 8.37 de 3.0 parciales valor1 = float ( input ( 'Dar valor 1: ' )) valor2 = float ( input ( 'Dar valor 2: ' )) suma = valor1 + valor2 print ( 'El resultado es {0:1.3f} ' . format ( suma )) Dar valor 1: 2.56256 Dar valor 2: 2.6839 El resultado es 5.246 # Dar formato con decimales de forma din\u00e1mica valor = float ( input ( 'Dar un valor para redondear: ' )) redondeo = int ( input ( 'A cuantos decimales?: ' )) r = '0:1. {} f' . format ( redondeo ) msg = 'El valor redondeado a {1} decimales es: {' + r + '}' print ( msg ) print ( msg . format ( valor , redondeo )) Dar un valor para redondear: 25.0 A cuantos decimales?: 20 El valor redondeado a {1} decimales es: {0:1.20f} El valor redondeado a 20 decimales es: 25.00000000000000000000 nombre = \"Alejandro\" print ( \"Mi nombre es {0:s} \" . format ( nombre )) Mi nombre es Alejandro","title":"Formato para n\u00fameros y la precision"},{"location":"capitulo_1/03_Concatenacion_de_Strings/#fstring","text":"Actualmente se tiene una nueva forma para crear strings de forma mas sencilla y dar formato. Esta es la forma mas actual que se usa. Sintaxis: cantidad = 5 color = \"verde\" f 'El numero de autos es { cantidad } y todos son color { color } ' f \"El numero de autos es { cantidad } y todos son color { color } \" cantidad = 5 color = \"tutifruti\" mensaje1 = f 'El numero de autos es { cantidad } y todos son color { color } ' mensaje2 = f \"El numero de autos es \\\" { cantidad } \\\" y todos son color \\\" { color } \\\" \" print ( mensaje1 ) print ( mensaje2 ) El numero de autos es 5 y todos son color tutifruti El numero de autos es \"5\" y todos son color \"tutifruti\"","title":"f'String'"},{"location":"capitulo_1/03_Concatenacion_de_Strings/#formato-a-numeros-con-fstring","text":"Sintaxis: {variable:{width}.{decimal-1}} Aplicacion: num = 3.141592 print ( f \"El valor de pi es: { num :{ 1 } . { 3 }} \" ) # Es similar a la funci\u00f3n format(), con respecto a la sintaxis, no es necesario indicar la posici\u00f3n de la variable # los decimales es el valor menos 1 num = 3.14159 texto_formateado = f \"El valor de pi es: { num :{ 1 } . { 3 }} \" # queremos 2 decimales print ( texto_formateado ) El valor de pi es: 3.14 Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Formato a n\u00fameros con f'string'"},{"location":"capitulo_1/04_Operadores_aritm%C3%A9ticos/","text":"Operadores aritm\u00e9ticos En Python contamos con varios operadores aritm\u00e9ticos. Nombre S\u00edmbolo Ejemplo Suma + 4 + 2 Resta - 4 - 5 Negaci\u00f3n - -2 Multiplicaci\u00f3n * 6 * 8 Divisi\u00f3n / 1 / 2 Divisi\u00f3n entera // 5 // 3 Exponente ** 4**2 M\u00f3dulo % 5 % 2 print ( \"Suma\" ) print ( 4 + 2 ) print ( \"-------\" ) print ( \"Resta\" ) print ( 4 - 2 ) print ( \"-------\" ) print ( \"Negaci\u00f3n\" ) a = 2 print ( - a ) # -1 * a print ( \"-------\" ) print ( \"Multiplicaci\u00f3n\" ) print ( 4 * 2 ) print ( \"-------\" ) print ( \"Divisi\u00f3n\" ) print ( 1 / 2 ) print ( \"-------\" ) print ( \"Divisi\u00f3n entera\" ) print ( 10 // 3 ) print ( \"-------\" ) print ( \"Exponente\" ) print ( 3 ** 2 ) # 3^2 print ( \"-------\" ) print ( \"M\u00f3dulo o Residuo\" ) print ( 10 % 3 ) # 10%3 = 1 Precedencia de operadores El orden de precedencia de ejecuci\u00f3n de los operadores aritm\u00e9ticos es: Orden Operador 0. Agrupaci\u00f3n ( ) 1. Exponente ** 2. Negaci\u00f3n - 3. Multiplicaci\u00f3n , Divisi\u00f3n, Divisi\u00f3n entera, M\u00f3dulo *, /, //, % 4. Suma , Resta +, - Ejemplos: Convertir la expresi\u00f3n algebraica, a una expresi\u00f3n computable \\(\\frac{2-3}{20}\\) \\(3 \\times \\frac{1}{2} + 8\\) \\(3^2 + 6^3 - \\frac{5}{10}\\) \\(\\frac{5 + 6 \\times 9}{6 \\times 1} + 3 - \\frac{8}{2}\\) \\(\\frac{6+8}{2*3-5}\\) caso_1 = ( 2 - 3 ) / 20 caso_2 = 3 * ( 1 / 2 ) + 8 caso_3 = ( 3 ** 2 ) + ( 6 ** 3 ) - ( 5 / 10 ) caso_4 = (( 5 + ( 6 * 9 )) / ( 6 * 1 )) + 3 - ( 8 / 2 ) caso_5 = ( 6 + 8 ) / (( 2 * 3 ) - 5 ) print ( \"Resultado caso 1: \" + str ( caso_1 ) ) print ( \"Resultado caso 2: \" + str ( caso_2 ) ) print ( \"Resultado caso 3: \" + str ( caso_3 ) ) print ( \"Resultado caso 4: \" + str ( caso_4 ) ) print ( \"Resultado caso 5: \" + str ( caso_5 ) ) Ejercicios Guardar en una variable el resultado de la operaci\u00f3n e imprimir por consola el resultado de las siguientes operaciones: \\(\\frac{5 + 8}{2}\\) \\(\\frac{5 }{2} + 3\\) \\(5 + \\frac{1}{2} \\times 6\\) \\(5^2\\) \\(3 + \\frac{1}{2} \\times \\frac{5}{-2}\\) Aplicaciones Vamos resolver unos problemas basicos Realizar una calculadora que sume 2 n\u00fameros, los valores est\u00e1n en el programa Realizar una calculadora que haga la divisi\u00f3n de 2 n\u00fameros, los valores est\u00e1n en el programa Realizar el c\u00e1lculo de voltaje, los valores est\u00e1n en el programa # 1. Realizar una calculadora que sume 2 n\u00fameros que esten en el programa valor_1 = 15 valor_2 = 269 suma = valor_1 + valor_2 print ( \"La suma de \" + str ( valor_1 ) + \" con \" + str ( valor_2 ) + \" es: \" + str ( suma )) La suma de 15 con 269 es: 284 # 2. Realizar una calculadora que haga la divisi\u00f3n de 2 n\u00fameros, los valores est\u00e1n en el programa valor_1 = 5 valor_2 = 20 division = valor_1 / valor_2 print ( \"La division de \" + str ( valor_1 ) + \" entre \" + str ( valor_2 ) + \" es: \" + str ( division )) La division de 5 entre 20 es: 0.25 # 3. Realizar el c\u00e1lculo de voltaje, los valores estan en el programa corriente = 0.01 # 10mA resistencia = 1000 #1k voltaje = corriente * resistencia print ( \"La corriente es \" + str ( corriente ) + \"A, la resistencia es: \" + str ( resistencia ) + \" Ohms, el voltaje es: \" + str ( voltaje ) + \"V\" ) La corriente es 0.01A, la resistencia es: 1000 Ohms, el voltaje es: 10.0V Ejercicios Segunda Ley, calcular fuerza con datos guardados. Formula \\(F = m * a\\) Hacer la operaci\u00f3n de 5 resistencias en serie, dar resistencia total Hacer el calculo de 5 resistencias en paralelo, dar resistencia total Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Operadores aritm\u00e9ticos"},{"location":"capitulo_1/04_Operadores_aritm%C3%A9ticos/#operadores-aritmeticos","text":"En Python contamos con varios operadores aritm\u00e9ticos. Nombre S\u00edmbolo Ejemplo Suma + 4 + 2 Resta - 4 - 5 Negaci\u00f3n - -2 Multiplicaci\u00f3n * 6 * 8 Divisi\u00f3n / 1 / 2 Divisi\u00f3n entera // 5 // 3 Exponente ** 4**2 M\u00f3dulo % 5 % 2 print ( \"Suma\" ) print ( 4 + 2 ) print ( \"-------\" ) print ( \"Resta\" ) print ( 4 - 2 ) print ( \"-------\" ) print ( \"Negaci\u00f3n\" ) a = 2 print ( - a ) # -1 * a print ( \"-------\" ) print ( \"Multiplicaci\u00f3n\" ) print ( 4 * 2 ) print ( \"-------\" ) print ( \"Divisi\u00f3n\" ) print ( 1 / 2 ) print ( \"-------\" ) print ( \"Divisi\u00f3n entera\" ) print ( 10 // 3 ) print ( \"-------\" ) print ( \"Exponente\" ) print ( 3 ** 2 ) # 3^2 print ( \"-------\" ) print ( \"M\u00f3dulo o Residuo\" ) print ( 10 % 3 ) # 10%3 = 1","title":"Operadores aritm\u00e9ticos"},{"location":"capitulo_1/04_Operadores_aritm%C3%A9ticos/#precedencia-de-operadores","text":"El orden de precedencia de ejecuci\u00f3n de los operadores aritm\u00e9ticos es: Orden Operador 0. Agrupaci\u00f3n ( ) 1. Exponente ** 2. Negaci\u00f3n - 3. Multiplicaci\u00f3n , Divisi\u00f3n, Divisi\u00f3n entera, M\u00f3dulo *, /, //, % 4. Suma , Resta +, -","title":"Precedencia de operadores"},{"location":"capitulo_1/04_Operadores_aritm%C3%A9ticos/#ejemplos","text":"Convertir la expresi\u00f3n algebraica, a una expresi\u00f3n computable \\(\\frac{2-3}{20}\\) \\(3 \\times \\frac{1}{2} + 8\\) \\(3^2 + 6^3 - \\frac{5}{10}\\) \\(\\frac{5 + 6 \\times 9}{6 \\times 1} + 3 - \\frac{8}{2}\\) \\(\\frac{6+8}{2*3-5}\\) caso_1 = ( 2 - 3 ) / 20 caso_2 = 3 * ( 1 / 2 ) + 8 caso_3 = ( 3 ** 2 ) + ( 6 ** 3 ) - ( 5 / 10 ) caso_4 = (( 5 + ( 6 * 9 )) / ( 6 * 1 )) + 3 - ( 8 / 2 ) caso_5 = ( 6 + 8 ) / (( 2 * 3 ) - 5 ) print ( \"Resultado caso 1: \" + str ( caso_1 ) ) print ( \"Resultado caso 2: \" + str ( caso_2 ) ) print ( \"Resultado caso 3: \" + str ( caso_3 ) ) print ( \"Resultado caso 4: \" + str ( caso_4 ) ) print ( \"Resultado caso 5: \" + str ( caso_5 ) )","title":"Ejemplos:"},{"location":"capitulo_1/04_Operadores_aritm%C3%A9ticos/#ejercicios","text":"Guardar en una variable el resultado de la operaci\u00f3n e imprimir por consola el resultado de las siguientes operaciones: \\(\\frac{5 + 8}{2}\\) \\(\\frac{5 }{2} + 3\\) \\(5 + \\frac{1}{2} \\times 6\\) \\(5^2\\) \\(3 + \\frac{1}{2} \\times \\frac{5}{-2}\\)","title":"Ejercicios"},{"location":"capitulo_1/04_Operadores_aritm%C3%A9ticos/#aplicaciones","text":"Vamos resolver unos problemas basicos Realizar una calculadora que sume 2 n\u00fameros, los valores est\u00e1n en el programa Realizar una calculadora que haga la divisi\u00f3n de 2 n\u00fameros, los valores est\u00e1n en el programa Realizar el c\u00e1lculo de voltaje, los valores est\u00e1n en el programa # 1. Realizar una calculadora que sume 2 n\u00fameros que esten en el programa valor_1 = 15 valor_2 = 269 suma = valor_1 + valor_2 print ( \"La suma de \" + str ( valor_1 ) + \" con \" + str ( valor_2 ) + \" es: \" + str ( suma )) La suma de 15 con 269 es: 284 # 2. Realizar una calculadora que haga la divisi\u00f3n de 2 n\u00fameros, los valores est\u00e1n en el programa valor_1 = 5 valor_2 = 20 division = valor_1 / valor_2 print ( \"La division de \" + str ( valor_1 ) + \" entre \" + str ( valor_2 ) + \" es: \" + str ( division )) La division de 5 entre 20 es: 0.25 # 3. Realizar el c\u00e1lculo de voltaje, los valores estan en el programa corriente = 0.01 # 10mA resistencia = 1000 #1k voltaje = corriente * resistencia print ( \"La corriente es \" + str ( corriente ) + \"A, la resistencia es: \" + str ( resistencia ) + \" Ohms, el voltaje es: \" + str ( voltaje ) + \"V\" ) La corriente es 0.01A, la resistencia es: 1000 Ohms, el voltaje es: 10.0V","title":"Aplicaciones"},{"location":"capitulo_1/04_Operadores_aritm%C3%A9ticos/#ejercicios_1","text":"Segunda Ley, calcular fuerza con datos guardados. Formula \\(F = m * a\\) Hacer la operaci\u00f3n de 5 resistencias en serie, dar resistencia total Hacer el calculo de 5 resistencias en paralelo, dar resistencia total Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Ejercicios"},{"location":"capitulo_1/05_ingresando_dato_y_como_convertirlos/","text":"Ingresando dato y c\u00f3mo convertirlos Funci\u00f3n input() La funci\u00f3n input sirve para leer datos desde teclado en la terminal. Sintaxis: input ( prompt ) Par\u00e1metros: prompt (opcional): Es un string que se puede colocar para que aparezca antes del ingreso de datos return: Regresa el texto que ingresen desde terminal : (str) Ejemplo: Cuando queremos recibir datos del usuario debemos guardarla en una variable para posteriormente utilizarla. Recordemos que nos regresara esa informaci\u00f3n en tipo str . datos = input () print ( 'Ingreso de datos' ) datos = input () print ( 'impresion de datos' ) print ( datos ) Ingreso de datos 25 impresion de datos 25 Ahora si queremos que el usuario vea un mensaje y a continuaci\u00f3n coloque los datos, debemos pasarle el valor para el argumento prompt entre los par\u00e9ntesis. edad = input ( \"Dar la edad\" ) edad = input ( \"Dar edad: \" ) # devuelve un str print ( \"Tu edad es: \" + edad ) Dar edad: 25 Tu edad es: 25 Funci\u00f3n int() En muchas ocasiones puedes tener un n\u00famero entero almacenado en una variable pero no exactamente es tipo n\u00famero . Entonces, en ese caso necesitamos que sea de tipo int para poder realizar operaciones con \u00e9l. Para esos casos contamos con la funci\u00f3n int() Sintaxis: int ( value , base ) Par\u00e1metros: value: Un n\u00famero o un string que puede ser convertido a n\u00famero entero base (opcional) : El formato con el que representa el n\u00famero. Default value: 10 base: 10 -> decimal (Valor por default) base: 2 -> binario base: 16 -> hexadecimal return: el valor en tipo int (decimal por default) decimal = int ( \"100\" ) # el valor es decimal, por default lo toma as\u00ed binario = int ( \"1010\" , 2 ) # el valor que pasamos esta en binario hexadecimal = int ( \"FF\" , 16 ) #el valor que pasamos esta en hexadecimal print ( decimal ) print ( binario ) print ( hexadecimal ) 100 10 255 Funci\u00f3n float() En muchas ocasiones puedes tener un n\u00famero de punto flotante almacenado en una variable pero no exactamente es tipo n\u00famero . Entonces, en ese caso necesitamos que sea de tipo float para poder realizar operaciones con \u00e9l. Para esos casos contamos con la funci\u00f3n float() Sintaxis: float ( value ) Par\u00e1metros: value: Un n\u00famero o string que puede ser convertido en tipo n\u00famero float return: Regresa un tipo float altura = float ( \"1.680000\" ) valor = float ( \"4.30000\" ) un_medio = float ( \".5\" ) print ( altura ) print ( valor ) print ( un_medio ) 1.68 4.3 0.5 Funci\u00f3n bool() En muchas ocasiones puedes tener una expresi\u00f3n booleana almacenado en una variable pero no exactamnete es tipo booleano . Entonces, en ese caso necesitamos que sea de tipo boolean para poder realizar operaciones con \u00e9l. Para esos casos contamos con la funci\u00f3n bool() Sintaxis: bool ( object ) Par\u00e1metros: object: Cualquier objet, string, lista, numero, etc. return: Regresa un tipo boolean La funci\u00f3n siempre regresa True , a menos que: El objetos est\u00e9 vac\u00edo, como [] , () , {} El objeto es False El objeto es 0 El objeto es None Cadena vac\u00eda \"\" En todos estos casos, retorna False uno = bool ( 1 ) cero = bool ( 0 ) falso = bool ( False ) verdadero = bool ( True ) texto = bool ( \"hola\" ) texto_vacio = bool ( \"\" ) print ( uno ) print ( cero ) print ( falso ) print ( verdadero ) print ( texto ) print ( texto_vacio ) True False False True True False Aplicaciones 1. Pedir dos n\u00fameros e imprimir el resultado print ( \"Mi super calculador de 2 numeros\" ) valor1 = int ( input ( \"Dar el valor 1: \" )) valor2 = int ( input ( \"Dar el valor 2: \" )) suma = valor1 + valor2 print ( \"El resultado es: \" + str ( suma )) Mi super calculador de 2 numeros Dar el valor 1: 50 Dar el valor 2: 265 El resultado es: 315 2. Calculadora de Segunda Ley # F = m * a print ( \"Calculadora de Segunda Ley - Fuerza\" ) masa = float ( input ( \"Dar el valor de la masa (kg):\" ) ) aceleracion = float ( input ( \"Dar el valor de la aceleracion (m/s^2):\" ) ) fuerza = masa * aceleracion print ( \"la fuerza es: \" + str ( fuerza ) + \"N\" ) Calculadora de Segunda Ley - Fuerza Dar el valor de la masa (kg):10 Dar el valor de la aceleracion (m/s^2):25 la fuerza es: 250.0N 3. Programa que calcule las resistencias en serie, el usuario debe ingresar 3 resistencias print ( \"Dar tres resistencias para obtener su valor en serie\" ) print ( \"Dar valores en ohms\" ) resistencia1 = float ( input ( \"Valor de resistencia 1: \" ) ) resistencia2 = float ( input ( \"Valor de resistencia 2: \" ) ) resistencia3 = float ( input ( \"Valor de resistencia 3: \" ) ) resitencia_total = resistencia1 + resistencia2 + resistencia print ( \"El valor total en serie es \" + str ( resitencia_total ) + \" ohms\" ) Dar tres resistencias para obtener su valor en serie Dar valores en ohms Valor de resistencia 1: 26 Valor de resistencia 2: 58 Valor de resistencia 3: 62 El valor total en serie es 146.0 ohms Ejercicios Hacer un programa que calcule el area y el per\u00edmetro del circulo, pidiendo los datos al usuario Hacer un programa que calcule 3 resistencias en paralelo, solicitando la informaci\u00f3n al usuario Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Ingresando dato y c\u00f3mo convertirlos"},{"location":"capitulo_1/05_ingresando_dato_y_como_convertirlos/#ingresando-dato-y-como-convertirlos","text":"","title":"Ingresando dato y c\u00f3mo convertirlos"},{"location":"capitulo_1/05_ingresando_dato_y_como_convertirlos/#funcion-input","text":"La funci\u00f3n input sirve para leer datos desde teclado en la terminal. Sintaxis: input ( prompt ) Par\u00e1metros: prompt (opcional): Es un string que se puede colocar para que aparezca antes del ingreso de datos return: Regresa el texto que ingresen desde terminal : (str) Ejemplo: Cuando queremos recibir datos del usuario debemos guardarla en una variable para posteriormente utilizarla. Recordemos que nos regresara esa informaci\u00f3n en tipo str . datos = input () print ( 'Ingreso de datos' ) datos = input () print ( 'impresion de datos' ) print ( datos ) Ingreso de datos 25 impresion de datos 25 Ahora si queremos que el usuario vea un mensaje y a continuaci\u00f3n coloque los datos, debemos pasarle el valor para el argumento prompt entre los par\u00e9ntesis. edad = input ( \"Dar la edad\" ) edad = input ( \"Dar edad: \" ) # devuelve un str print ( \"Tu edad es: \" + edad ) Dar edad: 25 Tu edad es: 25","title":"Funci\u00f3n input()"},{"location":"capitulo_1/05_ingresando_dato_y_como_convertirlos/#funcion-int","text":"En muchas ocasiones puedes tener un n\u00famero entero almacenado en una variable pero no exactamente es tipo n\u00famero . Entonces, en ese caso necesitamos que sea de tipo int para poder realizar operaciones con \u00e9l. Para esos casos contamos con la funci\u00f3n int() Sintaxis: int ( value , base ) Par\u00e1metros: value: Un n\u00famero o un string que puede ser convertido a n\u00famero entero base (opcional) : El formato con el que representa el n\u00famero. Default value: 10 base: 10 -> decimal (Valor por default) base: 2 -> binario base: 16 -> hexadecimal return: el valor en tipo int (decimal por default) decimal = int ( \"100\" ) # el valor es decimal, por default lo toma as\u00ed binario = int ( \"1010\" , 2 ) # el valor que pasamos esta en binario hexadecimal = int ( \"FF\" , 16 ) #el valor que pasamos esta en hexadecimal print ( decimal ) print ( binario ) print ( hexadecimal ) 100 10 255","title":"Funci\u00f3n int()"},{"location":"capitulo_1/05_ingresando_dato_y_como_convertirlos/#funcion-float","text":"En muchas ocasiones puedes tener un n\u00famero de punto flotante almacenado en una variable pero no exactamente es tipo n\u00famero . Entonces, en ese caso necesitamos que sea de tipo float para poder realizar operaciones con \u00e9l. Para esos casos contamos con la funci\u00f3n float() Sintaxis: float ( value ) Par\u00e1metros: value: Un n\u00famero o string que puede ser convertido en tipo n\u00famero float return: Regresa un tipo float altura = float ( \"1.680000\" ) valor = float ( \"4.30000\" ) un_medio = float ( \".5\" ) print ( altura ) print ( valor ) print ( un_medio ) 1.68 4.3 0.5","title":"Funci\u00f3n float()"},{"location":"capitulo_1/05_ingresando_dato_y_como_convertirlos/#funcion-bool","text":"En muchas ocasiones puedes tener una expresi\u00f3n booleana almacenado en una variable pero no exactamnete es tipo booleano . Entonces, en ese caso necesitamos que sea de tipo boolean para poder realizar operaciones con \u00e9l. Para esos casos contamos con la funci\u00f3n bool() Sintaxis: bool ( object ) Par\u00e1metros: object: Cualquier objet, string, lista, numero, etc. return: Regresa un tipo boolean La funci\u00f3n siempre regresa True , a menos que: El objetos est\u00e9 vac\u00edo, como [] , () , {} El objeto es False El objeto es 0 El objeto es None Cadena vac\u00eda \"\" En todos estos casos, retorna False uno = bool ( 1 ) cero = bool ( 0 ) falso = bool ( False ) verdadero = bool ( True ) texto = bool ( \"hola\" ) texto_vacio = bool ( \"\" ) print ( uno ) print ( cero ) print ( falso ) print ( verdadero ) print ( texto ) print ( texto_vacio ) True False False True True False","title":"Funci\u00f3n bool()"},{"location":"capitulo_1/05_ingresando_dato_y_como_convertirlos/#aplicaciones","text":"1. Pedir dos n\u00fameros e imprimir el resultado print ( \"Mi super calculador de 2 numeros\" ) valor1 = int ( input ( \"Dar el valor 1: \" )) valor2 = int ( input ( \"Dar el valor 2: \" )) suma = valor1 + valor2 print ( \"El resultado es: \" + str ( suma )) Mi super calculador de 2 numeros Dar el valor 1: 50 Dar el valor 2: 265 El resultado es: 315 2. Calculadora de Segunda Ley # F = m * a print ( \"Calculadora de Segunda Ley - Fuerza\" ) masa = float ( input ( \"Dar el valor de la masa (kg):\" ) ) aceleracion = float ( input ( \"Dar el valor de la aceleracion (m/s^2):\" ) ) fuerza = masa * aceleracion print ( \"la fuerza es: \" + str ( fuerza ) + \"N\" ) Calculadora de Segunda Ley - Fuerza Dar el valor de la masa (kg):10 Dar el valor de la aceleracion (m/s^2):25 la fuerza es: 250.0N 3. Programa que calcule las resistencias en serie, el usuario debe ingresar 3 resistencias print ( \"Dar tres resistencias para obtener su valor en serie\" ) print ( \"Dar valores en ohms\" ) resistencia1 = float ( input ( \"Valor de resistencia 1: \" ) ) resistencia2 = float ( input ( \"Valor de resistencia 2: \" ) ) resistencia3 = float ( input ( \"Valor de resistencia 3: \" ) ) resitencia_total = resistencia1 + resistencia2 + resistencia print ( \"El valor total en serie es \" + str ( resitencia_total ) + \" ohms\" ) Dar tres resistencias para obtener su valor en serie Dar valores en ohms Valor de resistencia 1: 26 Valor de resistencia 2: 58 Valor de resistencia 3: 62 El valor total en serie es 146.0 ohms","title":"Aplicaciones"},{"location":"capitulo_1/05_ingresando_dato_y_como_convertirlos/#ejercicios","text":"Hacer un programa que calcule el area y el per\u00edmetro del circulo, pidiendo los datos al usuario Hacer un programa que calcule 3 resistencias en paralelo, solicitando la informaci\u00f3n al usuario Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Ejercicios"},{"location":"capitulo_1/06_Decision_if/","text":"Decisiones if if-else elif \u00bfQu\u00e9 es una estructura de decisi\u00f3n? Dentro de la programaci\u00f3n tenemos una estructura que nos ayuda a poder tomar decisiones con base a una comparaci\u00f3n y de esta manera poder tomar un camino o tomar otro. Es una sentencias IF s la cual no ayuda a tomar la ruta que necesitemos Estructura if Python la \u00fanica referencia que ocupa es la identaci\u00f3n , sean espacios o tabs y dos puntos : para indicar que comienza un bloque nuevo, en este caso una sentencia if . if comparacion_verdadera : c\u00f3digo que ejecuta si es verdadero m\u00e1s c\u00f3digo ... Operadores de comparaci\u00f3n Nombre S\u00edmbolo Ejemplo Mayor que > 7 > 5 -> True Mayor o igual que >= 8 >= 6 -> False Menor que < 9 < 10 -> Falso Menor o igual que <= 5 <= 5 -> True Igual que == 4 == 2 -> False Diferente de != 9 != 9 -> False Nota: No puede existir espacio en el s\u00edmbolo Aplicando la estructura if Vamos a realizar el primer ejemplo: 1. Realizar un programa que nos diga si la edad de la persona es mayor de edad o menor de edad Debemos comparar la edad para saber si es mayor o no, primero verificamos si es mayor de edad, en caso de que no sea as\u00ed, el programa sigue y pregunta si es menor de edad, en caso de que sea verdadero, entra y da el mensaje correspondiente. edad = 19 #Declaramos una variable donde guardaremos la edad y asignamos el valor de 18 if edad >= 18 : # recordemos que se hace una comparacion y despu\u00e9s los dos puntos (:) print ( \"Es mayor de edad\" ) #Recordemos que se debe aplicar una identaci\u00f3n if edad < 18 : # recordemos que se hace una comparacion y despu\u00e9s los dos puntos (:) print ( \"Es menor de edad\" ) #Recordemos que se debe aplicar una identaci\u00f3n print ( \"fin del programa\" ) Es mayor de edad fin del programa 2. Realizar un programa que nos diga si la edad de la persona es mayor de edad o menor de edad, la edad debe ser ingreasada desde terminal Debemos primero perdir la edad, una vez guardada debemos comparar la edad para saber si es mayor o no, primero verificamos si es mayor de edad, en caso de que no sea as\u00ed, el programa sigue y pregunta si es menor de edad, en caso de que sea verdadero, entra y da el mensaje correspondiente. edad = input ( \"Dar edad: \" ) #Pedimos el dato al usuario, este dato es tipo str edad_int = int ( edad ) #la edad esta en tipo str, lo convertimos a int para poder realizar la comparaci\u00f3n if edad_int >= 18 : # recordemos que se hace una comparacion y despu\u00e9s los dos puntos (:) print ( \"Eres mayor de edad\" ) #Recordemos que se debe aplicar una identaci\u00f3n if edad_int < 18 : # recordemos que se hace una comparacion y despu\u00e9s los dos puntos (:) print ( \"Eres menor de edad\" ) #Recordemos que se debe aplicar una identaci\u00f3n Dar edad: 20 Eres mayor de edad Estructura if-else En ocasiones necesitamos que nuestro programa tome una de las 2 rutas posibles, pero aqu\u00ed en caso que no se cumpla la comparaci\u00f3n entra al otro bloque si o si. Esta estructura es un if-else , si se cumple la condici\u00f3n, realizo la acci\u00f3n, de lo contrario hago otra if comparacion_verdadera : c\u00f3digo que ejecuta si es verdadero m\u00e1s c\u00f3digo ... else : de lo contrario se ejecuto este c\u00f3digo m\u00e1s c\u00f3digo ... Vamos a realizar el primer ejemplo: 3. Realizar un programa que nos diga si la edad de la persona es mayor de edad o menor de edad Volveremos a realizar el mismo ejemplo, pero si nos damos cuenta en este ejercicio, si no es el primer caso debe ser el segundo, no tenemos otro ruta o alguna otra decisi\u00f3n. edad = int ( input ( \"Dar la edad: \" )) # Tomamos el dato y directamente la conversion de str a int if edad >= 18 : # recordemos que se hace una comparacion y despu\u00e9s los dos puntos (:) print ( \"Es mayor de edad\" ) #Recordemos que se debe aplicar una identaci\u00f3n else : #aplicamos la palabra reservada else y sus dos puntos, esta secci\u00f3n siempre se ejecutar\u00e1 siempre que no se cumpla la condici\u00f3n inicial print ( \"Es menor de edad\" ) #Recordemos que se debe aplicar una identaci\u00f3n Dar la edad: 22 Es mayor de edad 4. Realizar una calculadora que pueda solo sumar y restar, dando estas opciones al usuario y realizando la opci\u00f3n elegida # Damos el menu y guardamos la opcion del usuario print ( \"Calculadora de Suma y Resta\" ) print ( \"1) Suma\" ) print ( \"2) Resta\" ) opcion = int ( input ()) if opcion == 1 : print ( \"====== SUMA =======\" ) valor_1 = int ( input ( \"Dar valor 1: \" )) valor_2 = int ( input ( \"Dar valor 2: \" )) suma = valor_1 + valor_2 print ( \"La suma es: \" + str ( suma )) else : print ( \"====== RESTA =======\" ) valor_1 = int ( input ( \"Dar valor 1: \" )) valor_2 = int ( input ( \"Dar valor 2: \" )) resta = valor_1 - valor_2 print ( \"La resta es: \" + str ( resta )) Calculadora de Suma y Resta 1) Suma 2) Resta 1 ====== SUMA ======= Dar valor 1: 10 Dar valor 2: 36 La suma es: 46 Estructura elif En ocasiones necesitamos verificar varias opciones y en alguna tiene que encajar o por ultimas terminar en una opci\u00f3n. Para esto tenemos que combinar muchos if con su else , para ello tenemos el siguiente operador, el cual nos ayuda a hacerlo de manera corta y f\u00e1cil de leer. Para esto siempre debemos realizar una comparaci\u00f3n si entra en ese bloque o va al siguiente, y por ultimo si no coincide con alguna, termina en un bloque por default . if comparacion_verdadera : c\u00f3digo que ejecuta si es verdadero m\u00e1s c\u00f3digo ... elif comparacion_verdadera : c\u00f3digo que ejecuta si es verdadero m\u00e1s c\u00f3digo ... elif comparacion_verdadera : c\u00f3digo que ejecuta si es verdadero m\u00e1s c\u00f3digo ... else : #en este caso es opcional de lo contrario se ejecuto este c\u00f3digo m\u00e1s c\u00f3digo ... 4. Realizar una calculadora que pueda solo sumar y restar, dando estas opciones al usuario y realizando la opci\u00f3n elegida, si da un opcion que no existe, simplemente termina el programa En esta ocasi\u00f3n si el usuario no da una opci\u00f3n que no existe, terminamos el programa sin indicar nada # Damos el menu y guardamos la opcion del usuario print ( \"Calculadora de Suma y Resta\" ) print ( \"1) Suma\" ) print ( \"2) Resta\" ) opcion = int ( input ()) if opcion == 1 : print ( \"====== SUMA =======\" ) valor_1 = int ( input ( \"Dar valor 1: \" )) valor_2 = int ( input ( \"Dar valor 2: \" )) suma = valor_1 + valor_2 print ( \"La suma es: \" + str ( suma )) elif opcion == 2 : print ( \"====== RESTA =======\" ) valor_1 = int ( input ( \"Dar valor 1: \" )) valor_2 = int ( input ( \"Dar valor 2: \" )) resta = valor_1 - valor_2 print ( \"La resta es: \" + str ( resta )) elif opcion >= 3 : print ( 'Saliendo del programa' ) elif opcion < 0 : print ( 'Saliendo del programa' ) # Dont Repeat Yourself -> No repitas a ti mismo Calculadora de Suma y Resta 1) Suma 2) Resta -6 Saliendo del programa 5. Realizar una calculadora que pueda solo sumar y restar, dando estas opciones al usuario y realizando la opci\u00f3n elegida, si da un opcion que no existe indicar con un mensaje que la opci\u00f3n no existe # Damos el menu y guardamos la opcion del usuario print ( \"Calculadora de Suma y Resta\" ) print ( \"1) Suma\" ) print ( \"2) Resta\" ) opcion = int ( input ()) if opcion == 1 : print ( \"====== SUMA =======\" ) valor_1 = int ( input ( \"Dar valor 1: \" )) valor_2 = int ( input ( \"Dar valor 2: \" )) suma = valor_1 + valor_2 print ( \"La suma es: \" + str ( suma )) elif opcion == 2 : print ( \"====== RESTA =======\" ) valor_1 = int ( input ( \"Dar valor 1: \" )) valor_2 = int ( input ( \"Dar valor 2: \" )) resta = valor_1 - valor_2 print ( \"La resta es: \" + str ( resta )) else : print ( \"Opcion no existe\" ) Calculadora de Suma y Resta 1) Suma 2) Resta 3 Opcion no existe Ejercicios: Hacer la calculadora de area y per\u00edmetro de un cuadrado, las opciones son calcular el area y el per\u00edmetro del del cuadrado, si da una opcion que no existe, indicar con un mensaje que la \"opcion no existe\". Short Hands Esto significa que es una expresi\u00f3n corta, forma reducida o abreviada Short Hands If Existe una versi\u00f3n corta cuando si la condici\u00f3n se cumple entra a hacer una cosa y termina. if condicion_verdadera : una_accion_a_realizar a = 5 b = 3 if a > b : print ( \"a es mas grande que b\" ) a es mas grande que b Anidando if Podemos meter if dentro de otro if , no hay limites de anidamiento. Se pueden utilizar la cantidad de if que sean necesarios. Esta acci\u00f3n se llama ifs anidados x = int ( input ( \"\" )) if x > 10 : print ( \"Mayor a 10\" ) if x > 20 : print ( \"Tambien mayor 20!\" ) else : print ( \"Pero menor a 20.\" ) 30 Mayor a 10 Tambien mayor 20! Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Decisiones  if, if-else, elif"},{"location":"capitulo_1/06_Decision_if/#decisiones-if-if-else-elif","text":"","title":"Decisiones  if if-else elif"},{"location":"capitulo_1/06_Decision_if/#que-es-una-estructura-de-decision","text":"Dentro de la programaci\u00f3n tenemos una estructura que nos ayuda a poder tomar decisiones con base a una comparaci\u00f3n y de esta manera poder tomar un camino o tomar otro. Es una sentencias IF s la cual no ayuda a tomar la ruta que necesitemos","title":"\u00bfQu\u00e9 es una estructura de decisi\u00f3n?"},{"location":"capitulo_1/06_Decision_if/#estructura-if","text":"Python la \u00fanica referencia que ocupa es la identaci\u00f3n , sean espacios o tabs y dos puntos : para indicar que comienza un bloque nuevo, en este caso una sentencia if . if comparacion_verdadera : c\u00f3digo que ejecuta si es verdadero m\u00e1s c\u00f3digo ...","title":"Estructura if"},{"location":"capitulo_1/06_Decision_if/#operadores-de-comparacion","text":"Nombre S\u00edmbolo Ejemplo Mayor que > 7 > 5 -> True Mayor o igual que >= 8 >= 6 -> False Menor que < 9 < 10 -> Falso Menor o igual que <= 5 <= 5 -> True Igual que == 4 == 2 -> False Diferente de != 9 != 9 -> False Nota: No puede existir espacio en el s\u00edmbolo","title":"Operadores de comparaci\u00f3n"},{"location":"capitulo_1/06_Decision_if/#aplicando-la-estructura-if","text":"Vamos a realizar el primer ejemplo: 1. Realizar un programa que nos diga si la edad de la persona es mayor de edad o menor de edad Debemos comparar la edad para saber si es mayor o no, primero verificamos si es mayor de edad, en caso de que no sea as\u00ed, el programa sigue y pregunta si es menor de edad, en caso de que sea verdadero, entra y da el mensaje correspondiente. edad = 19 #Declaramos una variable donde guardaremos la edad y asignamos el valor de 18 if edad >= 18 : # recordemos que se hace una comparacion y despu\u00e9s los dos puntos (:) print ( \"Es mayor de edad\" ) #Recordemos que se debe aplicar una identaci\u00f3n if edad < 18 : # recordemos que se hace una comparacion y despu\u00e9s los dos puntos (:) print ( \"Es menor de edad\" ) #Recordemos que se debe aplicar una identaci\u00f3n print ( \"fin del programa\" ) Es mayor de edad fin del programa 2. Realizar un programa que nos diga si la edad de la persona es mayor de edad o menor de edad, la edad debe ser ingreasada desde terminal Debemos primero perdir la edad, una vez guardada debemos comparar la edad para saber si es mayor o no, primero verificamos si es mayor de edad, en caso de que no sea as\u00ed, el programa sigue y pregunta si es menor de edad, en caso de que sea verdadero, entra y da el mensaje correspondiente. edad = input ( \"Dar edad: \" ) #Pedimos el dato al usuario, este dato es tipo str edad_int = int ( edad ) #la edad esta en tipo str, lo convertimos a int para poder realizar la comparaci\u00f3n if edad_int >= 18 : # recordemos que se hace una comparacion y despu\u00e9s los dos puntos (:) print ( \"Eres mayor de edad\" ) #Recordemos que se debe aplicar una identaci\u00f3n if edad_int < 18 : # recordemos que se hace una comparacion y despu\u00e9s los dos puntos (:) print ( \"Eres menor de edad\" ) #Recordemos que se debe aplicar una identaci\u00f3n Dar edad: 20 Eres mayor de edad","title":"Aplicando la estructura if"},{"location":"capitulo_1/06_Decision_if/#estructura-if-else","text":"En ocasiones necesitamos que nuestro programa tome una de las 2 rutas posibles, pero aqu\u00ed en caso que no se cumpla la comparaci\u00f3n entra al otro bloque si o si. Esta estructura es un if-else , si se cumple la condici\u00f3n, realizo la acci\u00f3n, de lo contrario hago otra if comparacion_verdadera : c\u00f3digo que ejecuta si es verdadero m\u00e1s c\u00f3digo ... else : de lo contrario se ejecuto este c\u00f3digo m\u00e1s c\u00f3digo ... Vamos a realizar el primer ejemplo: 3. Realizar un programa que nos diga si la edad de la persona es mayor de edad o menor de edad Volveremos a realizar el mismo ejemplo, pero si nos damos cuenta en este ejercicio, si no es el primer caso debe ser el segundo, no tenemos otro ruta o alguna otra decisi\u00f3n. edad = int ( input ( \"Dar la edad: \" )) # Tomamos el dato y directamente la conversion de str a int if edad >= 18 : # recordemos que se hace una comparacion y despu\u00e9s los dos puntos (:) print ( \"Es mayor de edad\" ) #Recordemos que se debe aplicar una identaci\u00f3n else : #aplicamos la palabra reservada else y sus dos puntos, esta secci\u00f3n siempre se ejecutar\u00e1 siempre que no se cumpla la condici\u00f3n inicial print ( \"Es menor de edad\" ) #Recordemos que se debe aplicar una identaci\u00f3n Dar la edad: 22 Es mayor de edad 4. Realizar una calculadora que pueda solo sumar y restar, dando estas opciones al usuario y realizando la opci\u00f3n elegida # Damos el menu y guardamos la opcion del usuario print ( \"Calculadora de Suma y Resta\" ) print ( \"1) Suma\" ) print ( \"2) Resta\" ) opcion = int ( input ()) if opcion == 1 : print ( \"====== SUMA =======\" ) valor_1 = int ( input ( \"Dar valor 1: \" )) valor_2 = int ( input ( \"Dar valor 2: \" )) suma = valor_1 + valor_2 print ( \"La suma es: \" + str ( suma )) else : print ( \"====== RESTA =======\" ) valor_1 = int ( input ( \"Dar valor 1: \" )) valor_2 = int ( input ( \"Dar valor 2: \" )) resta = valor_1 - valor_2 print ( \"La resta es: \" + str ( resta )) Calculadora de Suma y Resta 1) Suma 2) Resta 1 ====== SUMA ======= Dar valor 1: 10 Dar valor 2: 36 La suma es: 46","title":"Estructura if-else"},{"location":"capitulo_1/06_Decision_if/#estructura-elif","text":"En ocasiones necesitamos verificar varias opciones y en alguna tiene que encajar o por ultimas terminar en una opci\u00f3n. Para esto tenemos que combinar muchos if con su else , para ello tenemos el siguiente operador, el cual nos ayuda a hacerlo de manera corta y f\u00e1cil de leer. Para esto siempre debemos realizar una comparaci\u00f3n si entra en ese bloque o va al siguiente, y por ultimo si no coincide con alguna, termina en un bloque por default . if comparacion_verdadera : c\u00f3digo que ejecuta si es verdadero m\u00e1s c\u00f3digo ... elif comparacion_verdadera : c\u00f3digo que ejecuta si es verdadero m\u00e1s c\u00f3digo ... elif comparacion_verdadera : c\u00f3digo que ejecuta si es verdadero m\u00e1s c\u00f3digo ... else : #en este caso es opcional de lo contrario se ejecuto este c\u00f3digo m\u00e1s c\u00f3digo ... 4. Realizar una calculadora que pueda solo sumar y restar, dando estas opciones al usuario y realizando la opci\u00f3n elegida, si da un opcion que no existe, simplemente termina el programa En esta ocasi\u00f3n si el usuario no da una opci\u00f3n que no existe, terminamos el programa sin indicar nada # Damos el menu y guardamos la opcion del usuario print ( \"Calculadora de Suma y Resta\" ) print ( \"1) Suma\" ) print ( \"2) Resta\" ) opcion = int ( input ()) if opcion == 1 : print ( \"====== SUMA =======\" ) valor_1 = int ( input ( \"Dar valor 1: \" )) valor_2 = int ( input ( \"Dar valor 2: \" )) suma = valor_1 + valor_2 print ( \"La suma es: \" + str ( suma )) elif opcion == 2 : print ( \"====== RESTA =======\" ) valor_1 = int ( input ( \"Dar valor 1: \" )) valor_2 = int ( input ( \"Dar valor 2: \" )) resta = valor_1 - valor_2 print ( \"La resta es: \" + str ( resta )) elif opcion >= 3 : print ( 'Saliendo del programa' ) elif opcion < 0 : print ( 'Saliendo del programa' ) # Dont Repeat Yourself -> No repitas a ti mismo Calculadora de Suma y Resta 1) Suma 2) Resta -6 Saliendo del programa 5. Realizar una calculadora que pueda solo sumar y restar, dando estas opciones al usuario y realizando la opci\u00f3n elegida, si da un opcion que no existe indicar con un mensaje que la opci\u00f3n no existe # Damos el menu y guardamos la opcion del usuario print ( \"Calculadora de Suma y Resta\" ) print ( \"1) Suma\" ) print ( \"2) Resta\" ) opcion = int ( input ()) if opcion == 1 : print ( \"====== SUMA =======\" ) valor_1 = int ( input ( \"Dar valor 1: \" )) valor_2 = int ( input ( \"Dar valor 2: \" )) suma = valor_1 + valor_2 print ( \"La suma es: \" + str ( suma )) elif opcion == 2 : print ( \"====== RESTA =======\" ) valor_1 = int ( input ( \"Dar valor 1: \" )) valor_2 = int ( input ( \"Dar valor 2: \" )) resta = valor_1 - valor_2 print ( \"La resta es: \" + str ( resta )) else : print ( \"Opcion no existe\" ) Calculadora de Suma y Resta 1) Suma 2) Resta 3 Opcion no existe Ejercicios: Hacer la calculadora de area y per\u00edmetro de un cuadrado, las opciones son calcular el area y el per\u00edmetro del del cuadrado, si da una opcion que no existe, indicar con un mensaje que la \"opcion no existe\".","title":"Estructura elif"},{"location":"capitulo_1/06_Decision_if/#short-hands","text":"Esto significa que es una expresi\u00f3n corta, forma reducida o abreviada","title":"Short Hands"},{"location":"capitulo_1/06_Decision_if/#short-hands-if","text":"Existe una versi\u00f3n corta cuando si la condici\u00f3n se cumple entra a hacer una cosa y termina. if condicion_verdadera : una_accion_a_realizar a = 5 b = 3 if a > b : print ( \"a es mas grande que b\" ) a es mas grande que b","title":"Short Hands If"},{"location":"capitulo_1/06_Decision_if/#anidando-if","text":"Podemos meter if dentro de otro if , no hay limites de anidamiento. Se pueden utilizar la cantidad de if que sean necesarios. Esta acci\u00f3n se llama ifs anidados x = int ( input ( \"\" )) if x > 10 : print ( \"Mayor a 10\" ) if x > 20 : print ( \"Tambien mayor 20!\" ) else : print ( \"Pero menor a 20.\" ) 30 Mayor a 10 Tambien mayor 20! Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Anidando if"},{"location":"capitulo_1/07_Operadores_l%C3%B3gicos/","text":"Operadores l\u00f3gicos Contamos con los operadores l\u00f3gicos b\u00e1sicos, AND , OR y NOT . Los operadores l\u00f3gicos toman el objeto como booleanos para realizar la comparaci\u00f3n. Estos operadores nos ayudan a realizar operaciones m\u00e1s complejas en las decisiones y ciclos. Todo objeto con alg\u00fan contenido ser\u00e1 tomado como True , a menos que: El objetos est\u00e9 vac\u00edo, como [] , () , {} El objeto es False El objeto es 0 El objeto es None El objeto es cadena vac\u00eda \"\" o '' En todos estos casos, se toman como False . Operador AND Con este operador se analizan dos comparaciones y si ambas son verdaderas , nos entrega un resultado True . La palabra reservada usada en python es and . Tabla de verdad para el operador and A B Resultado False False False False True False True False False True True True La forma de aplicaci\u00f3n: Ejemplo Analizando resultado Resultado 6 < 10 and 3 > 0 True and True True 40 < 10 and 13 > 5 False and True False 9 < 12 and 4 > 8 True and False False 6 > 10 and 3 < 0 False and False False Ejemplo con operador l\u00f3gico and a = 10 b = 10 c = - 10 if a > 0 and b > 0 : print ( \"A y B son mayores que 0\" ) if a > 0 and b > 0 and c > 0 : print ( \"Todos los numeros son diferentes de 0\" ) else : print ( \"Al menos un numero no es mayor a 0\" ) A y B son mayores que 0 Al menos un numero no es mayor a 0 # Aqu\u00ed se comparan n\u00fameros, todos daran True, menos los que tenga el valor de 0 a = 10 # True b = - 12 # True c = 0 # False if a and b and e : print ( \"Todos los numeros se toman como True\" ) else : print ( \"Al menos un valor es False\" ) Al menos un valor es False Operador OR Con este operador se analizan dos comparaciones y si alguna es verdadera, nos entrega un resultado True . La palabra reservada usada en python es or . Tabla de verdad para el operador or A B Resultado False False False False True True True False True True True True La forma de aplicaci\u00f3n: Ejemplo Analizando resultado Resultado 6 < 10 or 3 > 0 True or True True 40 < 10 or 13 > 5 False or True True 9 < 12 or 4 > 8 True or False True 6 > 10 or 3 < 0 False or False False Ejemplo con operador l\u00f3gico or a = 10 b = - 10 c = 0 if a > 0 or b > 0 : print ( \"A o B es mayor que 0\" ) else : print ( \"A y B no son mayores a 0\" ) if b > 0 or c > 0 : print ( \"B o C es mayor que 0\" ) else : print ( \"B y C NO no son mayores que 0\" ) A o B es mayor que 0 B y C NO no son mayores que 0 a = 10 b = 12 c = 0 if a or b or c : print ( \"Al menos un valor se considera True\" ) else : print ( \"Todos los valores dan como resultado False\" ) Al menos un valor se considera True Operador not Este operador invierte el resultado booleana que recibe. La palabra reservada es not Tabla de verdad para el operador not A Resultado False True True False La forma de aplicaci\u00f3n: Ejemplo Analizando resultado Resultado not (6 < 10) not (True) False not (20 < 12) not (False) True not (2 < 10) not (True) False not (False) not (False) True Ejemplo con operador l\u00f3gico not a = 10 if not a : #Invierto el valor booleano que da 10 print ( \"El valor booleane es True\" ) residuo_3 = a % 3 residuo_5 = a % 5 print ( residuo_3 ) print ( residuo_5 ) if not ( residuo_3 == 0 or residuo_5 == 0 ): print ( \"10 no es divisible entre 3 o 5\" ) else : print ( \"10 es divisible entre 3 or 5\" ) 1 0 10 es divisible entre 3 or 5 Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Operadores l\u00f3gicos"},{"location":"capitulo_1/07_Operadores_l%C3%B3gicos/#operadores-logicos","text":"Contamos con los operadores l\u00f3gicos b\u00e1sicos, AND , OR y NOT . Los operadores l\u00f3gicos toman el objeto como booleanos para realizar la comparaci\u00f3n. Estos operadores nos ayudan a realizar operaciones m\u00e1s complejas en las decisiones y ciclos. Todo objeto con alg\u00fan contenido ser\u00e1 tomado como True , a menos que: El objetos est\u00e9 vac\u00edo, como [] , () , {} El objeto es False El objeto es 0 El objeto es None El objeto es cadena vac\u00eda \"\" o '' En todos estos casos, se toman como False .","title":"Operadores l\u00f3gicos"},{"location":"capitulo_1/07_Operadores_l%C3%B3gicos/#operador-and","text":"Con este operador se analizan dos comparaciones y si ambas son verdaderas , nos entrega un resultado True . La palabra reservada usada en python es and . Tabla de verdad para el operador and A B Resultado False False False False True False True False False True True True La forma de aplicaci\u00f3n: Ejemplo Analizando resultado Resultado 6 < 10 and 3 > 0 True and True True 40 < 10 and 13 > 5 False and True False 9 < 12 and 4 > 8 True and False False 6 > 10 and 3 < 0 False and False False","title":"Operador AND"},{"location":"capitulo_1/07_Operadores_l%C3%B3gicos/#ejemplo-con-operador-logico-and","text":"a = 10 b = 10 c = - 10 if a > 0 and b > 0 : print ( \"A y B son mayores que 0\" ) if a > 0 and b > 0 and c > 0 : print ( \"Todos los numeros son diferentes de 0\" ) else : print ( \"Al menos un numero no es mayor a 0\" ) A y B son mayores que 0 Al menos un numero no es mayor a 0 # Aqu\u00ed se comparan n\u00fameros, todos daran True, menos los que tenga el valor de 0 a = 10 # True b = - 12 # True c = 0 # False if a and b and e : print ( \"Todos los numeros se toman como True\" ) else : print ( \"Al menos un valor es False\" ) Al menos un valor es False","title":"Ejemplo con operador l\u00f3gico and"},{"location":"capitulo_1/07_Operadores_l%C3%B3gicos/#operador-or","text":"Con este operador se analizan dos comparaciones y si alguna es verdadera, nos entrega un resultado True . La palabra reservada usada en python es or . Tabla de verdad para el operador or A B Resultado False False False False True True True False True True True True La forma de aplicaci\u00f3n: Ejemplo Analizando resultado Resultado 6 < 10 or 3 > 0 True or True True 40 < 10 or 13 > 5 False or True True 9 < 12 or 4 > 8 True or False True 6 > 10 or 3 < 0 False or False False","title":"Operador OR"},{"location":"capitulo_1/07_Operadores_l%C3%B3gicos/#ejemplo-con-operador-logico-or","text":"a = 10 b = - 10 c = 0 if a > 0 or b > 0 : print ( \"A o B es mayor que 0\" ) else : print ( \"A y B no son mayores a 0\" ) if b > 0 or c > 0 : print ( \"B o C es mayor que 0\" ) else : print ( \"B y C NO no son mayores que 0\" ) A o B es mayor que 0 B y C NO no son mayores que 0 a = 10 b = 12 c = 0 if a or b or c : print ( \"Al menos un valor se considera True\" ) else : print ( \"Todos los valores dan como resultado False\" ) Al menos un valor se considera True","title":"Ejemplo con operador l\u00f3gico or"},{"location":"capitulo_1/07_Operadores_l%C3%B3gicos/#operador-not","text":"Este operador invierte el resultado booleana que recibe. La palabra reservada es not Tabla de verdad para el operador not A Resultado False True True False La forma de aplicaci\u00f3n: Ejemplo Analizando resultado Resultado not (6 < 10) not (True) False not (20 < 12) not (False) True not (2 < 10) not (True) False not (False) not (False) True","title":"Operador not"},{"location":"capitulo_1/07_Operadores_l%C3%B3gicos/#ejemplo-con-operador-logico-not","text":"a = 10 if not a : #Invierto el valor booleano que da 10 print ( \"El valor booleane es True\" ) residuo_3 = a % 3 residuo_5 = a % 5 print ( residuo_3 ) print ( residuo_5 ) if not ( residuo_3 == 0 or residuo_5 == 0 ): print ( \"10 no es divisible entre 3 o 5\" ) else : print ( \"10 es divisible entre 3 or 5\" ) 1 0 10 es divisible entre 3 or 5 Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Ejemplo con operador l\u00f3gico not"},{"location":"capitulo_1/08_Estructura_de_Repeticion_-_while/","text":"Estructura de repetici\u00f3n while Dentro de la programaci\u00f3n tenemos estructuras de control para repetir acciones. Hay varias estructuras que podemos utilizar, los ciclos son while , for ; este ultimo se ver\u00e1 en otro cap\u00edtulo. Estructura while La sintaxis de la estructura while es muy sencilla; es la siguiente: while condicion_verdadera : l\u00ednea de c\u00f3digo l\u00ednea de c\u00f3digo l\u00ednea de c\u00f3digo ... La forma de leerla es: mientras la condici\u00f3n se cumpla seguir\u00e1 dentro del ciclo . Lo que tiene esta estructura es que al momento de preguntar por primera vez, sino cumple la condici\u00f3n no entra al ciclo. Ejemplo Vamos a imprimir 10 n\u00fameros, desde el 0 al 9, en cada vuelta del ciclo debemos tener una variable que nos ayude a saber cuando hayamos terminado. contador = 0 # declaro mi variable auxiliar \"contador\" while contador < 10 : print ( contador ) # imprimir el valor del contador contador = contador + 1 # incremento al contador print ( \"El ciclo termino\" ) 0 1 2 3 4 5 6 7 8 9 El ciclo termino Imprimir la tabla del 7, que vaya desde el 1 al 10. tabla = 7 contador = 1 while contador <= 10 : print ( tabla * contador ) contador += 1 7 14 21 28 35 42 49 56 63 70 solicitar al usuario 10 n\u00fameros e indicar si es par o impar contador = 1 print ( \"Par o Impar\" ) while contador <= 10 : numero = int ( input ( \"Dar valor \" + str ( contador ) + \": \" )) if numero % 2 == 0 : print ( \"El valor \" + str ( numero ) + \" es par\" ) else : print ( \"El valor \" + str ( numero ) + \" es impar\" ) print ( \"-------------------------------------------\" ) contador += 1 Par o Impar Dar valor 1: 51 El valor 51 es impar ------------------------------------------- Dar valor 2: 23156 El valor 23156 es par ------------------------------------------- Dar valor 3: 58616 El valor 58616 es par ------------------------------------------- Dar valor 4: 8498 El valor 8498 es par ------------------------------------------- Dar valor 5: 84198 El valor 84198 es par ------------------------------------------- Dar valor 6: 89549 El valor 89549 es impar ------------------------------------------- Dar valor 7: 9864198 El valor 9864198 es par ------------------------------------------- Dar valor 8: 8964 El valor 8964 es par ------------------------------------------- Dar valor 9: 984 El valor 984 es par ------------------------------------------- Dar valor 10: 89498 El valor 89498 es par ------------------------------------------- Solicitar las 3 calificaciones de materia e imprimir su promedio con la frase de \"Aprobo\" o \"Reprobo\" dependiendo el caso print ( \"Calculadora de promedio final\" ) suma = 0 # guarda la suma de los parciales calificaciones = 1 # variable que lleva el coteo while calificaciones <= 3 : calificacion = int ( input ( \"Dar calificacion \" + str ( calificaciones ) + \": \" ) ) suma += calificacion calificaciones += 1 promedio = suma / 3 if ( promedio < 6 ): print ( \"No has aprobado, tu promedio es \" + str ( promedio )) else : print ( \"Has aprobado, tu promedio es \" + str ( promedio )) Calculadora de promedio final Dar calificacion 1: 5 Dar calificacion 2: 8 Dar calificacion 3: 10 Has aprobado, tu promedio es 7.666666666666667 Realizar una calculadora para sumar y restar, pero hasta que el usuario de la opcion de salir el programa terminar\u00e1 opcion = 0 while opcion != 3 : print ( \"-------------------------------------\" ) print ( \"Calculadora Suma y Resta\" ) print ( \"1. Suma\" ) print ( \"2. Resta\" ) print ( \"3. Salir\" ) opcion = int ( input ()) if opcion == 1 : valor1 = float ( input ( \"Dar el primer valor\" )) valor2 = float ( input ( \"Dar el segundo valor\" )) print ( \"La suma es: \" + str ( valor1 + valor2 )) if opcion == 2 : valor1 = float ( input ( \"Dar el primer valor\" )) valor2 = float ( input ( \"Dar el segundo valor\" )) print ( \"La resta es: \" + str ( valor1 - valor2 )) if opcion > 3 or opcion < 1 : print ( \"La opcion no existe\" ) print ( \"Programa a finalizado\" ) ------------------------------------- Calculadora Suma y Resta 1. Suma 2. Resta 3. Salir 1 Dar el primer valor2 Dar el segundo valor6 La suma es: 8.0 ------------------------------------- Calculadora Suma y Resta 1. Suma 2. Resta 3. Salir 2 Dar el primer valor85 Dar el segundo valor36 La resta es: 49.0 ------------------------------------- Calculadora Suma y Resta 1. Suma 2. Resta 3. Salir 5 La opcion no existe ------------------------------------- Calculadora Suma y Resta 1. Suma 2. Resta 3. Salir -58 La opcion no existe ------------------------------------- Calculadora Suma y Resta 1. Suma 2. Resta 3. Salir 3 Programa a finalizado Ejercicios: Imprimir la tabla del 8, del 1 al 10, con el siguiente formato \"8 x 1 = 8\" Realizar un programa que solicite 10 n\u00fameros e imprima si es par o impar y si es mayor a 10 que lo indique, de lo contrario solo dice \"es impar\" Realizar un programa solicite los 3 parciales de Matem\u00e1ticas, e imprimir el promedio, pero si reprueba, ahora \u00e1 que pedir el resultado de su extra, en caso que haya pasado el extra, le dar\u00e1 su calificacion final y le dir\u00e1 \"aprobado\". En caso que no apruebe su extra, solo le dir\u00e1 \"estas en recursamiento\" Continue y Break Existen 2 palabras reservadas que nos ayudan a un control mas complejo dentro de los ciclos, que son break y continue . La palabra reservada break me sirve para romper un ciclo cuando yo no necesite, muy util en ciclos infinitos que necesitemos romper . La palabra reservada continue me sirve para ignorar el codigo restante e iniciar la siguiente vuelta del ciclo. # Vamos a hacer un ciclo infinito el cual vamos a romper cuando una condicion se cumpla contador = 0 while True : # ciclo infinito print ( 'El valor del contador es: ' + str ( contador )) contador += 1 if contador == 5 : # en el momento que esta condici\u00f3n se cumple entra y encuentra break print ( \"Se rompe el ciclo en el valor \" + str ( contador )) break # cuando se ejecute esta linea el ciclo termina El valor del contador es: 0 El valor del contador es: 1 El valor del contador es: 2 El valor del contador es: 3 El valor del contador es: 4 Se rompe el ciclo en el valor 5 # vamos a hacer que el ciclo ignore todo el c\u00f3digo que tiene por debajo cuando encuentre la palabra continue contador = 0 while contador < 5 : contador += 1 if contador == 3 : continue print ( f \"El valor del contador es: { contador } \" ) El valor del contador es: 1 El valor del contador es: 2 El valor del contador es: 4 El valor del contador es: 5 # Realizar una calculadora que sume y reste, mostrando un menu indicando las opciones, # Debe tener la opcion de salir, en caso que ingrese una opcion que no existe, # mandar el mensaje de que la opcion no es valida. El programa termina cuando el usuario # ingresa la opcion de salir, de lo contrario debe seguir mostrando el menu con las opciones while True : print ( \"-------------------------------------\" ) print ( \"Calculadora Suma y Resta\" ) print ( \"1. Suma\" ) print ( \"2. Resta\" ) print ( \"3. Salir\" ) opcion = int ( input ()) if opcion == 1 : valor1 = float ( input ( \"Dar el primer valor\" )) valor2 = float ( input ( \"Dar el segundo valor\" )) suma = valor1 + valo2 print ( \"La suma es: \" + str ( suma )) elif opcion == 2 : valor1 = float ( input ( \"Dar el primer valor\" )) valor2 = float ( input ( \"Dar el segundo valor\" )) print ( \"La resta es: \" + str ( valor1 - valor2 )) elif opcion == 3 : print ( \"Programa a finalizado\" ) break else : print ( \"La opcion no existe\" ) ------------------------------------- Calculadora Suma y Resta 1. Suma 2. Resta 3. Salir 2 Dar el primer valor36 Dar el segundo valor36 La resta es: 0.0 ------------------------------------- Calculadora Suma y Resta 1. Suma 2. Resta 3. Salir 5 La opcion no existe ------------------------------------- Calculadora Suma y Resta 1. Suma 2. Resta 3. Salir -6 La opcion no existe ------------------------------------- Calculadora Suma y Resta 1. Suma 2. Resta 3. Salir 3 Programa a finalizado Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Estructura de repetici\u00f3n - while"},{"location":"capitulo_1/08_Estructura_de_Repeticion_-_while/#estructura-de-repeticion-while","text":"Dentro de la programaci\u00f3n tenemos estructuras de control para repetir acciones. Hay varias estructuras que podemos utilizar, los ciclos son while , for ; este ultimo se ver\u00e1 en otro cap\u00edtulo.","title":"Estructura de repetici\u00f3n while"},{"location":"capitulo_1/08_Estructura_de_Repeticion_-_while/#estructura-while","text":"La sintaxis de la estructura while es muy sencilla; es la siguiente: while condicion_verdadera : l\u00ednea de c\u00f3digo l\u00ednea de c\u00f3digo l\u00ednea de c\u00f3digo ... La forma de leerla es: mientras la condici\u00f3n se cumpla seguir\u00e1 dentro del ciclo . Lo que tiene esta estructura es que al momento de preguntar por primera vez, sino cumple la condici\u00f3n no entra al ciclo.","title":"Estructura while"},{"location":"capitulo_1/08_Estructura_de_Repeticion_-_while/#ejemplo","text":"Vamos a imprimir 10 n\u00fameros, desde el 0 al 9, en cada vuelta del ciclo debemos tener una variable que nos ayude a saber cuando hayamos terminado. contador = 0 # declaro mi variable auxiliar \"contador\" while contador < 10 : print ( contador ) # imprimir el valor del contador contador = contador + 1 # incremento al contador print ( \"El ciclo termino\" ) 0 1 2 3 4 5 6 7 8 9 El ciclo termino Imprimir la tabla del 7, que vaya desde el 1 al 10. tabla = 7 contador = 1 while contador <= 10 : print ( tabla * contador ) contador += 1 7 14 21 28 35 42 49 56 63 70 solicitar al usuario 10 n\u00fameros e indicar si es par o impar contador = 1 print ( \"Par o Impar\" ) while contador <= 10 : numero = int ( input ( \"Dar valor \" + str ( contador ) + \": \" )) if numero % 2 == 0 : print ( \"El valor \" + str ( numero ) + \" es par\" ) else : print ( \"El valor \" + str ( numero ) + \" es impar\" ) print ( \"-------------------------------------------\" ) contador += 1 Par o Impar Dar valor 1: 51 El valor 51 es impar ------------------------------------------- Dar valor 2: 23156 El valor 23156 es par ------------------------------------------- Dar valor 3: 58616 El valor 58616 es par ------------------------------------------- Dar valor 4: 8498 El valor 8498 es par ------------------------------------------- Dar valor 5: 84198 El valor 84198 es par ------------------------------------------- Dar valor 6: 89549 El valor 89549 es impar ------------------------------------------- Dar valor 7: 9864198 El valor 9864198 es par ------------------------------------------- Dar valor 8: 8964 El valor 8964 es par ------------------------------------------- Dar valor 9: 984 El valor 984 es par ------------------------------------------- Dar valor 10: 89498 El valor 89498 es par ------------------------------------------- Solicitar las 3 calificaciones de materia e imprimir su promedio con la frase de \"Aprobo\" o \"Reprobo\" dependiendo el caso print ( \"Calculadora de promedio final\" ) suma = 0 # guarda la suma de los parciales calificaciones = 1 # variable que lleva el coteo while calificaciones <= 3 : calificacion = int ( input ( \"Dar calificacion \" + str ( calificaciones ) + \": \" ) ) suma += calificacion calificaciones += 1 promedio = suma / 3 if ( promedio < 6 ): print ( \"No has aprobado, tu promedio es \" + str ( promedio )) else : print ( \"Has aprobado, tu promedio es \" + str ( promedio )) Calculadora de promedio final Dar calificacion 1: 5 Dar calificacion 2: 8 Dar calificacion 3: 10 Has aprobado, tu promedio es 7.666666666666667 Realizar una calculadora para sumar y restar, pero hasta que el usuario de la opcion de salir el programa terminar\u00e1 opcion = 0 while opcion != 3 : print ( \"-------------------------------------\" ) print ( \"Calculadora Suma y Resta\" ) print ( \"1. Suma\" ) print ( \"2. Resta\" ) print ( \"3. Salir\" ) opcion = int ( input ()) if opcion == 1 : valor1 = float ( input ( \"Dar el primer valor\" )) valor2 = float ( input ( \"Dar el segundo valor\" )) print ( \"La suma es: \" + str ( valor1 + valor2 )) if opcion == 2 : valor1 = float ( input ( \"Dar el primer valor\" )) valor2 = float ( input ( \"Dar el segundo valor\" )) print ( \"La resta es: \" + str ( valor1 - valor2 )) if opcion > 3 or opcion < 1 : print ( \"La opcion no existe\" ) print ( \"Programa a finalizado\" ) ------------------------------------- Calculadora Suma y Resta 1. Suma 2. Resta 3. Salir 1 Dar el primer valor2 Dar el segundo valor6 La suma es: 8.0 ------------------------------------- Calculadora Suma y Resta 1. Suma 2. Resta 3. Salir 2 Dar el primer valor85 Dar el segundo valor36 La resta es: 49.0 ------------------------------------- Calculadora Suma y Resta 1. Suma 2. Resta 3. Salir 5 La opcion no existe ------------------------------------- Calculadora Suma y Resta 1. Suma 2. Resta 3. Salir -58 La opcion no existe ------------------------------------- Calculadora Suma y Resta 1. Suma 2. Resta 3. Salir 3 Programa a finalizado","title":"Ejemplo"},{"location":"capitulo_1/08_Estructura_de_Repeticion_-_while/#ejercicios","text":"Imprimir la tabla del 8, del 1 al 10, con el siguiente formato \"8 x 1 = 8\" Realizar un programa que solicite 10 n\u00fameros e imprima si es par o impar y si es mayor a 10 que lo indique, de lo contrario solo dice \"es impar\" Realizar un programa solicite los 3 parciales de Matem\u00e1ticas, e imprimir el promedio, pero si reprueba, ahora \u00e1 que pedir el resultado de su extra, en caso que haya pasado el extra, le dar\u00e1 su calificacion final y le dir\u00e1 \"aprobado\". En caso que no apruebe su extra, solo le dir\u00e1 \"estas en recursamiento\"","title":"Ejercicios:"},{"location":"capitulo_1/08_Estructura_de_Repeticion_-_while/#continue-y-break","text":"Existen 2 palabras reservadas que nos ayudan a un control mas complejo dentro de los ciclos, que son break y continue . La palabra reservada break me sirve para romper un ciclo cuando yo no necesite, muy util en ciclos infinitos que necesitemos romper . La palabra reservada continue me sirve para ignorar el codigo restante e iniciar la siguiente vuelta del ciclo. # Vamos a hacer un ciclo infinito el cual vamos a romper cuando una condicion se cumpla contador = 0 while True : # ciclo infinito print ( 'El valor del contador es: ' + str ( contador )) contador += 1 if contador == 5 : # en el momento que esta condici\u00f3n se cumple entra y encuentra break print ( \"Se rompe el ciclo en el valor \" + str ( contador )) break # cuando se ejecute esta linea el ciclo termina El valor del contador es: 0 El valor del contador es: 1 El valor del contador es: 2 El valor del contador es: 3 El valor del contador es: 4 Se rompe el ciclo en el valor 5 # vamos a hacer que el ciclo ignore todo el c\u00f3digo que tiene por debajo cuando encuentre la palabra continue contador = 0 while contador < 5 : contador += 1 if contador == 3 : continue print ( f \"El valor del contador es: { contador } \" ) El valor del contador es: 1 El valor del contador es: 2 El valor del contador es: 4 El valor del contador es: 5 # Realizar una calculadora que sume y reste, mostrando un menu indicando las opciones, # Debe tener la opcion de salir, en caso que ingrese una opcion que no existe, # mandar el mensaje de que la opcion no es valida. El programa termina cuando el usuario # ingresa la opcion de salir, de lo contrario debe seguir mostrando el menu con las opciones while True : print ( \"-------------------------------------\" ) print ( \"Calculadora Suma y Resta\" ) print ( \"1. Suma\" ) print ( \"2. Resta\" ) print ( \"3. Salir\" ) opcion = int ( input ()) if opcion == 1 : valor1 = float ( input ( \"Dar el primer valor\" )) valor2 = float ( input ( \"Dar el segundo valor\" )) suma = valor1 + valo2 print ( \"La suma es: \" + str ( suma )) elif opcion == 2 : valor1 = float ( input ( \"Dar el primer valor\" )) valor2 = float ( input ( \"Dar el segundo valor\" )) print ( \"La resta es: \" + str ( valor1 - valor2 )) elif opcion == 3 : print ( \"Programa a finalizado\" ) break else : print ( \"La opcion no existe\" ) ------------------------------------- Calculadora Suma y Resta 1. Suma 2. Resta 3. Salir 2 Dar el primer valor36 Dar el segundo valor36 La resta es: 0.0 ------------------------------------- Calculadora Suma y Resta 1. Suma 2. Resta 3. Salir 5 La opcion no existe ------------------------------------- Calculadora Suma y Resta 1. Suma 2. Resta 3. Salir -6 La opcion no existe ------------------------------------- Calculadora Suma y Resta 1. Suma 2. Resta 3. Salir 3 Programa a finalizado Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Continue y Break"},{"location":"capitulo_1/09_Estructura_de_repeticion_-_for/","text":"Estructura de repetici\u00f3n for La siguiente estructura de control se llama for . Esta estructura tiene un comportamiento similar a while . En esencial hace lo mismo, repite hasta un limite pero este se da distinto. For each . Sintaxis: for variable in iterador : c\u00f3digo a ejecutar c\u00f3digo a ejecutar c\u00f3digo a ejecutar ... Funci\u00f3n range() La funci\u00f3n range() retorna un secuencia de n\u00fameros, comenzando por default en 0 e incrementando en 1, y se detiene antes del n\u00famero especificado. Sintaxis range ( start , stop , step ) Par\u00e1metros: start (opcional). Un numero entero espec\u00edficamente para la posici\u00f3n inicial, por default es 0 stop (Requerido). Un numero entero que especifica en donde se detendr\u00e1. step (opcional). Un numero entero que especifica el incremento. Por default es 1. Esta funci\u00f3n se utiliza con el ciclo for #Vamos a imprimir 10 n\u00fameros, del 0 al 9, recordemos que el n\u00famero que le pasamos es el tope y ese no se imprime, #y el valor inicial por default es 0, el incremento es de 1 en 1 for valor in range ( 10 ): print ( f 'el valor actual es: \" { valor } \"' ) el valor actual es: \"0\" el valor actual es: \"1\" el valor actual es: \"2\" el valor actual es: \"3\" el valor actual es: \"4\" el valor actual es: \"5\" el valor actual es: \"6\" el valor actual es: \"7\" el valor actual es: \"8\" el valor actual es: \"9\" # Ahora vamos a imprimir en un rango, entonces se le pasa el inicio y el fin, # comenzando en 2 y terminando en 11 for valor in range ( 2 , 12 ): print ( f 'el valor actual es: \" { valor } \"' ) el valor actual es: \"2\" el valor actual es: \"3\" el valor actual es: \"4\" el valor actual es: \"5\" el valor actual es: \"6\" el valor actual es: \"7\" el valor actual es: \"8\" el valor actual es: \"9\" el valor actual es: \"10\" el valor actual es: \"11\" # Ahora vamos a imprimir en un rango, entonces se le pasa el inicio y el fin, # comenzando en 1 y terminando en 20, de 2 en 2 for valor in range ( 3 , 22 , 2 ): print ( valor ) 3 5 7 9 11 13 15 17 19 21 Nota: Cuando queramos ya sea comenzar en un numero distinto, o cero con un incremento diferente se tiene que pasar el valor de incremento forzosamente Ejemplos 1. Solicitar 3 calificaciones del parcial y calcular el promedio suma = 0.0 for calificacion in range ( 3 ): suma += float ( input ( f \"Dar el parcial { calificacion + 1 } : \" )) print ( f \"El promedio es { suma / 3 } \" ) Dar el parcial 1: 8 Dar el parcial 2: 7 Dar el parcial 3: 10 El promedio es 8.333333333333334 2. Imprimir la tabla del 7 con el formato \"7 x 10 = 70\" tabla = 7 for contador in range ( 1 , 11 ): resultado = tabla * contador print ( str ( tabla ) + \" x \" + str ( contador ) + \" = \" + str ( resultado ) ) 7 x 1 = 7 7 x 2 = 14 7 x 3 = 21 7 x 4 = 28 7 x 5 = 35 7 x 6 = 42 7 x 7 = 49 7 x 8 = 56 7 x 9 = 63 7 x 10 = 70 for v in range ( 10 ): print ( v ) if v == 3 : break 0 1 2 3 mensaje = \"Super mecatronica 1000%\" for letra in mensaje : print ( letra ) S u p e r m e c a t r o n i c a 1 0 0 0 % #Comparativa entre el for vs while print ( 'Con FOR' ) for contador in range ( 0 , 10 ): print ( contador ) print ( '---------------' ) print ( 'Con WHILE' ) contador = 0 while contador < 10 : print ( contador ) contador += 1 0 1 2 3 4 5 6 7 8 9 --------------- 0 1 2 3 4 5 6 7 8 9 Ejercicio: Recorer un rango del 0 al 10 e indicar cuales son par e impar Recorer un rango del 5 al 32 e indicar los que sean multiplos de 5 Solicitarle al usuario que tabla desea imprimir, indicando desde donde comienza y donde termina Calcular el promedio de la sumatoria de los n\u00fameros pares desde el 2 hasta el 200 Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Estructura de repetici\u00f3n - for"},{"location":"capitulo_1/09_Estructura_de_repeticion_-_for/#estructura-de-repeticion-for","text":"La siguiente estructura de control se llama for . Esta estructura tiene un comportamiento similar a while . En esencial hace lo mismo, repite hasta un limite pero este se da distinto. For each . Sintaxis: for variable in iterador : c\u00f3digo a ejecutar c\u00f3digo a ejecutar c\u00f3digo a ejecutar ...","title":"Estructura de repetici\u00f3n for"},{"location":"capitulo_1/09_Estructura_de_repeticion_-_for/#funcion-range","text":"La funci\u00f3n range() retorna un secuencia de n\u00fameros, comenzando por default en 0 e incrementando en 1, y se detiene antes del n\u00famero especificado. Sintaxis range ( start , stop , step ) Par\u00e1metros: start (opcional). Un numero entero espec\u00edficamente para la posici\u00f3n inicial, por default es 0 stop (Requerido). Un numero entero que especifica en donde se detendr\u00e1. step (opcional). Un numero entero que especifica el incremento. Por default es 1. Esta funci\u00f3n se utiliza con el ciclo for #Vamos a imprimir 10 n\u00fameros, del 0 al 9, recordemos que el n\u00famero que le pasamos es el tope y ese no se imprime, #y el valor inicial por default es 0, el incremento es de 1 en 1 for valor in range ( 10 ): print ( f 'el valor actual es: \" { valor } \"' ) el valor actual es: \"0\" el valor actual es: \"1\" el valor actual es: \"2\" el valor actual es: \"3\" el valor actual es: \"4\" el valor actual es: \"5\" el valor actual es: \"6\" el valor actual es: \"7\" el valor actual es: \"8\" el valor actual es: \"9\" # Ahora vamos a imprimir en un rango, entonces se le pasa el inicio y el fin, # comenzando en 2 y terminando en 11 for valor in range ( 2 , 12 ): print ( f 'el valor actual es: \" { valor } \"' ) el valor actual es: \"2\" el valor actual es: \"3\" el valor actual es: \"4\" el valor actual es: \"5\" el valor actual es: \"6\" el valor actual es: \"7\" el valor actual es: \"8\" el valor actual es: \"9\" el valor actual es: \"10\" el valor actual es: \"11\" # Ahora vamos a imprimir en un rango, entonces se le pasa el inicio y el fin, # comenzando en 1 y terminando en 20, de 2 en 2 for valor in range ( 3 , 22 , 2 ): print ( valor ) 3 5 7 9 11 13 15 17 19 21 Nota: Cuando queramos ya sea comenzar en un numero distinto, o cero con un incremento diferente se tiene que pasar el valor de incremento forzosamente","title":"Funci\u00f3n range()"},{"location":"capitulo_1/09_Estructura_de_repeticion_-_for/#ejemplos","text":"1. Solicitar 3 calificaciones del parcial y calcular el promedio suma = 0.0 for calificacion in range ( 3 ): suma += float ( input ( f \"Dar el parcial { calificacion + 1 } : \" )) print ( f \"El promedio es { suma / 3 } \" ) Dar el parcial 1: 8 Dar el parcial 2: 7 Dar el parcial 3: 10 El promedio es 8.333333333333334 2. Imprimir la tabla del 7 con el formato \"7 x 10 = 70\" tabla = 7 for contador in range ( 1 , 11 ): resultado = tabla * contador print ( str ( tabla ) + \" x \" + str ( contador ) + \" = \" + str ( resultado ) ) 7 x 1 = 7 7 x 2 = 14 7 x 3 = 21 7 x 4 = 28 7 x 5 = 35 7 x 6 = 42 7 x 7 = 49 7 x 8 = 56 7 x 9 = 63 7 x 10 = 70 for v in range ( 10 ): print ( v ) if v == 3 : break 0 1 2 3 mensaje = \"Super mecatronica 1000%\" for letra in mensaje : print ( letra ) S u p e r m e c a t r o n i c a 1 0 0 0 % #Comparativa entre el for vs while print ( 'Con FOR' ) for contador in range ( 0 , 10 ): print ( contador ) print ( '---------------' ) print ( 'Con WHILE' ) contador = 0 while contador < 10 : print ( contador ) contador += 1 0 1 2 3 4 5 6 7 8 9 --------------- 0 1 2 3 4 5 6 7 8 9 Ejercicio: Recorer un rango del 0 al 10 e indicar cuales son par e impar Recorer un rango del 5 al 32 e indicar los que sean multiplos de 5 Solicitarle al usuario que tabla desea imprimir, indicando desde donde comienza y donde termina Calcular el promedio de la sumatoria de los n\u00fameros pares desde el 2 hasta el 200 Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Ejemplos"},{"location":"capitulo_1/10_Colecciones/","text":"Colecciones Dentro de los lenguajes de programaci\u00f3n hay tipos datos que son estructuras que pueden contener m\u00e1s de un dato, a comparaci\u00f3n de los tipos de datos b\u00e1sicos, estas estructuras pueden contener muchos de esos datos b\u00e1sicos en su interior. Podr\u00edas decir que es una base de datos, pero esta solo existe mientras est\u00e1 la aplicaci\u00f3n en ejecuci\u00f3n, los datos son temporales. Las colecciones pueden contener cualquier tipo de dato, incluso mas colecciones. En python son los siguientes: Tuplas Tipo de dato Inmutable Listas (arrays) Tipo de Mutable Diccionarios Sets Nota: En este curso solo se cubrir\u00e1n las tuplas y las listas. Tuplas Es una estructura de datos inmutables , una vez declarada no puede cambiar su contenido, ni agregar, ni eliminar, no modificar. Cada posici\u00f3n de los datos tiene un indice (index), el cual me ayuda a acceder a el. La primera posici\u00f3n siempre es 0 . La convenci\u00f3n de como declarar o nombrar a una lista o tupla es en plural Par\u00e1metros a destacar: index: Indice len: Longitud Sintaxis: nombre_tupla = ( dato1 , dato2 , ... , datoN ) # Declaraci\u00f3n de una tupla # Tiene 3 posiciones, comenzado en el 0. Largo de 3 calificaciones = ( 8 , 7 , 9 ) print ( calificaciones ) print ( type ( calificaciones ) ) # vamos a acceder a cada dato calificacion1 = calificaciones [ 0 ] calificacion2 = calificaciones [ 1 ] calificacion3 = calificaciones [ 2 ] print ( calificacion1 ) print ( calificacion2 ) print ( calificacion3 ) # Recorriendo tuplas con for y while for calificacion in calificaciones : print ( calificacion ) print ( '-------------------------' ) contador = 0 while contador < len ( calificaciones ): calificacion = calificaciones [ contador ] print ( calificacion ) contador += 1 Listas Es una colecci\u00f3n de elementos ordenados. En otro lenguajes es conocido como un array . A este tipo de colecci\u00f3n es Mutable, es decir, se le pueden agregar, eliminar, quitar, elementos. Podemos hacer diversas operaciones con ellos. Elementos que debemos tener en cuenta son: index : El indice o posici\u00f3n de cada elemento en la lista, recordar que todas comienzan en la posici\u00f3n 0. length : La longitud o cantidad de elementos que contiene la lista Sintaxis nombre_lista = [ elemento1 , elemento2 , elemento3 , .. , elementoN ] Como se deben nombrar las listas (buena practica o convension) El nombre de la varable que contanga una lista, debe ser en plural Puede contener la palabra **_list** o **_list** Funciones de las listas Las lista son un objeto, por lo tanto cuenta con diversos metodos los cuales nos ayudan a interactuar con ellos: append(element) : Adds an element at the end of the list clear() : Removes all the elements from the list copy() : Returns a copy of the list count(element) : Returns the number of elements with the specified value extend(list) : Add the elements of a list (or any iterable), to the end of the current list index(element[,start[,end]]) : Returns the index of the first element with the specified value insert(<position, element) : Adds an element at the specified position pop([index]) : Removes the element at the specified position remove(element) : Removes the first item with the specified value reverse() : Reverses the order of the list sort() : Sorts the list # Declaro una lista con unas materias materias = [ 'analogicas' , 'digitales' , 'mediciones' ] # lista de str print ( materias ) #agregamos una materia mas a la lista materias . append ( 'dibujo 3D' ) #imprimo la lista print ( materias ) #creo otra lista materias2 = [ 'neumatica' , 'mecanismos' ] # Extendemos la primer lista con la segunda materias . extend ( materias2 ) #imprimo la lista print ( materias ) #inserto una materia en la posici\u00f3n 2 materias . insert ( 2 , 'Matematicas' ) #imprimo la lista print ( materias ) #removemos el elemento 'Matematicas' materias . remove ( \"Matematicas\" ) #imprimo la lista print ( materias ) # Ordenamos las lista materias . sort () #imprimo la lista print ( materias ) # sacamos un elemento de la lista, si no se especifica saca al ultimo ultima_materia = materias . pop () #imprimo la lista print ( materias ) print ( 'ultima materia:' , ultima_materia ) # Invierto el orden de la lista materias . reverse () #imprimo la lista print ( materias ) ['analogicas', 'digitales', 'mediciones'] ['analogicas', 'digitales', 'mediciones', 'dibujo 3D'] ['analogicas', 'digitales', 'mediciones', 'dibujo 3D', 'neumatica', 'mecanismos'] ['analogicas', 'digitales', 'Matematicas', 'mediciones', 'dibujo 3D', 'neumatica', 'mecanismos'] ['analogicas', 'digitales', 'mediciones', 'dibujo 3D', 'neumatica', 'mecanismos'] ['analogicas', 'dibujo 3D', 'digitales', 'mecanismos', 'mediciones', 'neumatica'] ['analogicas', 'dibujo 3D', 'digitales', 'mecanismos', 'mediciones'] ultima materia: neumatica ['mediciones', 'mecanismos', 'digitales', 'dibujo 3D', 'analogicas'] Obteniendo los datos de una lista Sintaxis variable = nombre_lista [ posicion ] #Acceso a los datos de la lista materia1 = materias [ 0 ] materia2 = materias [ 1 ] materia3 = materias [ 2 ] materia4 = materias [ 3 ] print ( materia1 ) print ( materia2 ) print ( materia3 ) print ( materia4 ) mediciones mecanismos digitales dibujo 3D # Recorriendo una lista con FOR for materia in materias : print ( 'La materia es: ' , materia ) print ( '*********************' ) # Recorriendo una lista con WHILE count = 0 while count < len ( materias ): materia = materias [ count ] print ( 'La materia es: ' , materia ) count += 1 La materia es: mediciones La materia es: mecanismos La materia es: digitales La materia es: dibujo 3D La materia es: analogicas ********************* La materia es: mediciones La materia es: mecanismos La materia es: digitales La materia es: dibujo 3D La materia es: analogicas # Cosas adicionales que se pueden realizar con listas #obtener la suma de los valores contenidos en la lista valores = [ 1 , 5 , 3 , 9 , 6 , 3 , 5 , 8 , 7 , 2 , 6 , 7 , 2 , 5 , 2 , 3 , 5 , 4 , 5 ] suma = sum ( valores ) maximo = max ( valores ) minimo = min ( valores ) print ( \"La suma:\" , suma ) print ( \"El valor maximo:\" , maximo ) print ( \"El valor minimo:\" , minimo ) La suma: 88 El valor maximo: 9 El valor minimo: 1 Ejercicios Crear una lista de frutas: manzana , platano y melon . Posteriormete agregar sandia . Despues agregarle una lista mas que contenga papaya , kiwi y durazno . He imprimir la lista completa. Despues remover la sandia e imprimir el resultado. Recorrer la lista de frutas imprimiendo cada una (usando un ciclo, de preferencia usar for ). Crear una lista con sus calificaciones de Neumatica, y obtener el promedio. Se debe utilizar la funci\u00f3n sum para el procedimiento. Imprimir cual es la calificacion maxima y minima, usando las funciones max() y min() Eliminando elementos de la lista del Cuando queremos eliminar alg\u00fan elemento de una colecci\u00f3n se usa la palabra reservada del junto a la posici\u00f3n del elemento a eliminar. Sintaxis del colecci\u00f3n[posicion|key] # Eliminar elementos de una colecci\u00f3n materias = [ 'analogica' , 'digitales' , 'mediciones' ] print ( materias ) del materias [ 1 ] # Elimino el elemento que esta en la posici\u00f3n 1 de la colecci\u00f3n print ( materias ) alumnos = { 'carlos' :[ 8 , 8 , 9 ] , 'angel' :[ 8 , 8 , 8 ] } print ( alumnos ) del alumnos [ 'carlos' ] print ( alumnos ) ['analogica', 'digitales', 'mediciones'] ['analogica', 'mediciones'] {'carlos': [8, 8, 9], 'angel': [8, 8, 8]} {'angel': [8, 8, 8]} Funci\u00f3n len Los iteradores por default no te dicen cual es su largo, en muchas ocasiones necesitamos saber el largo para realizar ciertas tareas, para eso Python trae una funci\u00f3n que nos ayuda. Sintaxis len(iterator) : Devuelve el numero de los elementos de una colecci\u00f3n # Ejemplos de aplicacion de la funci\u00f3n len() string = 'hola' str_len = len ( string ) tupla = ( 5 , 9 , 3 , 6 , 'mensaje' ) tupla_len = len ( tupla ) lista = [ 1 , 2 , 3 , 6 , 'hola' ] lista_len = len ( lista ) diccionario = { 'key1' : 'valor1' , 'key2' : 'valor2' , 'key3' : 'valor3' } dic_len = len ( diccionario ) print ( 'largo de str' , str_len ) print ( 'largo de tupla' , tupla_len ) print ( 'largo de lista' , lista_len ) print ( 'largo de diccionario' , dic_len ) largo de str 4 largo de tupla 5 largo de lista 5 largo de diccionario 3 especialidades = [ 'mecatronica' , 'laboratorio' , 'contanbilidad' , 'mecanica' , 'electricidad' ] count = 0 while count < len ( especialidades ): especialidad = especialidades [ count ] print ( f 'Una de las especialidades es: { especialidad } ' ) count += 1 Una de las especialidades es: mecatronica Una de las especialidades es: laboratorio Una de las especialidades es: contanbilidad Una de las especialidades es: mecanica Una de las especialidades es: electricidad import random #Creando un pesudobot #declaramos una lista con las frases que queremos decir con nuestro bot hobbies = [ 'leer' , 'correr' , 'nadar' ] print ( 'Hola, me llamo MecaBot' ) print ( 'Cual es tu nombre' ) name = input () print ( f 'Es un gusto concerte { name } ' ) print ( 'Que lindo nombre tienes ;)' ) print ( 'Cual es tu hobby?' ) hobby = input () print ( f 'Wow!!!! que conincidencia, a mi tambien me encanta { hobby } ' ) print ( f 'Te cuento que tambien me gusta mucho { random . choice ( hobbies ) } ' ) Hola, me llamo MecaBot Cual es tu nombre Jose Es un gusto concerte Jose Que lindo nombre tienes ;) Cual es tu hobby? correr Wow!!!! que conincidencia, a mi tambien me encanta correr Te cuento que tambien me gusta mucho leer Diccionarios Son un tipo de colecci\u00f3n que su estructura es Llave - Valor . Para obtener el acceso al valor se hace a traves de la llave . La llave es unica y por lo tanto no se puede repetir. Sintaxis # Creacion de un diccionario diccionario = { 'llave1' : 'str' , 'llave2' : 5 'llave3' : True , 'llave4' : [ 1 , 2 , 6 , 'a' ] ...... } # Leyendo datos del diccionario variable1 = diccionario [ 'llave3' ] # True variable1 = diccionario . get ( 'llave3' ) # True, en caso que no exista devuelve None # Modificando valores existentes en el diccionario diccionario [ 'llave4' ] = [ 1 , 2 , 6 , 8 , 5 , 6 ] # Agregando valores nuevos al diccionario diccionario [ 'llave5' ] = 'un valor' calificaciones_neumatica = { 'gamas' : 9 , 'angelo' : 8 , 'dania' : 10 } print ( calificaciones_neumatica [ 'gamas' ] ) print ( calificaciones_neumatica [ 'angelo' ] ) print ( calificaciones_neumatica [ 'dania' ] ) calificaciones_neumatica [ 'leon' ] = 10 # agregando un valor al diccionario print ( calificaciones_neumatica [ 'leon' ]) calificaciones_neumatica [ 'angelo' ] = 7 # actualizo el valor de esa llave print ( calificaciones_neumatica [ 'angelo' ]) 9 8 10 10 7 for key in calificaciones_neumatica : print ( f 'con la llave: { key } , el valor es: { calificaciones_neumatica [ key ] } ' ) print ( '=======================' ) # Extraigo todas las llaves for key in calificaciones_neumatica . keys (): print ( key ) print ( '=======================' ) # Extraigo los valores for values in calificaciones_neumatica . values (): print ( values ) con la llave: gamas, el valor es: 9 con la llave: angelo, el valor es: 7 con la llave: dania, el valor es: 10 con la llave: leon, el valor es: 10 ======================= gamas angelo dania leon ======================= 9 7 10 10 Funci\u00f3n de ordenamiento ( sorted ) Esta funci\u00f3n ordena los elementos de una colecci\u00f3n. collection = [ 4 , 2 , 9 , 12 , 8 ] ordenado = sorted ( collection ) print ( ordenado ) [2,4,89,12] https://developers.google.com/edu/python/sorting Funci\u00f3n tuple() La funci\u00f3n tuple crea una instancia de una tupla vac\u00eda si no le pasamos ning\u00fan argumento. El argumento que puede recibir una colecci\u00f3n. mi_tupla = tuple () # crea una tupla vac\u00eda calificaciones = [ 8 , 6 , 9 , 6 , 8 ] tupla_calificaciones = tuple ( calificaciones ) type ( mi_tupla ) print ( calificaciones ) print ( tupla_calificaciones ) [8, 6, 9, 6, 8] (8, 6, 9, 6, 8) Funci\u00f3n list() La funci\u00f3n list crea una instancia de una lista vac\u00eda si no le pasamos ning\u00fan argumento. El argumento que puede recibir una colecci\u00f3n. lista_vacia = list () print ( lista_vacia ) tupla_calificaciones = ( 8 , 6 , 9 , 6 , 8 ) lista_calificaciones = list ( tupla_calificaciones ) print ( tupla_calificaciones ) print ( lista_calificaciones ) [] (8, 6, 9, 6, 8) [8, 6, 9, 6, 8] Funci\u00f3n dict() La funci\u00f3n dict crea una instancia de un diccionario vac\u00edo si no le pasamos ning\u00fan argumento. El argumento que puede recibir una colecci\u00f3n. mi_diccionario = dict () print ( mi_diccionario ) mi_diccionario [ 'hola' ] = 4 print ( mi_diccionario ) {} {'hola': 4} Funci\u00f3n enumerate() A esta funci\u00f3n se le pasa un iterable y me devuelve 2 valores, en la primera posici\u00f3n me pasa el indice y en la segunda posici\u00f3n me pasa el valor que tiene en ese momento el iterador. Sintaxis: index , value = enumerate ( iterador ) pokemons = [ 'pikachu' , 'bolbasor' , 'charizard' ] # Forma fea y horrible count = 0 for pokemon in pokemons : print ( f 'La posicion de { pokemon } es { count } ' ) count += 1 print ( '===================================' ) # La forma chida for index , value in enumerate ( pokemons ): print ( f 'La posicion de { value } es { index } ' ) La posici\u00f3n de pikachu es 0 La posici\u00f3n de bolbasor es 1 La posici\u00f3n de charizard es 2 =================================== La posici\u00f3n de pikachu es 0 La posici\u00f3n de bolbasor es 1 La posici\u00f3n de charizard es 2 Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Colecciones"},{"location":"capitulo_1/10_Colecciones/#colecciones","text":"Dentro de los lenguajes de programaci\u00f3n hay tipos datos que son estructuras que pueden contener m\u00e1s de un dato, a comparaci\u00f3n de los tipos de datos b\u00e1sicos, estas estructuras pueden contener muchos de esos datos b\u00e1sicos en su interior. Podr\u00edas decir que es una base de datos, pero esta solo existe mientras est\u00e1 la aplicaci\u00f3n en ejecuci\u00f3n, los datos son temporales. Las colecciones pueden contener cualquier tipo de dato, incluso mas colecciones. En python son los siguientes: Tuplas Tipo de dato Inmutable Listas (arrays) Tipo de Mutable Diccionarios Sets Nota: En este curso solo se cubrir\u00e1n las tuplas y las listas.","title":"Colecciones"},{"location":"capitulo_1/10_Colecciones/#tuplas","text":"Es una estructura de datos inmutables , una vez declarada no puede cambiar su contenido, ni agregar, ni eliminar, no modificar. Cada posici\u00f3n de los datos tiene un indice (index), el cual me ayuda a acceder a el. La primera posici\u00f3n siempre es 0 . La convenci\u00f3n de como declarar o nombrar a una lista o tupla es en plural Par\u00e1metros a destacar: index: Indice len: Longitud Sintaxis: nombre_tupla = ( dato1 , dato2 , ... , datoN ) # Declaraci\u00f3n de una tupla # Tiene 3 posiciones, comenzado en el 0. Largo de 3 calificaciones = ( 8 , 7 , 9 ) print ( calificaciones ) print ( type ( calificaciones ) ) # vamos a acceder a cada dato calificacion1 = calificaciones [ 0 ] calificacion2 = calificaciones [ 1 ] calificacion3 = calificaciones [ 2 ] print ( calificacion1 ) print ( calificacion2 ) print ( calificacion3 ) # Recorriendo tuplas con for y while for calificacion in calificaciones : print ( calificacion ) print ( '-------------------------' ) contador = 0 while contador < len ( calificaciones ): calificacion = calificaciones [ contador ] print ( calificacion ) contador += 1","title":"Tuplas"},{"location":"capitulo_1/10_Colecciones/#listas","text":"Es una colecci\u00f3n de elementos ordenados. En otro lenguajes es conocido como un array . A este tipo de colecci\u00f3n es Mutable, es decir, se le pueden agregar, eliminar, quitar, elementos. Podemos hacer diversas operaciones con ellos. Elementos que debemos tener en cuenta son: index : El indice o posici\u00f3n de cada elemento en la lista, recordar que todas comienzan en la posici\u00f3n 0. length : La longitud o cantidad de elementos que contiene la lista Sintaxis nombre_lista = [ elemento1 , elemento2 , elemento3 , .. , elementoN ]","title":"Listas"},{"location":"capitulo_1/10_Colecciones/#como-se-deben-nombrar-las-listas-buena-practica-o-convension","text":"El nombre de la varable que contanga una lista, debe ser en plural Puede contener la palabra **_list** o **_list**","title":"Como se deben nombrar las listas (buena practica o convension)"},{"location":"capitulo_1/10_Colecciones/#funciones-de-las-listas","text":"Las lista son un objeto, por lo tanto cuenta con diversos metodos los cuales nos ayudan a interactuar con ellos: append(element) : Adds an element at the end of the list clear() : Removes all the elements from the list copy() : Returns a copy of the list count(element) : Returns the number of elements with the specified value extend(list) : Add the elements of a list (or any iterable), to the end of the current list index(element[,start[,end]]) : Returns the index of the first element with the specified value insert(<position, element) : Adds an element at the specified position pop([index]) : Removes the element at the specified position remove(element) : Removes the first item with the specified value reverse() : Reverses the order of the list sort() : Sorts the list # Declaro una lista con unas materias materias = [ 'analogicas' , 'digitales' , 'mediciones' ] # lista de str print ( materias ) #agregamos una materia mas a la lista materias . append ( 'dibujo 3D' ) #imprimo la lista print ( materias ) #creo otra lista materias2 = [ 'neumatica' , 'mecanismos' ] # Extendemos la primer lista con la segunda materias . extend ( materias2 ) #imprimo la lista print ( materias ) #inserto una materia en la posici\u00f3n 2 materias . insert ( 2 , 'Matematicas' ) #imprimo la lista print ( materias ) #removemos el elemento 'Matematicas' materias . remove ( \"Matematicas\" ) #imprimo la lista print ( materias ) # Ordenamos las lista materias . sort () #imprimo la lista print ( materias ) # sacamos un elemento de la lista, si no se especifica saca al ultimo ultima_materia = materias . pop () #imprimo la lista print ( materias ) print ( 'ultima materia:' , ultima_materia ) # Invierto el orden de la lista materias . reverse () #imprimo la lista print ( materias ) ['analogicas', 'digitales', 'mediciones'] ['analogicas', 'digitales', 'mediciones', 'dibujo 3D'] ['analogicas', 'digitales', 'mediciones', 'dibujo 3D', 'neumatica', 'mecanismos'] ['analogicas', 'digitales', 'Matematicas', 'mediciones', 'dibujo 3D', 'neumatica', 'mecanismos'] ['analogicas', 'digitales', 'mediciones', 'dibujo 3D', 'neumatica', 'mecanismos'] ['analogicas', 'dibujo 3D', 'digitales', 'mecanismos', 'mediciones', 'neumatica'] ['analogicas', 'dibujo 3D', 'digitales', 'mecanismos', 'mediciones'] ultima materia: neumatica ['mediciones', 'mecanismos', 'digitales', 'dibujo 3D', 'analogicas']","title":"Funciones de las listas"},{"location":"capitulo_1/10_Colecciones/#obteniendo-los-datos-de-una-lista","text":"Sintaxis variable = nombre_lista [ posicion ] #Acceso a los datos de la lista materia1 = materias [ 0 ] materia2 = materias [ 1 ] materia3 = materias [ 2 ] materia4 = materias [ 3 ] print ( materia1 ) print ( materia2 ) print ( materia3 ) print ( materia4 ) mediciones mecanismos digitales dibujo 3D # Recorriendo una lista con FOR for materia in materias : print ( 'La materia es: ' , materia ) print ( '*********************' ) # Recorriendo una lista con WHILE count = 0 while count < len ( materias ): materia = materias [ count ] print ( 'La materia es: ' , materia ) count += 1 La materia es: mediciones La materia es: mecanismos La materia es: digitales La materia es: dibujo 3D La materia es: analogicas ********************* La materia es: mediciones La materia es: mecanismos La materia es: digitales La materia es: dibujo 3D La materia es: analogicas # Cosas adicionales que se pueden realizar con listas #obtener la suma de los valores contenidos en la lista valores = [ 1 , 5 , 3 , 9 , 6 , 3 , 5 , 8 , 7 , 2 , 6 , 7 , 2 , 5 , 2 , 3 , 5 , 4 , 5 ] suma = sum ( valores ) maximo = max ( valores ) minimo = min ( valores ) print ( \"La suma:\" , suma ) print ( \"El valor maximo:\" , maximo ) print ( \"El valor minimo:\" , minimo ) La suma: 88 El valor maximo: 9 El valor minimo: 1","title":"Obteniendo los datos de una lista"},{"location":"capitulo_1/10_Colecciones/#ejercicios","text":"Crear una lista de frutas: manzana , platano y melon . Posteriormete agregar sandia . Despues agregarle una lista mas que contenga papaya , kiwi y durazno . He imprimir la lista completa. Despues remover la sandia e imprimir el resultado. Recorrer la lista de frutas imprimiendo cada una (usando un ciclo, de preferencia usar for ). Crear una lista con sus calificaciones de Neumatica, y obtener el promedio. Se debe utilizar la funci\u00f3n sum para el procedimiento. Imprimir cual es la calificacion maxima y minima, usando las funciones max() y min()","title":"Ejercicios"},{"location":"capitulo_1/10_Colecciones/#eliminando-elementos-de-la-lista-del","text":"Cuando queremos eliminar alg\u00fan elemento de una colecci\u00f3n se usa la palabra reservada del junto a la posici\u00f3n del elemento a eliminar. Sintaxis del colecci\u00f3n[posicion|key] # Eliminar elementos de una colecci\u00f3n materias = [ 'analogica' , 'digitales' , 'mediciones' ] print ( materias ) del materias [ 1 ] # Elimino el elemento que esta en la posici\u00f3n 1 de la colecci\u00f3n print ( materias ) alumnos = { 'carlos' :[ 8 , 8 , 9 ] , 'angel' :[ 8 , 8 , 8 ] } print ( alumnos ) del alumnos [ 'carlos' ] print ( alumnos ) ['analogica', 'digitales', 'mediciones'] ['analogica', 'mediciones'] {'carlos': [8, 8, 9], 'angel': [8, 8, 8]} {'angel': [8, 8, 8]}","title":"Eliminando elementos de la lista del"},{"location":"capitulo_1/10_Colecciones/#funcion-len","text":"Los iteradores por default no te dicen cual es su largo, en muchas ocasiones necesitamos saber el largo para realizar ciertas tareas, para eso Python trae una funci\u00f3n que nos ayuda. Sintaxis len(iterator) : Devuelve el numero de los elementos de una colecci\u00f3n # Ejemplos de aplicacion de la funci\u00f3n len() string = 'hola' str_len = len ( string ) tupla = ( 5 , 9 , 3 , 6 , 'mensaje' ) tupla_len = len ( tupla ) lista = [ 1 , 2 , 3 , 6 , 'hola' ] lista_len = len ( lista ) diccionario = { 'key1' : 'valor1' , 'key2' : 'valor2' , 'key3' : 'valor3' } dic_len = len ( diccionario ) print ( 'largo de str' , str_len ) print ( 'largo de tupla' , tupla_len ) print ( 'largo de lista' , lista_len ) print ( 'largo de diccionario' , dic_len ) largo de str 4 largo de tupla 5 largo de lista 5 largo de diccionario 3 especialidades = [ 'mecatronica' , 'laboratorio' , 'contanbilidad' , 'mecanica' , 'electricidad' ] count = 0 while count < len ( especialidades ): especialidad = especialidades [ count ] print ( f 'Una de las especialidades es: { especialidad } ' ) count += 1 Una de las especialidades es: mecatronica Una de las especialidades es: laboratorio Una de las especialidades es: contanbilidad Una de las especialidades es: mecanica Una de las especialidades es: electricidad import random #Creando un pesudobot #declaramos una lista con las frases que queremos decir con nuestro bot hobbies = [ 'leer' , 'correr' , 'nadar' ] print ( 'Hola, me llamo MecaBot' ) print ( 'Cual es tu nombre' ) name = input () print ( f 'Es un gusto concerte { name } ' ) print ( 'Que lindo nombre tienes ;)' ) print ( 'Cual es tu hobby?' ) hobby = input () print ( f 'Wow!!!! que conincidencia, a mi tambien me encanta { hobby } ' ) print ( f 'Te cuento que tambien me gusta mucho { random . choice ( hobbies ) } ' ) Hola, me llamo MecaBot Cual es tu nombre Jose Es un gusto concerte Jose Que lindo nombre tienes ;) Cual es tu hobby? correr Wow!!!! que conincidencia, a mi tambien me encanta correr Te cuento que tambien me gusta mucho leer","title":"Funci\u00f3n len"},{"location":"capitulo_1/10_Colecciones/#diccionarios","text":"Son un tipo de colecci\u00f3n que su estructura es Llave - Valor . Para obtener el acceso al valor se hace a traves de la llave . La llave es unica y por lo tanto no se puede repetir. Sintaxis # Creacion de un diccionario diccionario = { 'llave1' : 'str' , 'llave2' : 5 'llave3' : True , 'llave4' : [ 1 , 2 , 6 , 'a' ] ...... } # Leyendo datos del diccionario variable1 = diccionario [ 'llave3' ] # True variable1 = diccionario . get ( 'llave3' ) # True, en caso que no exista devuelve None # Modificando valores existentes en el diccionario diccionario [ 'llave4' ] = [ 1 , 2 , 6 , 8 , 5 , 6 ] # Agregando valores nuevos al diccionario diccionario [ 'llave5' ] = 'un valor' calificaciones_neumatica = { 'gamas' : 9 , 'angelo' : 8 , 'dania' : 10 } print ( calificaciones_neumatica [ 'gamas' ] ) print ( calificaciones_neumatica [ 'angelo' ] ) print ( calificaciones_neumatica [ 'dania' ] ) calificaciones_neumatica [ 'leon' ] = 10 # agregando un valor al diccionario print ( calificaciones_neumatica [ 'leon' ]) calificaciones_neumatica [ 'angelo' ] = 7 # actualizo el valor de esa llave print ( calificaciones_neumatica [ 'angelo' ]) 9 8 10 10 7 for key in calificaciones_neumatica : print ( f 'con la llave: { key } , el valor es: { calificaciones_neumatica [ key ] } ' ) print ( '=======================' ) # Extraigo todas las llaves for key in calificaciones_neumatica . keys (): print ( key ) print ( '=======================' ) # Extraigo los valores for values in calificaciones_neumatica . values (): print ( values ) con la llave: gamas, el valor es: 9 con la llave: angelo, el valor es: 7 con la llave: dania, el valor es: 10 con la llave: leon, el valor es: 10 ======================= gamas angelo dania leon ======================= 9 7 10 10","title":"Diccionarios"},{"location":"capitulo_1/10_Colecciones/#funcion-de-ordenamiento-sorted","text":"Esta funci\u00f3n ordena los elementos de una colecci\u00f3n. collection = [ 4 , 2 , 9 , 12 , 8 ] ordenado = sorted ( collection ) print ( ordenado ) [2,4,89,12] https://developers.google.com/edu/python/sorting","title":"Funci\u00f3n de ordenamiento (sorted)"},{"location":"capitulo_1/10_Colecciones/#funcion-tuple","text":"La funci\u00f3n tuple crea una instancia de una tupla vac\u00eda si no le pasamos ning\u00fan argumento. El argumento que puede recibir una colecci\u00f3n. mi_tupla = tuple () # crea una tupla vac\u00eda calificaciones = [ 8 , 6 , 9 , 6 , 8 ] tupla_calificaciones = tuple ( calificaciones ) type ( mi_tupla ) print ( calificaciones ) print ( tupla_calificaciones ) [8, 6, 9, 6, 8] (8, 6, 9, 6, 8)","title":"Funci\u00f3n tuple()"},{"location":"capitulo_1/10_Colecciones/#funcion-list","text":"La funci\u00f3n list crea una instancia de una lista vac\u00eda si no le pasamos ning\u00fan argumento. El argumento que puede recibir una colecci\u00f3n. lista_vacia = list () print ( lista_vacia ) tupla_calificaciones = ( 8 , 6 , 9 , 6 , 8 ) lista_calificaciones = list ( tupla_calificaciones ) print ( tupla_calificaciones ) print ( lista_calificaciones ) [] (8, 6, 9, 6, 8) [8, 6, 9, 6, 8]","title":"Funci\u00f3n list()"},{"location":"capitulo_1/10_Colecciones/#funcion-dict","text":"La funci\u00f3n dict crea una instancia de un diccionario vac\u00edo si no le pasamos ning\u00fan argumento. El argumento que puede recibir una colecci\u00f3n. mi_diccionario = dict () print ( mi_diccionario ) mi_diccionario [ 'hola' ] = 4 print ( mi_diccionario ) {} {'hola': 4}","title":"Funci\u00f3n dict()"},{"location":"capitulo_1/10_Colecciones/#funcion-enumerate","text":"A esta funci\u00f3n se le pasa un iterable y me devuelve 2 valores, en la primera posici\u00f3n me pasa el indice y en la segunda posici\u00f3n me pasa el valor que tiene en ese momento el iterador. Sintaxis: index , value = enumerate ( iterador ) pokemons = [ 'pikachu' , 'bolbasor' , 'charizard' ] # Forma fea y horrible count = 0 for pokemon in pokemons : print ( f 'La posicion de { pokemon } es { count } ' ) count += 1 print ( '===================================' ) # La forma chida for index , value in enumerate ( pokemons ): print ( f 'La posicion de { value } es { index } ' ) La posici\u00f3n de pikachu es 0 La posici\u00f3n de bolbasor es 1 La posici\u00f3n de charizard es 2 =================================== La posici\u00f3n de pikachu es 0 La posici\u00f3n de bolbasor es 1 La posici\u00f3n de charizard es 2 Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Funci\u00f3n enumerate()"},{"location":"capitulo_1/11_Funciones/","text":"Funciones Bloque de c\u00f3digo reutilizable que puede ser llamado n cantidad de veces, debe ser corta, hacer una sola cosa (resuelve un problema) y hacerla bien. Como se nombran las funciones (Buenas practicas) El nombre es una acci\u00f3n , es decir un verbo El nombre debe ser en min\u00fasculas No tiene espacios el nombre, por lo tanto, son separados por guion bajo(_) Como escribo una funci\u00f3n y como la utilizo Sintaxis def name_function (): #body function #code block #code block #code block #code block Como la llamo a la funci\u00f3n: nombre_funcion () def elevar_cuadrado (): '''Esta funci\u00f3n eleva al cuadrado el numero 2''' cuadrado = 2 ** 2 print ( cuadrado ) def saludar (): ''' Esta funci\u00f3n manda un saludo ''' print ( 'Hola a todos!!! xD' ) saludar () elevar_cuadrado () Hola a todos!!! xD 4 Ejercicios: Realizar una funci\u00f3n que en su cuerpo realice la suma de dos n\u00fameros (estos est\u00e1n dados por ustedes), e imprimir el resultado, es decir, cuando se invoque Realizar una funci\u00f3n que en su cuerpo realice la impresi\u00f3n de 3 mensajes, los que ustedes quieran, y al invocarla que salgan esos mensajes Funciones con par\u00e1metros Las funciones en ocasiones necesitan par\u00e1metros para funcionar y poder realizar la acci\u00f3n. Parametro = Argumento = variable Como escribo una funci\u00f3n y como la utilizo Sintaxis def name_function ( argumeto1 , argumentos2 , ... , argumentosN ): #body function #code block #code block #code block #code block Como la llamo a la funci\u00f3n, coloco su nombre, abro parentesis y coloco los argumentos que necesita: nombre_funcion ( arg1 , arg2 ... ) # base ^ potencia -> 2^3 = 8 def potencia ( base : float , potencia : int ): resultado = base ** potencia print ( f ' { base } elevado a la { potencia } es: { resultado } ' ) def saludo2 ( nombre : str ): '''Funci\u00f3n que imprime un mensaje personalizado''' print ( f 'Hola { nombre } , que chido es conocerte!!!' ) saludo2 ( 'Axel' ) saludo2 ( 'Melani' ) saludo2 ( 'David' ) saludo2 ( 'Raul' ) potencia ( 2 , 3 ) potencia ( 3 , 3 ) Hola Axel, que chido es conocerte!!! Hola Melani, que chido es conocerte!!! Hola David, que chido es conocerte!!! Hola Raul, que chido es conocerte!!! 2 elevado a la 3 es: 8 3 elevado a la 3 es: 27 Ejercicios: Realizar una funci\u00f3n que realice el calculo del area del circulo, la funci\u00f3n recibe el radio. Ocupando las funciones de la librer\u00eda math . Realizar una funci\u00f3n que reciba el nombre y la edad, y que imprima un mensaje con estos datos, ejemplo: \"Hola 'alejandro' que buena onda que tengas '20' anios\" Funciones con par\u00e1metros por default u opcionales Las funciones en ocasiones necesitan par\u00e1metros para funcionar, pero no es necesario pasarle todos los par\u00e1metros requeridos, dado que pueden ser opcionales y poder realizar la accion. Parametro = Argumento = variable Como escribo una funci\u00f3n y como la utilizo Sintaxis def name_function ( argumeto1 = valor , argumentos2 = valor , ... , argumentosN = valorN ): #body function #code block #code block #code block #code block Como la llamo a la funci\u00f3n, coloco su nombre, abro parentesis y coloco los argumentos que necesita: nombre_funcion ( arg1 , ... [ arg2 ]) def saludo3 ( nombre : str = 'Desconocido' ): '''Funci\u00f3n que imprime un mensaje personalizado''' print ( f 'Hola { nombre } , que chido es conocerte!!!' ) def potencia2 ( base = 1 , potencia = 2 ): '''Por default eleva al cuadrado la base''' resultado = pow ( base , potencia ) print ( resultado ) def imprir_0_10 ( tope = 10 ): print ( '--------------------' ) for i in range ( tope + 1 ): print ( i ) print ( '--------------------' ) saludo3 () saludo3 ( 'Ricardo' ) potencia2 () potencia2 ( 3 ) potencia2 ( 3 , 3 ) potencia2 ( 3 , 4 ) imprir_0_10 ( 1 ) Hola Desconocido, que chido es conocerte!!! Hola Ricardo, que chido es conocerte!!! 1 9 27 81 -------------------- 0 1 -------------------- Ejercicios: Crear una funci\u00f3n que reciba la edad, pero la edad es opcion, por default que tenga el valor de 15, y que mande a imprimir si es menor o mayor de edad, pero si es 15, que imprima tambi\u00e9n, la frase \"Creo que no me pasaste la edad, tramposo!\" Crear una funci\u00f3n que calcule el area de cuadrados y rectangulos, la funci\u00f3n recibe 2 par\u00e1metros, la base y la altura, pero cuando es cuadrado solo recibe uno, por lo tanto, el segundo par\u00e1metros es opcional, el segundo par\u00e1metros por default es 0. Retornado valores de una funci\u00f3n En ocasiones necesitamos que la funci\u00f3n nos devuelva informaci\u00f3n, es decir, que realice la operacion y nos devuelva ese resultado, para ello ocupamos la palabra reservada return . El valor que devuelve normalmente lo debemos guardar. Como escribo una funci\u00f3n y como la utilizo Sintaxis def name_function ([ argumeto1 , argumentos2 = valor , ... , argumentosN ]): #body function #code block #code block #code block #code block return valor Como la llamo a la funci\u00f3n, coloco su nombre, abro parentesis y coloco los argumentos que necesita y ese resultado lo guardamos en una variable: resultado = nombre_funcion ([ arg1 , ... arg2 ]) from math import pi def mensaje_perzonalizado ( nombre : str ): mensaje = f 'Que onda { nombre } !!, la estamos pasando chido!!!' return mensaje def area_triangulo ( base , altura ): area = ( base * altura ) / 2 return area mensaje = mensaje_perzonalizado ( 'Pricila' ) print ( mensaje ) mensaje += ' vamos por la coca' print ( mensaje ) area_t = area_triangulo ( 3 , 7 ) print ( f 'El area del triangulo es: { area_t } ' ) Que onda Pricila!!, la estamos pasando chido!!! Que onda Pricila!!, la estamos pasando chido!!! vamos por la coca El area del triangulo es: 10.5 def operaciones_circulo ( radio , area = 'area' ): ''' Esta funci\u00f3n realiza la operacion del area o perimetro en funci\u00f3n de la variable area ''' if area == 'area' : return pi * pow ( radio , 2 ) else : return 2 * pi * radio print ( f \"El area es { operaciones_circulo ( 5 , 'area' ) } \" ) print ( f 'El perimetro es { operaciones_circulo ( 5 , \"perimetro\" ) } ' ) El area es 78.53981633974483 El perimetro es 31.41592653589793 Ejercicios: Crear una funci\u00f3n que calcule el promedio, pasandole los 3 parciales y te devuelve el resultado. Despues indicar si aprobo o esta en recursa. Crear las funciones de ley de ohm, una que calcule resistencia, corriente y otra voltaje, pasando el parametro necesario: Ejemplo de aplicacion: r = resistencia(10, 0.5) i = corriente(10, 1000) r = voltaje(10, 5) Funciones con par\u00e1metros nombrados Normalmente pasamos argumentos a las funciones con un orden orden establecido, y el orden que le coloco el programador, pero hay una forma de poder los argumentos en un orden cual sea, pero se debe especificar que argumento es. Nota: Los par\u00e1metros nombrados y tambi\u00e9n con valores por default van al final se colocan al final Como escribo una funci\u00f3n y como la utilizo. Sintaxis def name_function ( variable1 , variable2 = 'str' ): #body function #code block #code block #code block #code block return valor Como la llamo a la funci\u00f3n, coloco su nombre, abro parentesis y coloco los argumentos que necesita indicando su nombre con su valor, sin importar el orden: name_function ( variable2 = 'pokemon' , variable1 = 10 ) def create_pokemon ( name = 'unknown' , power = 0 ): pokemon = f 'Mi pokemo se llama { name } con un poder de { power } ' return pokemon print ( create_pokemon ( power = 25 , name = 'pikachu' )) Mi pokemo se llama pikachu con un poder de 25 Devolviendo varios valores TODO Recibiendo infinitos argumentos (*args, **kwargs) TODO Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Funciones"},{"location":"capitulo_1/11_Funciones/#funciones","text":"Bloque de c\u00f3digo reutilizable que puede ser llamado n cantidad de veces, debe ser corta, hacer una sola cosa (resuelve un problema) y hacerla bien.","title":"Funciones"},{"location":"capitulo_1/11_Funciones/#como-se-nombran-las-funciones-buenas-practicas","text":"El nombre es una acci\u00f3n , es decir un verbo El nombre debe ser en min\u00fasculas No tiene espacios el nombre, por lo tanto, son separados por guion bajo(_)","title":"Como se nombran las funciones (Buenas practicas)"},{"location":"capitulo_1/11_Funciones/#como-escribo-una-funcion-y-como-la-utilizo","text":"Sintaxis def name_function (): #body function #code block #code block #code block #code block Como la llamo a la funci\u00f3n: nombre_funcion () def elevar_cuadrado (): '''Esta funci\u00f3n eleva al cuadrado el numero 2''' cuadrado = 2 ** 2 print ( cuadrado ) def saludar (): ''' Esta funci\u00f3n manda un saludo ''' print ( 'Hola a todos!!! xD' ) saludar () elevar_cuadrado () Hola a todos!!! xD 4 Ejercicios: Realizar una funci\u00f3n que en su cuerpo realice la suma de dos n\u00fameros (estos est\u00e1n dados por ustedes), e imprimir el resultado, es decir, cuando se invoque Realizar una funci\u00f3n que en su cuerpo realice la impresi\u00f3n de 3 mensajes, los que ustedes quieran, y al invocarla que salgan esos mensajes","title":"Como escribo una funci\u00f3n y como la utilizo"},{"location":"capitulo_1/11_Funciones/#funciones-con-parametros","text":"Las funciones en ocasiones necesitan par\u00e1metros para funcionar y poder realizar la acci\u00f3n. Parametro = Argumento = variable Como escribo una funci\u00f3n y como la utilizo Sintaxis def name_function ( argumeto1 , argumentos2 , ... , argumentosN ): #body function #code block #code block #code block #code block Como la llamo a la funci\u00f3n, coloco su nombre, abro parentesis y coloco los argumentos que necesita: nombre_funcion ( arg1 , arg2 ... ) # base ^ potencia -> 2^3 = 8 def potencia ( base : float , potencia : int ): resultado = base ** potencia print ( f ' { base } elevado a la { potencia } es: { resultado } ' ) def saludo2 ( nombre : str ): '''Funci\u00f3n que imprime un mensaje personalizado''' print ( f 'Hola { nombre } , que chido es conocerte!!!' ) saludo2 ( 'Axel' ) saludo2 ( 'Melani' ) saludo2 ( 'David' ) saludo2 ( 'Raul' ) potencia ( 2 , 3 ) potencia ( 3 , 3 ) Hola Axel, que chido es conocerte!!! Hola Melani, que chido es conocerte!!! Hola David, que chido es conocerte!!! Hola Raul, que chido es conocerte!!! 2 elevado a la 3 es: 8 3 elevado a la 3 es: 27 Ejercicios: Realizar una funci\u00f3n que realice el calculo del area del circulo, la funci\u00f3n recibe el radio. Ocupando las funciones de la librer\u00eda math . Realizar una funci\u00f3n que reciba el nombre y la edad, y que imprima un mensaje con estos datos, ejemplo: \"Hola 'alejandro' que buena onda que tengas '20' anios\"","title":"Funciones con par\u00e1metros"},{"location":"capitulo_1/11_Funciones/#funciones-con-parametros-por-default-u-opcionales","text":"Las funciones en ocasiones necesitan par\u00e1metros para funcionar, pero no es necesario pasarle todos los par\u00e1metros requeridos, dado que pueden ser opcionales y poder realizar la accion. Parametro = Argumento = variable Como escribo una funci\u00f3n y como la utilizo Sintaxis def name_function ( argumeto1 = valor , argumentos2 = valor , ... , argumentosN = valorN ): #body function #code block #code block #code block #code block Como la llamo a la funci\u00f3n, coloco su nombre, abro parentesis y coloco los argumentos que necesita: nombre_funcion ( arg1 , ... [ arg2 ]) def saludo3 ( nombre : str = 'Desconocido' ): '''Funci\u00f3n que imprime un mensaje personalizado''' print ( f 'Hola { nombre } , que chido es conocerte!!!' ) def potencia2 ( base = 1 , potencia = 2 ): '''Por default eleva al cuadrado la base''' resultado = pow ( base , potencia ) print ( resultado ) def imprir_0_10 ( tope = 10 ): print ( '--------------------' ) for i in range ( tope + 1 ): print ( i ) print ( '--------------------' ) saludo3 () saludo3 ( 'Ricardo' ) potencia2 () potencia2 ( 3 ) potencia2 ( 3 , 3 ) potencia2 ( 3 , 4 ) imprir_0_10 ( 1 ) Hola Desconocido, que chido es conocerte!!! Hola Ricardo, que chido es conocerte!!! 1 9 27 81 -------------------- 0 1 -------------------- Ejercicios: Crear una funci\u00f3n que reciba la edad, pero la edad es opcion, por default que tenga el valor de 15, y que mande a imprimir si es menor o mayor de edad, pero si es 15, que imprima tambi\u00e9n, la frase \"Creo que no me pasaste la edad, tramposo!\" Crear una funci\u00f3n que calcule el area de cuadrados y rectangulos, la funci\u00f3n recibe 2 par\u00e1metros, la base y la altura, pero cuando es cuadrado solo recibe uno, por lo tanto, el segundo par\u00e1metros es opcional, el segundo par\u00e1metros por default es 0.","title":"Funciones con par\u00e1metros por default u opcionales"},{"location":"capitulo_1/11_Funciones/#retornado-valores-de-una-funcion","text":"En ocasiones necesitamos que la funci\u00f3n nos devuelva informaci\u00f3n, es decir, que realice la operacion y nos devuelva ese resultado, para ello ocupamos la palabra reservada return . El valor que devuelve normalmente lo debemos guardar. Como escribo una funci\u00f3n y como la utilizo Sintaxis def name_function ([ argumeto1 , argumentos2 = valor , ... , argumentosN ]): #body function #code block #code block #code block #code block return valor Como la llamo a la funci\u00f3n, coloco su nombre, abro parentesis y coloco los argumentos que necesita y ese resultado lo guardamos en una variable: resultado = nombre_funcion ([ arg1 , ... arg2 ]) from math import pi def mensaje_perzonalizado ( nombre : str ): mensaje = f 'Que onda { nombre } !!, la estamos pasando chido!!!' return mensaje def area_triangulo ( base , altura ): area = ( base * altura ) / 2 return area mensaje = mensaje_perzonalizado ( 'Pricila' ) print ( mensaje ) mensaje += ' vamos por la coca' print ( mensaje ) area_t = area_triangulo ( 3 , 7 ) print ( f 'El area del triangulo es: { area_t } ' ) Que onda Pricila!!, la estamos pasando chido!!! Que onda Pricila!!, la estamos pasando chido!!! vamos por la coca El area del triangulo es: 10.5 def operaciones_circulo ( radio , area = 'area' ): ''' Esta funci\u00f3n realiza la operacion del area o perimetro en funci\u00f3n de la variable area ''' if area == 'area' : return pi * pow ( radio , 2 ) else : return 2 * pi * radio print ( f \"El area es { operaciones_circulo ( 5 , 'area' ) } \" ) print ( f 'El perimetro es { operaciones_circulo ( 5 , \"perimetro\" ) } ' ) El area es 78.53981633974483 El perimetro es 31.41592653589793 Ejercicios: Crear una funci\u00f3n que calcule el promedio, pasandole los 3 parciales y te devuelve el resultado. Despues indicar si aprobo o esta en recursa. Crear las funciones de ley de ohm, una que calcule resistencia, corriente y otra voltaje, pasando el parametro necesario: Ejemplo de aplicacion: r = resistencia(10, 0.5) i = corriente(10, 1000) r = voltaje(10, 5)","title":"Retornado valores de una funci\u00f3n"},{"location":"capitulo_1/11_Funciones/#funciones-con-parametros-nombrados","text":"Normalmente pasamos argumentos a las funciones con un orden orden establecido, y el orden que le coloco el programador, pero hay una forma de poder los argumentos en un orden cual sea, pero se debe especificar que argumento es. Nota: Los par\u00e1metros nombrados y tambi\u00e9n con valores por default van al final se colocan al final Como escribo una funci\u00f3n y como la utilizo. Sintaxis def name_function ( variable1 , variable2 = 'str' ): #body function #code block #code block #code block #code block return valor Como la llamo a la funci\u00f3n, coloco su nombre, abro parentesis y coloco los argumentos que necesita indicando su nombre con su valor, sin importar el orden: name_function ( variable2 = 'pokemon' , variable1 = 10 ) def create_pokemon ( name = 'unknown' , power = 0 ): pokemon = f 'Mi pokemo se llama { name } con un poder de { power } ' return pokemon print ( create_pokemon ( power = 25 , name = 'pikachu' )) Mi pokemo se llama pikachu con un poder de 25","title":"Funciones con par\u00e1metros nombrados"},{"location":"capitulo_1/11_Funciones/#devolviendo-varios-valores","text":"TODO","title":"Devolviendo varios valores"},{"location":"capitulo_1/11_Funciones/#recibiendo-infinitos-argumentos-args-kwargs","text":"TODO Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Recibiendo infinitos argumentos (*args, **kwargs)"},{"location":"capitulo_1/12_Archivos/","text":"Archivos El manejo de archivos en Python es algo nativo, es decir, por default te da una utiler\u00eda para comenzar a trabajar con ellos. Esto significa que podemos abrir y leer el contenido de un archivo plano de una manera muy sencilla y r\u00e1pida. Funci\u00f3n open() Con solo abrir un archivo de Python podemos llamar a la funci\u00f3n open la cual le indicamos la ruta del archivo que queremos abrir y cargar su informaci\u00f3n, junto con el modo en que lo vamos a utilizar. Sintaxis: open ( ruta_archivo , modo , encoding ) Par\u00e1metros: ruta_archivo : Es la ruta del archivo que se va a carga, la ruta puede ser relativa o absoluta modo : El modo es como se manejara el archivo, los modos son: r : Read - Valor por default. Abre el archivo para leerlo. Lanza error en caso que no exista. w : Write - Abre el archivo para leerlo, en caso que no exista lo creara. a : Append - Abre el archivo y todo lo que vayamos a escribir se lo agregara. x : Create - Crear el archivo, lanza error en caso que exista. + : Read-Write - Indica que tenemos el modo lectura y que podemos escribir en \u00e9l. Modos adicionales: t : text (Valor por default)- Indica que el archivo es un texto plano. b : binario - Indica que es otro tipo de archivo, ejemplo: imagenes, archivos de word, excel, etc. encoding : Formato de codificacion de caracteres. Por default no tiene, pero en nuestro caso que hablamos espa\u00f1ol, es combeniente colocar utf-8 , con esto identifica acentos y todo lo relacionado al lenguaje. return file : Regresa un Objeto tipo archivo. Documentacion open() Metodos de los arhivos Los archivos tiene diversos metodos para manipular su contenido read([count]) : Lee todo el contenido del archivo y lo carga en memoria. Si indicamos el contador, solo lee esa cantidad de caracteres. readline() : Lee una sola linea del archivo. Por default comienza en la primera. readlines() : Crea una lista con el contenido de cada linea del archivo. write(data) : Escribe lo que le pasamos como argumento. seek(position) : Coloca el cursor en esa posici\u00f3n dentro del archivo. close() : Cierra el archivo. Esto siempre se debe hacer si se usa el m\u00e9todo open() solo. Nota: Contiene mas metodos, ir a la documentacion oficial de IO # Creando un archivo vac\u00edo mi_archivo = open ( 'arhivo.txt' , 'w' ) #aqui el archivo se crea y esta listo para escribir en \u00e9l mi_archivo . close () # tenemos que cerrar el archivo Bloque with Tenemos una palabra reservada with la cual nos facilita abrir un archivo y lo cierra en automatico al salir del bloque. Es decir, with toma la gestion de los archivos y nosotros nos enfocamos en utilizar la informaci\u00f3n obtenida de \u00e9l. Lo mas recomendable es usar la palabra with con los archivos. Sintaxis: with EXPRESSION as TARGET : SUITE # Aplicado a archivos with open ( 'ruta' , 'modo' ) as nombre_variable : # codigo para manipular el archivo Documentacion de The with statement Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Archivos"},{"location":"capitulo_1/12_Archivos/#archivos","text":"El manejo de archivos en Python es algo nativo, es decir, por default te da una utiler\u00eda para comenzar a trabajar con ellos. Esto significa que podemos abrir y leer el contenido de un archivo plano de una manera muy sencilla y r\u00e1pida.","title":"Archivos"},{"location":"capitulo_1/12_Archivos/#funcion-open","text":"Con solo abrir un archivo de Python podemos llamar a la funci\u00f3n open la cual le indicamos la ruta del archivo que queremos abrir y cargar su informaci\u00f3n, junto con el modo en que lo vamos a utilizar. Sintaxis: open ( ruta_archivo , modo , encoding ) Par\u00e1metros: ruta_archivo : Es la ruta del archivo que se va a carga, la ruta puede ser relativa o absoluta modo : El modo es como se manejara el archivo, los modos son: r : Read - Valor por default. Abre el archivo para leerlo. Lanza error en caso que no exista. w : Write - Abre el archivo para leerlo, en caso que no exista lo creara. a : Append - Abre el archivo y todo lo que vayamos a escribir se lo agregara. x : Create - Crear el archivo, lanza error en caso que exista. + : Read-Write - Indica que tenemos el modo lectura y que podemos escribir en \u00e9l. Modos adicionales: t : text (Valor por default)- Indica que el archivo es un texto plano. b : binario - Indica que es otro tipo de archivo, ejemplo: imagenes, archivos de word, excel, etc. encoding : Formato de codificacion de caracteres. Por default no tiene, pero en nuestro caso que hablamos espa\u00f1ol, es combeniente colocar utf-8 , con esto identifica acentos y todo lo relacionado al lenguaje. return file : Regresa un Objeto tipo archivo. Documentacion open()","title":"Funci\u00f3n open()"},{"location":"capitulo_1/12_Archivos/#metodos-de-los-arhivos","text":"Los archivos tiene diversos metodos para manipular su contenido read([count]) : Lee todo el contenido del archivo y lo carga en memoria. Si indicamos el contador, solo lee esa cantidad de caracteres. readline() : Lee una sola linea del archivo. Por default comienza en la primera. readlines() : Crea una lista con el contenido de cada linea del archivo. write(data) : Escribe lo que le pasamos como argumento. seek(position) : Coloca el cursor en esa posici\u00f3n dentro del archivo. close() : Cierra el archivo. Esto siempre se debe hacer si se usa el m\u00e9todo open() solo. Nota: Contiene mas metodos, ir a la documentacion oficial de IO # Creando un archivo vac\u00edo mi_archivo = open ( 'arhivo.txt' , 'w' ) #aqui el archivo se crea y esta listo para escribir en \u00e9l mi_archivo . close () # tenemos que cerrar el archivo","title":"Metodos de los arhivos"},{"location":"capitulo_1/12_Archivos/#bloque-with","text":"Tenemos una palabra reservada with la cual nos facilita abrir un archivo y lo cierra en automatico al salir del bloque. Es decir, with toma la gestion de los archivos y nosotros nos enfocamos en utilizar la informaci\u00f3n obtenida de \u00e9l. Lo mas recomendable es usar la palabra with con los archivos. Sintaxis: with EXPRESSION as TARGET : SUITE # Aplicado a archivos with open ( 'ruta' , 'modo' ) as nombre_variable : # codigo para manipular el archivo Documentacion de The with statement Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Bloque with"},{"location":"capitulo_1/13_Strings/","text":"Strings (str) En esta secci\u00f3n veremos con mas detalle la manipulacion de strings . La manipulacion de string a detalle es sumamente util para separarlo, saber si contiene alguna letra, palabra u oraci\u00f3n. Recordemos que todo en python es un objeto y al ser un objeto contienen por default muchos m\u00e9todos con los cuales podemos operar ese string . Convertir a min\u00fasculas (lower) Una funci\u00f3n que nos fascilita es convertir todo el string a min\u00fasculas. Ignora simbolos y n\u00fameros. lower(): Converts a string into lower case # Todas la letras las pasara a min\u00fasculas mensaje = \"Hola Como ESTAS\" minuscula = mensaje . lower () print ( minuscula ) hola como estas Convertir a May\u00fasculas (upper) Una funci\u00f3n que nos facilita es convertir todo el string a may\u00fasculas. Ignora s\u00edmbolos y n\u00fameros. upper(): Converts a string into upper case # Todas la letras las pasara a may\u00fasculas mensaje = \"Hola Como ESTAS\" upper = mensaje . upper () print ( upper ) HOLA COMO ESTAS Convertir a May\u00fasculas (capitalize) Una funci\u00f3n que nos facilit\u00e1 es convertir solo la primer letra a may\u00fasculas, el resto a min\u00fasculas. Esto es \u00fatil para cuando queremos que una oraci\u00f3n inicie en may\u00fasculas o palabra. Ignora s\u00edmbolos y n\u00fameros. capitalize(): Converts the first character to upper case # Todas la letras las pasara a may\u00fasculas mensaje = \"hola Como ESTAS\" capital = mensaje . capitalize () print ( capital ) Hola como estas Contador de palabras (count) Los string cuenta con m\u00e9todo el cual nos ayuda directamente a saber cuantas veces se encuentra una palabra dentro de ese string, debe ser igual la palabra a la que se le paso. count(value, start, end): method returns the number of times a specified value appears in the string Par\u00e1metros: value : Required. A String. The string to value to search for start : Optional. An Integer. The position to start the search. Default is 0 end : Optional. An Integer. The position to end the search. Default is the end of the string phrase = \"Mecatronica es la mejor especialidad, siendo mecatronica una especialidad muy amplica. mecatronica 100%\" count = phrase . count ( \"mecatronica\" ) print ( f 'Veces que sale la palabra \\\" mecatronica \\\" es: { count } ' ) Veces que sale la palabra \"mecatronica\" es: 2 Es o no es un En ocasiones queremos conocer si un string es o esta en cierta forma. isdigit() : Returns True if all characters in the string are digits islower() : Returns True if all characters in the string are lower case isnumeric() : Returns True if all characters in the string are numeric isspace() : Returns True if all characters in the string are whitespaces isupper() : Returns True if all characters in the string are upper case print ( f 'Es un n\u00famero: { \"4\" . isdigit () } ' ) print ( f 'Es un n\u00famero: { \"4\" . isnumeric () } ' ) print ( f 'Esta en min\u00fasculas: { \"hola\" . islower () } ' ) print ( f 'Esta en may\u00fasculas: { \"HOLA\" . isupper () } ' ) print ( f 'Son espacios: { \" \" . isspace () } ' ) Es un n\u00famero: True Es un n\u00famero: True Esta en min\u00fasculas: True Esta en may\u00fasculas: True Son espacios: True endswith() Returns true if the string ends with the specified value title() Converts the first character of each word to upper case find() Searches the string for a specified value and returns the position of where it was found index() Searches the string for a specified value and returns the position of where it was found format() Formats specified values in a string join() Joins the elements of an iterable to the end of the string lstrip() Returns a left trim version of the string replace() Returns a string where a specified value is replaced with a specified value rfind() Searches the string for a specified value and returns the last position of where it was found rindex() Searches the string for a specified value and returns the last position of where it was found rsplit() Splits the string at the specified separator, and returns a list rstrip() Returns a right trim version of the string split() Splits the string at the specified separator, and returns a list splitlines() Splits the string at line breaks and returns a list startswith() Returns true if the string starts with the specified value strip() Returns a trimmed version of the string https://www.w3schools.com/python/python_ref_string.asp Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Strings (str)"},{"location":"capitulo_1/13_Strings/#strings-str","text":"En esta secci\u00f3n veremos con mas detalle la manipulacion de strings . La manipulacion de string a detalle es sumamente util para separarlo, saber si contiene alguna letra, palabra u oraci\u00f3n. Recordemos que todo en python es un objeto y al ser un objeto contienen por default muchos m\u00e9todos con los cuales podemos operar ese string .","title":"Strings (str)"},{"location":"capitulo_1/13_Strings/#convertir-a-minusculas-lower","text":"Una funci\u00f3n que nos fascilita es convertir todo el string a min\u00fasculas. Ignora simbolos y n\u00fameros. lower(): Converts a string into lower case # Todas la letras las pasara a min\u00fasculas mensaje = \"Hola Como ESTAS\" minuscula = mensaje . lower () print ( minuscula ) hola como estas","title":"Convertir a min\u00fasculas (lower)"},{"location":"capitulo_1/13_Strings/#convertir-a-mayusculas-upper","text":"Una funci\u00f3n que nos facilita es convertir todo el string a may\u00fasculas. Ignora s\u00edmbolos y n\u00fameros. upper(): Converts a string into upper case # Todas la letras las pasara a may\u00fasculas mensaje = \"Hola Como ESTAS\" upper = mensaje . upper () print ( upper ) HOLA COMO ESTAS","title":"Convertir a May\u00fasculas (upper)"},{"location":"capitulo_1/13_Strings/#convertir-a-mayusculas-capitalize","text":"Una funci\u00f3n que nos facilit\u00e1 es convertir solo la primer letra a may\u00fasculas, el resto a min\u00fasculas. Esto es \u00fatil para cuando queremos que una oraci\u00f3n inicie en may\u00fasculas o palabra. Ignora s\u00edmbolos y n\u00fameros. capitalize(): Converts the first character to upper case # Todas la letras las pasara a may\u00fasculas mensaje = \"hola Como ESTAS\" capital = mensaje . capitalize () print ( capital ) Hola como estas","title":"Convertir a May\u00fasculas (capitalize)"},{"location":"capitulo_1/13_Strings/#contador-de-palabras-count","text":"Los string cuenta con m\u00e9todo el cual nos ayuda directamente a saber cuantas veces se encuentra una palabra dentro de ese string, debe ser igual la palabra a la que se le paso. count(value, start, end): method returns the number of times a specified value appears in the string Par\u00e1metros: value : Required. A String. The string to value to search for start : Optional. An Integer. The position to start the search. Default is 0 end : Optional. An Integer. The position to end the search. Default is the end of the string phrase = \"Mecatronica es la mejor especialidad, siendo mecatronica una especialidad muy amplica. mecatronica 100%\" count = phrase . count ( \"mecatronica\" ) print ( f 'Veces que sale la palabra \\\" mecatronica \\\" es: { count } ' ) Veces que sale la palabra \"mecatronica\" es: 2","title":"Contador de palabras (count)"},{"location":"capitulo_1/13_Strings/#es-o-no-es-un","text":"En ocasiones queremos conocer si un string es o esta en cierta forma. isdigit() : Returns True if all characters in the string are digits islower() : Returns True if all characters in the string are lower case isnumeric() : Returns True if all characters in the string are numeric isspace() : Returns True if all characters in the string are whitespaces isupper() : Returns True if all characters in the string are upper case print ( f 'Es un n\u00famero: { \"4\" . isdigit () } ' ) print ( f 'Es un n\u00famero: { \"4\" . isnumeric () } ' ) print ( f 'Esta en min\u00fasculas: { \"hola\" . islower () } ' ) print ( f 'Esta en may\u00fasculas: { \"HOLA\" . isupper () } ' ) print ( f 'Son espacios: { \" \" . isspace () } ' ) Es un n\u00famero: True Es un n\u00famero: True Esta en min\u00fasculas: True Esta en may\u00fasculas: True Son espacios: True endswith() Returns true if the string ends with the specified value title() Converts the first character of each word to upper case find() Searches the string for a specified value and returns the position of where it was found index() Searches the string for a specified value and returns the position of where it was found format() Formats specified values in a string join() Joins the elements of an iterable to the end of the string lstrip() Returns a left trim version of the string replace() Returns a string where a specified value is replaced with a specified value rfind() Searches the string for a specified value and returns the last position of where it was found rindex() Searches the string for a specified value and returns the last position of where it was found rsplit() Splits the string at the specified separator, and returns a list rstrip() Returns a right trim version of the string split() Splits the string at the specified separator, and returns a list splitlines() Splits the string at line breaks and returns a list startswith() Returns true if the string starts with the specified value strip() Returns a trimmed version of the string https://www.w3schools.com/python/python_ref_string.asp Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Es o no es un"},{"location":"capitulo_1/14_Modulos/","text":"M\u00f3dulos Son funciones que existen dentro de Python para realizar alguna cosa que necesitemos o sean comunes para resolver alg\u00fan problema. Muchos m\u00f3dulos se deben importar, dado que no est\u00e1n disponible con solo invocar la funci\u00f3n a ocupar. M\u00f3dulo random El m\u00f3dulo random genera un n\u00famero al azar 0.0 <= x < 1.0. Pero tiene varias funciones que nos pueden ayudar dependiendo que vayamos a realizar. Tienes muchas funciones \u00fatiles, pero aqu\u00ed solo se mencionan algunas, para m\u00e1s detalles ir a la documentaci\u00f3n oficial: random() : Retorna un n\u00famero random entre 0.0 a 1.0 randrange(value) : Devuelve un n\u00famero entero entre 0 al valor dado menos 1. choice(list): Se le pasa una lista y retorna alg\u00fan valor de ah\u00ed al azar randint(min, max) : Retorna un valor entero aleatorio entre el m\u00ednimo y m\u00e1ximo que se le indique Documentaci\u00f3n oficial de random import random # siempre que queremos usar el modulo random lo debemos importarlo numero_random = random . random () # esto nos regresa un numero al azar que puede ir de 0.0 a 1.0 print ( numero_random ) print ( '----------------------------------------' ) count = 0 while count < 10 : print ( random . random ()) count += 1 0.9434806652958366 ---------------------------------------- 0.9418708971399746 0.24762891571065693 0.9271427494593301 0.6822774976172582 0.23363131810814664 0.7457655424264042 0.4618611306880258 0.8803150650138123 0.7359502614366726 0.28509275831478165 #nos devuelve un valor entero de 0 al valor que le dimos - 1 numero_en_rango = random . randrange ( 101 ) print ( numero_en_rango ) 27 # nos devuelve un valor en el rango de 5 (min) al 15 (max) numero_rango_min_max = random . randint ( 3 , 15 ) print ( numero_rango_min_max ) 8 # con esta funci\u00f3n le podemos pasar una lista y devolvera un valor de esa lista al azar lista = [ \"hola\" , \"mensaje\" , \"texto\" , \"mecatronica\" , \"cbtis85\" ] valor = random . choice ( lista ) print ( valor ) mecatronica #Juego de adivina el numero vBTV import random number = random . randint ( 1 , 10 ) print ( \"Juego de adivina el numero\" ) print ( \"El numero esta entre 1 y 10\" ) print ( \"Tienes 5 intentos\" ) print ( \"Mucha suerte!!!!\" ) intentos = 0 while True : nuevo = int ( input ( \"Dame un valor: \" )) if nuevo < number : print ( \"El numero es MAYOR\" ) intentos += 1 elif nuevo > number : print ( \"El numero es MENOR\" ) intentos += 1 else : print ( \"Felicidades le has atinado\" ) break print ( f \"Llevas { intentos } intentos\" ) if intentos == 5 : print ( \"Perdiste, lastima margarito T.T\" ) break Juego de adivina el numero El numero esta entre 1 y 10 Tienes 5 intentos Mucha suerte!!!! Dame un valor: 5 Felicidades le has atinado #Juego de adivina el numero vATM import random num_random = random . randint ( 1 , 10 ) #genera un numero al azar en ese rango print ( \"JUEGO + ADIVINA EL NUMERO\" ) print ( \"El numero esta entre 1 al 10\" ) print ( \"Tienes solo 5 intentos\" ) print ( \"Mucha suerte >:) \" ) intentos = 0 while True : number = int ( input ( \"Dar el numero: \" )) if number < num_random : print ( \"El numero es mayor\" ) intentos += 1 elif number > num_random : print ( \"El numero es menor\" ) intentos += 1 else : print ( \"Felicidades le atinaste :D\" ) break if intentos == 5 : print ( f \"Fallaste { intentos } veces\" ) print ( f \"EL numero era: { num_random } \" ) print ( f \"Lastima margarito\" ) break JUEGO + ADIVINA EL NUMERO El numero esta entre 1 al 10 Tienes solo 5 intentos Mucha suerte >:) Dar el numero: 5 El numero es mayor Dar el numero: 6 Felicidades le atinaste :D M\u00f3dulo math Este m\u00f3dulo es enfocado a matem\u00e1ticas, tiene funciones que nos facilitan realizar c\u00e1lculos complejos. ceil(x) : Retorna un entero. Redondeo hacia abajo floor(x) : Retorna un entero. Redondeo hacia arriba. sqrt(x) : Raiz cuadrada de x . pow(base, potencia) : es equivalente a base ** potencia = base ^ potencia cos(x) : coseno de x en radianes sin(x) : seno de x en radianes tan(x) : tangente de x en radianes pi : Devuelve el valor de PI = \\(\\pi\\) = 3.141592... e : Devuelve el valor de E (Euler) = 2.718281... Documentaci\u00f3n oficial de math # Redondeos import math valor = 2.625 r_arriba = math . ceil ( valor ) r_abajo = math . floor ( valor ) print ( f 'Sin redondeo { valor } ' ) print ( f 'Redondeo hacia abajo { r_abajo } ' ) print ( f 'Redondeo hacia arriba { r_arriba } ' ) Sin redondeo 2.625 Redondeo hacia abajo 2 Redondeo hacia arriba 3 # Potencia y ra\u00edz cuadrada potencia = math . pow ( 2 , 3 ) # 2^3 = 2**3 raiz = math . sqrt ( 25 ) # raiz cuadrada de 25 print ( f 'Elevando 2 al cubo es: { potencia } ' ) print ( f 'La raiz cuadrada de 25 es: { raiz } ' ) Elevando 2 al cubo es: 8.0 La raiz cuadrada de 25 es: 5.0 # Funciones trigonometricas, siempre se dan los resultado en radianes, # si se quiere manejar grados tenemos que hacer la conversion coseno = math . cos ( 45 ) seno = math . sin ( 45 ) tangente = math . tan ( 45 ) print ( f 'Conseno de 30 es: { coseno } ' ) print ( f 'Seno de 30 es: { seno } ' ) print ( f 'Tangete de de 30 es: { tangente } ' ) Conseno de 30 es: 0.5253219888177297 Seno de 30 es: 0.8509035245341184 Tangete de de 30 es: 1.6197751905438615 # Normalmente todos los lenguajes tiene una libreria matematica y traen las constantes matematicas comunes print ( f 'Valor de pi: { math . pi } ' ) print ( f 'Valor de Euler: { math . e } ' ) Valor de pi: 3.141592653589793 Valor de Euler: 2.718281828459045 La funci\u00f3n sum La funci\u00f3n sum es una utilidad, para realizar una sumatoria r\u00e1pida para obtener la suma de una lista sin tener que hacerlo a mano, Python trae esta utilidad para mayor comodidad. Sintaxis: sum ( list ) Par\u00e1metros: list : es una lista de n\u00fameros, pueden ser enteros o flotantes return : El resultado de la sumatoria de los valores de la lista # Tenemos a disposicion una funci\u00f3n llamada sum numeros = [ 1.6 , 2.6 , 3 , 6 , 7 , 5 , 85 , 5 , 87 ] sumatoria = sum ( numeros ) print ( f 'Resultado de la suma: { sumatoria } ' ) Resultado de la suma: 202.2 Funciones disponibles por default Cuando iniciamos un programa en python, por default ya contamos con varias funciones disponibles para utilizarlas. Para ver las funciones disponibles ir a la Documentacion de python \"Funciones\" Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"M\u00f3dulos"},{"location":"capitulo_1/14_Modulos/#modulos","text":"Son funciones que existen dentro de Python para realizar alguna cosa que necesitemos o sean comunes para resolver alg\u00fan problema. Muchos m\u00f3dulos se deben importar, dado que no est\u00e1n disponible con solo invocar la funci\u00f3n a ocupar.","title":"M\u00f3dulos"},{"location":"capitulo_1/14_Modulos/#modulo-random","text":"El m\u00f3dulo random genera un n\u00famero al azar 0.0 <= x < 1.0. Pero tiene varias funciones que nos pueden ayudar dependiendo que vayamos a realizar. Tienes muchas funciones \u00fatiles, pero aqu\u00ed solo se mencionan algunas, para m\u00e1s detalles ir a la documentaci\u00f3n oficial: random() : Retorna un n\u00famero random entre 0.0 a 1.0 randrange(value) : Devuelve un n\u00famero entero entre 0 al valor dado menos 1. choice(list): Se le pasa una lista y retorna alg\u00fan valor de ah\u00ed al azar randint(min, max) : Retorna un valor entero aleatorio entre el m\u00ednimo y m\u00e1ximo que se le indique Documentaci\u00f3n oficial de random import random # siempre que queremos usar el modulo random lo debemos importarlo numero_random = random . random () # esto nos regresa un numero al azar que puede ir de 0.0 a 1.0 print ( numero_random ) print ( '----------------------------------------' ) count = 0 while count < 10 : print ( random . random ()) count += 1 0.9434806652958366 ---------------------------------------- 0.9418708971399746 0.24762891571065693 0.9271427494593301 0.6822774976172582 0.23363131810814664 0.7457655424264042 0.4618611306880258 0.8803150650138123 0.7359502614366726 0.28509275831478165 #nos devuelve un valor entero de 0 al valor que le dimos - 1 numero_en_rango = random . randrange ( 101 ) print ( numero_en_rango ) 27 # nos devuelve un valor en el rango de 5 (min) al 15 (max) numero_rango_min_max = random . randint ( 3 , 15 ) print ( numero_rango_min_max ) 8 # con esta funci\u00f3n le podemos pasar una lista y devolvera un valor de esa lista al azar lista = [ \"hola\" , \"mensaje\" , \"texto\" , \"mecatronica\" , \"cbtis85\" ] valor = random . choice ( lista ) print ( valor ) mecatronica #Juego de adivina el numero vBTV import random number = random . randint ( 1 , 10 ) print ( \"Juego de adivina el numero\" ) print ( \"El numero esta entre 1 y 10\" ) print ( \"Tienes 5 intentos\" ) print ( \"Mucha suerte!!!!\" ) intentos = 0 while True : nuevo = int ( input ( \"Dame un valor: \" )) if nuevo < number : print ( \"El numero es MAYOR\" ) intentos += 1 elif nuevo > number : print ( \"El numero es MENOR\" ) intentos += 1 else : print ( \"Felicidades le has atinado\" ) break print ( f \"Llevas { intentos } intentos\" ) if intentos == 5 : print ( \"Perdiste, lastima margarito T.T\" ) break Juego de adivina el numero El numero esta entre 1 y 10 Tienes 5 intentos Mucha suerte!!!! Dame un valor: 5 Felicidades le has atinado #Juego de adivina el numero vATM import random num_random = random . randint ( 1 , 10 ) #genera un numero al azar en ese rango print ( \"JUEGO + ADIVINA EL NUMERO\" ) print ( \"El numero esta entre 1 al 10\" ) print ( \"Tienes solo 5 intentos\" ) print ( \"Mucha suerte >:) \" ) intentos = 0 while True : number = int ( input ( \"Dar el numero: \" )) if number < num_random : print ( \"El numero es mayor\" ) intentos += 1 elif number > num_random : print ( \"El numero es menor\" ) intentos += 1 else : print ( \"Felicidades le atinaste :D\" ) break if intentos == 5 : print ( f \"Fallaste { intentos } veces\" ) print ( f \"EL numero era: { num_random } \" ) print ( f \"Lastima margarito\" ) break JUEGO + ADIVINA EL NUMERO El numero esta entre 1 al 10 Tienes solo 5 intentos Mucha suerte >:) Dar el numero: 5 El numero es mayor Dar el numero: 6 Felicidades le atinaste :D","title":"M\u00f3dulo random"},{"location":"capitulo_1/14_Modulos/#modulo-math","text":"Este m\u00f3dulo es enfocado a matem\u00e1ticas, tiene funciones que nos facilitan realizar c\u00e1lculos complejos. ceil(x) : Retorna un entero. Redondeo hacia abajo floor(x) : Retorna un entero. Redondeo hacia arriba. sqrt(x) : Raiz cuadrada de x . pow(base, potencia) : es equivalente a base ** potencia = base ^ potencia cos(x) : coseno de x en radianes sin(x) : seno de x en radianes tan(x) : tangente de x en radianes pi : Devuelve el valor de PI = \\(\\pi\\) = 3.141592... e : Devuelve el valor de E (Euler) = 2.718281... Documentaci\u00f3n oficial de math # Redondeos import math valor = 2.625 r_arriba = math . ceil ( valor ) r_abajo = math . floor ( valor ) print ( f 'Sin redondeo { valor } ' ) print ( f 'Redondeo hacia abajo { r_abajo } ' ) print ( f 'Redondeo hacia arriba { r_arriba } ' ) Sin redondeo 2.625 Redondeo hacia abajo 2 Redondeo hacia arriba 3 # Potencia y ra\u00edz cuadrada potencia = math . pow ( 2 , 3 ) # 2^3 = 2**3 raiz = math . sqrt ( 25 ) # raiz cuadrada de 25 print ( f 'Elevando 2 al cubo es: { potencia } ' ) print ( f 'La raiz cuadrada de 25 es: { raiz } ' ) Elevando 2 al cubo es: 8.0 La raiz cuadrada de 25 es: 5.0 # Funciones trigonometricas, siempre se dan los resultado en radianes, # si se quiere manejar grados tenemos que hacer la conversion coseno = math . cos ( 45 ) seno = math . sin ( 45 ) tangente = math . tan ( 45 ) print ( f 'Conseno de 30 es: { coseno } ' ) print ( f 'Seno de 30 es: { seno } ' ) print ( f 'Tangete de de 30 es: { tangente } ' ) Conseno de 30 es: 0.5253219888177297 Seno de 30 es: 0.8509035245341184 Tangete de de 30 es: 1.6197751905438615 # Normalmente todos los lenguajes tiene una libreria matematica y traen las constantes matematicas comunes print ( f 'Valor de pi: { math . pi } ' ) print ( f 'Valor de Euler: { math . e } ' ) Valor de pi: 3.141592653589793 Valor de Euler: 2.718281828459045","title":"M\u00f3dulo math"},{"location":"capitulo_1/14_Modulos/#la-funcion-sum","text":"La funci\u00f3n sum es una utilidad, para realizar una sumatoria r\u00e1pida para obtener la suma de una lista sin tener que hacerlo a mano, Python trae esta utilidad para mayor comodidad. Sintaxis: sum ( list ) Par\u00e1metros: list : es una lista de n\u00fameros, pueden ser enteros o flotantes return : El resultado de la sumatoria de los valores de la lista # Tenemos a disposicion una funci\u00f3n llamada sum numeros = [ 1.6 , 2.6 , 3 , 6 , 7 , 5 , 85 , 5 , 87 ] sumatoria = sum ( numeros ) print ( f 'Resultado de la suma: { sumatoria } ' ) Resultado de la suma: 202.2","title":"La funci\u00f3n sum"},{"location":"capitulo_1/14_Modulos/#funciones-disponibles-por-default","text":"Cuando iniciamos un programa en python, por default ya contamos con varias funciones disponibles para utilizarlas. Para ver las funciones disponibles ir a la Documentacion de python \"Funciones\" Realizado por Docente: Alejandro Leyva Mecatr\u00f3nica 85 fb/mecatronica85","title":"Funciones disponibles por default"},{"location":"capitulo_2/","text":"GUI con Python - Tkinter En esta secci\u00f3n estaremos viendo como realizar interfaz gr\u00e1fica con Python, utilizando la librer\u00eda nativa Tkinter . La cual viene por default cuando instalamos el lenguaje Python. Mapa del sitio Fuentes: https://docs.python.org/3/library/tk.html https://docs.python.org/3/library/tkinter.html","title":"GUI con Python"},{"location":"capitulo_2/#gui-con-python-tkinter","text":"En esta secci\u00f3n estaremos viendo como realizar interfaz gr\u00e1fica con Python, utilizando la librer\u00eda nativa Tkinter . La cual viene por default cuando instalamos el lenguaje Python.","title":"GUI con Python - Tkinter"},{"location":"capitulo_2/#mapa-del-sitio","text":"","title":"Mapa del sitio"},{"location":"capitulo_2/#fuentes","text":"https://docs.python.org/3/library/tk.html https://docs.python.org/3/library/tkinter.html","title":"Fuentes:"},{"location":"capitulo_2/01_introduccion/","text":"Introducci\u00f3n a Interfaz gr\u00e1fica (GUI) El paquete tkinter ( Tk interface ) es una interface est\u00e1ndar de Python para el toolkit Tcl/Tk GUI (Interfaz Gr\u00e1fica de Usuario). Ambos Tk y tkinter esta disponible en la mayor\u00eda de las plataformas Unix, incluida macOS, como tambi\u00e9n en sistemas Windows. Tkinter no es un wrapper, pero agregar un poco de su propia logia haciendo la experiencia mas pythonica . Iniciando con Tkinter Para importar el modulo tkinter , es decir, es decir para poder generar una ventana inicial o principal y para importar o generar widgets se importa el modulo ttk : from tkinter import * from tkinter import ttk El modulo Tk incluye soporte para los siguientes m\u00f3dulos: tkinter Modulo principal tkinter.colorchooser Ventana dialogo que le permite al usuario elegir un color. tkinter.commondialog Clase base para un ventana de dialogo en otro modulo tkinter.filedialog Ventana de dialogo com\u00fan que permite al usuario especificar guardar o abrir un archivo. tkinter.font Utilidades que te ayudan a trabajar con fuentes (Fonts) tkinter.messagebox Acceder a ventanas de dialogo est\u00e1ndar. tkinter.scrolledtext Crea un scroll vertical a los Widget tipo texto. tkinter.simpledialog Ventana de dialogo b\u00e1sica y funciones convenientes a ello. tkinter.ttk Es un set de widgets introducidos en Tk 8.5, provee una alternativa moderna de muchos widgets cl\u00e1sicos en el modulo principal tkinter Tk - Ventana principal Cuando desarrollamos una aplicaci\u00f3n GUI se necesita una ventana principal, la cual va a contener todos los elementos ( widget ) dentro de la misma; es decir, botones, etiquetas (Texto), cajas de texto, cajas para marcar (checkbox, radiobutton), frames (ventanas), etc. Inclusive la propia ventana ( Tk ) principal es un widget. Dentro de las ventanas se colocan los widgets Important Tk Concepts Even this simple program illustrates the following key Tk concepts: Widgets A Tkinter user interface is made up of individual widgets. Each widget is represented as a Python object, instantiated from classes like ttk.Frame, ttk.Label, and ttk.Button. Widget hierarchy Widgets are arranged in a hierarchy. The label and button were contained within a frame, which in turn was contained within the root window. When creating each child widget, its parent widget is passed as the first argument to the widget constructor. configuration options Widgets have configuration options, which modify their appearance and behavior, such as the text to display in a label or button. Different classes of widgets will have different sets of options. geometry management Widgets aren\u2019t automatically added to the user interface when they are created. A geometry manager like grid controls where in the user interface they are placed. event loop Tkinter reacts to user input, changes from your program, and even refreshes the display only when actively running an event loop. If your program isn\u2019t running the event loop, your user interface won\u2019t update.","title":"Introducci\u00f3n a GUI"},{"location":"capitulo_2/01_introduccion/#introduccion-a-interfaz-grafica-gui","text":"El paquete tkinter ( Tk interface ) es una interface est\u00e1ndar de Python para el toolkit Tcl/Tk GUI (Interfaz Gr\u00e1fica de Usuario). Ambos Tk y tkinter esta disponible en la mayor\u00eda de las plataformas Unix, incluida macOS, como tambi\u00e9n en sistemas Windows. Tkinter no es un wrapper, pero agregar un poco de su propia logia haciendo la experiencia mas pythonica .","title":"Introducci\u00f3n a Interfaz gr\u00e1fica (GUI)"},{"location":"capitulo_2/01_introduccion/#iniciando-con-tkinter","text":"Para importar el modulo tkinter , es decir, es decir para poder generar una ventana inicial o principal y para importar o generar widgets se importa el modulo ttk : from tkinter import * from tkinter import ttk El modulo Tk incluye soporte para los siguientes m\u00f3dulos: tkinter Modulo principal tkinter.colorchooser Ventana dialogo que le permite al usuario elegir un color. tkinter.commondialog Clase base para un ventana de dialogo en otro modulo tkinter.filedialog Ventana de dialogo com\u00fan que permite al usuario especificar guardar o abrir un archivo. tkinter.font Utilidades que te ayudan a trabajar con fuentes (Fonts) tkinter.messagebox Acceder a ventanas de dialogo est\u00e1ndar. tkinter.scrolledtext Crea un scroll vertical a los Widget tipo texto. tkinter.simpledialog Ventana de dialogo b\u00e1sica y funciones convenientes a ello. tkinter.ttk Es un set de widgets introducidos en Tk 8.5, provee una alternativa moderna de muchos widgets cl\u00e1sicos en el modulo principal tkinter","title":"Iniciando con Tkinter"},{"location":"capitulo_2/01_introduccion/#tk-ventana-principal","text":"Cuando desarrollamos una aplicaci\u00f3n GUI se necesita una ventana principal, la cual va a contener todos los elementos ( widget ) dentro de la misma; es decir, botones, etiquetas (Texto), cajas de texto, cajas para marcar (checkbox, radiobutton), frames (ventanas), etc. Inclusive la propia ventana ( Tk ) principal es un widget. Dentro de las ventanas se colocan los widgets","title":"Tk - Ventana principal"},{"location":"capitulo_2/01_introduccion/#important-tk-concepts","text":"Even this simple program illustrates the following key Tk concepts:","title":"Important Tk Concepts"},{"location":"capitulo_2/01_introduccion/#widgets","text":"A Tkinter user interface is made up of individual widgets. Each widget is represented as a Python object, instantiated from classes like ttk.Frame, ttk.Label, and ttk.Button.","title":"Widgets"},{"location":"capitulo_2/01_introduccion/#widget-hierarchy","text":"Widgets are arranged in a hierarchy. The label and button were contained within a frame, which in turn was contained within the root window. When creating each child widget, its parent widget is passed as the first argument to the widget constructor.","title":"Widget hierarchy"},{"location":"capitulo_2/01_introduccion/#configuration-options","text":"Widgets have configuration options, which modify their appearance and behavior, such as the text to display in a label or button. Different classes of widgets will have different sets of options.","title":"configuration options"},{"location":"capitulo_2/01_introduccion/#geometry-management","text":"Widgets aren\u2019t automatically added to the user interface when they are created. A geometry manager like grid controls where in the user interface they are placed.","title":"geometry management"},{"location":"capitulo_2/01_introduccion/#event-loop","text":"Tkinter reacts to user input, changes from your program, and even refreshes the display only when actively running an event loop. If your program isn\u2019t running the event loop, your user interface won\u2019t update.","title":"event loop"},{"location":"capitulo_2/02_tk/","text":"Tk - Ventana principal El objeto Tk es el contenedor principal de la aplicaci\u00f3n visual, o en otras palabras es la ventana principal de nuestro programa. Por ende, debe ser lo primero, ademas que contendr\u00e1 todos los widgets que declaremos. Este widget se le pasa a todos los widgets como contenedor padre, normalmente se le llama root (es una convenci\u00f3n); por ende, no tiene a ning\u00fan widget por encima de \u00e9l. Ejemplo de como seria la jerarqu\u00eda: root = Tk () # Ventana principal content = ttk . Frame ( root ) # Frame que se le pasa el widget padre o que lo contendr\u00e1 button = ttk . Button ( content ) # Se le pasa el widget content que seria su padre del bot\u00f3n Para crear una simple ventana, lo realizamos con el siguiente c\u00f3digo: from tkinter import Tk root = Tk () # Crea la ventana con sus par\u00e1metros por default root . mainloop () # Siempre se debe llamar a su m\u00e9todo mainloop y se debe colocar hasta el final, hace que la ventana se mantenga en ejecuci\u00f3n, hasta que el usuario cierre la ventana M\u00e9todos relevantes de Tk El objeto Tk tiene muchos m\u00e9todos, pero solo mencionare los que considere m\u00e1s relevantes para manipular title : Coloca un titulo a la ventana geometry : Se le da la dimensi\u00f3n a la ventana. Ejemplo: \"800x600\" lo tomara en autom\u00e1ticamente en pixels. config : Este metodo permite realizar todo tipo de configuracion al widget. Ejemplo: Se le pasan dos argumentos para definir el tama\u00f1o de la ventana, ancho y alto, width=400 , height=300 , fondo bg=\"blue\" iconbitmap : Es la funci\u00f3n para colocar un icon a la aplicaci\u00f3n, debe ser tipo .ico . Ejemplo: 'hola.ico' resizable : Con esta funcion podemos evitar que la ventana se pueda redimencionar. Ejemplo: (0,0) significa que en x y en y no se pueda redimencionar. Ejemplo de como configurar\u00edamos una ventana con su titulo y dimensiones: from tkinter import Tk root = Tk () # Creo la ventana root . title ( \"Mi aplicaci\u00f3n visual\" ) # Le doy un titulo a mi ventana root . geometry ( \"400x300\" ) # Defino un ancho de 800px y 600px de alto # root.config(width=400, height=300) # Este ser\u00eda otra manera root . mainloop () No vemos nada mas, porque no hemos agregado nada a ella.","title":"Tk"},{"location":"capitulo_2/02_tk/#tk-ventana-principal","text":"El objeto Tk es el contenedor principal de la aplicaci\u00f3n visual, o en otras palabras es la ventana principal de nuestro programa. Por ende, debe ser lo primero, ademas que contendr\u00e1 todos los widgets que declaremos. Este widget se le pasa a todos los widgets como contenedor padre, normalmente se le llama root (es una convenci\u00f3n); por ende, no tiene a ning\u00fan widget por encima de \u00e9l. Ejemplo de como seria la jerarqu\u00eda: root = Tk () # Ventana principal content = ttk . Frame ( root ) # Frame que se le pasa el widget padre o que lo contendr\u00e1 button = ttk . Button ( content ) # Se le pasa el widget content que seria su padre del bot\u00f3n Para crear una simple ventana, lo realizamos con el siguiente c\u00f3digo: from tkinter import Tk root = Tk () # Crea la ventana con sus par\u00e1metros por default root . mainloop () # Siempre se debe llamar a su m\u00e9todo mainloop y se debe colocar hasta el final, hace que la ventana se mantenga en ejecuci\u00f3n, hasta que el usuario cierre la ventana","title":"Tk - Ventana principal"},{"location":"capitulo_2/02_tk/#metodos-relevantes-de-tk","text":"El objeto Tk tiene muchos m\u00e9todos, pero solo mencionare los que considere m\u00e1s relevantes para manipular title : Coloca un titulo a la ventana geometry : Se le da la dimensi\u00f3n a la ventana. Ejemplo: \"800x600\" lo tomara en autom\u00e1ticamente en pixels. config : Este metodo permite realizar todo tipo de configuracion al widget. Ejemplo: Se le pasan dos argumentos para definir el tama\u00f1o de la ventana, ancho y alto, width=400 , height=300 , fondo bg=\"blue\" iconbitmap : Es la funci\u00f3n para colocar un icon a la aplicaci\u00f3n, debe ser tipo .ico . Ejemplo: 'hola.ico' resizable : Con esta funcion podemos evitar que la ventana se pueda redimencionar. Ejemplo: (0,0) significa que en x y en y no se pueda redimencionar. Ejemplo de como configurar\u00edamos una ventana con su titulo y dimensiones: from tkinter import Tk root = Tk () # Creo la ventana root . title ( \"Mi aplicaci\u00f3n visual\" ) # Le doy un titulo a mi ventana root . geometry ( \"400x300\" ) # Defino un ancho de 800px y 600px de alto # root.config(width=400, height=300) # Este ser\u00eda otra manera root . mainloop () No vemos nada mas, porque no hemos agregado nada a ella.","title":"M\u00e9todos relevantes de Tk"},{"location":"capitulo_2/03_frame/","text":"Frames - Marcos Marco contenedor de widgets. El objeto frame es un widget contenedor parar widgets, nos ayuda a organizar y contener widgets o secciones de widgets. Este objeto viene del modulo tkinter . Sin embargo, no puede existir sin un objeto Tk . Ademas, un Frame puede contener uno o mas Frame . Para crear una simple ventana, lo realizamos con el siguiente c\u00f3digo: from tkinter import Tk , Frame root = Tk () # Crea la ventana con sus par\u00e1metros por default root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"400x300\" ) frame = Frame ( root ) # Creamos el widget Frame y necesita recibir quien es su padre, en ese caso es la ventana principal frame . config ( bg = \"red\" , width = 400 , height = 200 ) #Le configuro algunos par\u00e1metros al Frame, como no tiene nada dentro el tama\u00f1o seria 0x0px frame . pack () # Agrega el frame a root root . mainloop () # Siempre se debe llamar a su m\u00e9todo mainloop y se debe colocar hasta el final, hace que la ventana se mantenga en ejecuci\u00f3n Se pueden preguntar si es necesariamente siempre ocupar un frame para contener los widgets de la aplicaci\u00f3n, en esencia, no; pero es una buena practica para hacer aplicaciones mas organizadas y mantenibles.","title":"Frames"},{"location":"capitulo_2/03_frame/#frames-marcos","text":"Marco contenedor de widgets. El objeto frame es un widget contenedor parar widgets, nos ayuda a organizar y contener widgets o secciones de widgets. Este objeto viene del modulo tkinter . Sin embargo, no puede existir sin un objeto Tk . Ademas, un Frame puede contener uno o mas Frame . Para crear una simple ventana, lo realizamos con el siguiente c\u00f3digo: from tkinter import Tk , Frame root = Tk () # Crea la ventana con sus par\u00e1metros por default root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"400x300\" ) frame = Frame ( root ) # Creamos el widget Frame y necesita recibir quien es su padre, en ese caso es la ventana principal frame . config ( bg = \"red\" , width = 400 , height = 200 ) #Le configuro algunos par\u00e1metros al Frame, como no tiene nada dentro el tama\u00f1o seria 0x0px frame . pack () # Agrega el frame a root root . mainloop () # Siempre se debe llamar a su m\u00e9todo mainloop y se debe colocar hasta el final, hace que la ventana se mantenga en ejecuci\u00f3n Se pueden preguntar si es necesariamente siempre ocupar un frame para contener los widgets de la aplicaci\u00f3n, en esencia, no; pero es una buena practica para hacer aplicaciones mas organizadas y mantenibles.","title":"Frames - Marcos"},{"location":"capitulo_2/04_etiqueta/","text":"Etiqueta de Texto - Label Es un widget que no ayuda a desplegar texto o etiquetas que queramos mostrar en la aplicaci\u00f3n, etc. Para utilizar una label se debe importar del m\u00f3dulo tkinter . El primer par\u00e1metro debe ser el widget padre, despu\u00e9s pasamos el par\u00e1metro text que sera lo que desplegara por pantalla. from tkinter import Tk , Label # import el objeto label root = Tk () # Crea la ventana con sus par\u00e1metros por default root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"300x300\" ) label = Label ( root , text = \"Hola\" ) # indico donde estar\u00e1 contenido label . pack () # lo agrego a widget padre root . mainloop () # Siempre se debe llamar a su m\u00e9todo mainloop y se debe colocar hasta el final, hace que la ventana se mantenga en ejecuci\u00f3n Agregando varias etiquetas: from tkinter import PhotoImage , Tk , Label root = Tk () # Crea la ventana con sus par\u00e1metros por default root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"300x300\" ) label = Label ( root , text = \"Hola\" ) label . pack () Label ( root , text = \"\u00a1Otra etiqueta!\" ) . pack () Label ( root , text = \"\u00a1\u00daltima etiqueta!\" ) . pack () root . mainloop () # Siempre se debe llamar a su m\u00e9todo mainloop y se debe colocar hasta el final, hace que la ventana se mantenga en ejecuci\u00f3n Im\u00e1genes El objeto label podemos usarla para colocar im\u00e1genes, pero se tiene que agregar otro modulo que nos ayude a colocarla dentro de label : from tkinter import PhotoImage , Tk , Label root = Tk () # Crea la ventana con sus par\u00e1metros por default root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"300x300\" ) imagen = PhotoImage ( file = \"img/logo_m85_80px.png\" ) #indico la ruta de la imagen label = Label ( root , image = imagen ) # agrego la imagen a la etiqueta label . pack () # lo agrego a widget padre root . mainloop () # Siempre se debe llamar a su m\u00e9todo mainloop y se debe colocar hasta el final, hace que la ventana se mantenga en ejecuci\u00f3n","title":"Label"},{"location":"capitulo_2/04_etiqueta/#etiqueta-de-texto-label","text":"Es un widget que no ayuda a desplegar texto o etiquetas que queramos mostrar en la aplicaci\u00f3n, etc. Para utilizar una label se debe importar del m\u00f3dulo tkinter . El primer par\u00e1metro debe ser el widget padre, despu\u00e9s pasamos el par\u00e1metro text que sera lo que desplegara por pantalla. from tkinter import Tk , Label # import el objeto label root = Tk () # Crea la ventana con sus par\u00e1metros por default root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"300x300\" ) label = Label ( root , text = \"Hola\" ) # indico donde estar\u00e1 contenido label . pack () # lo agrego a widget padre root . mainloop () # Siempre se debe llamar a su m\u00e9todo mainloop y se debe colocar hasta el final, hace que la ventana se mantenga en ejecuci\u00f3n Agregando varias etiquetas: from tkinter import PhotoImage , Tk , Label root = Tk () # Crea la ventana con sus par\u00e1metros por default root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"300x300\" ) label = Label ( root , text = \"Hola\" ) label . pack () Label ( root , text = \"\u00a1Otra etiqueta!\" ) . pack () Label ( root , text = \"\u00a1\u00daltima etiqueta!\" ) . pack () root . mainloop () # Siempre se debe llamar a su m\u00e9todo mainloop y se debe colocar hasta el final, hace que la ventana se mantenga en ejecuci\u00f3n","title":"Etiqueta de Texto - Label"},{"location":"capitulo_2/04_etiqueta/#imagenes","text":"El objeto label podemos usarla para colocar im\u00e1genes, pero se tiene que agregar otro modulo que nos ayude a colocarla dentro de label : from tkinter import PhotoImage , Tk , Label root = Tk () # Crea la ventana con sus par\u00e1metros por default root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"300x300\" ) imagen = PhotoImage ( file = \"img/logo_m85_80px.png\" ) #indico la ruta de la imagen label = Label ( root , image = imagen ) # agrego la imagen a la etiqueta label . pack () # lo agrego a widget padre root . mainloop () # Siempre se debe llamar a su m\u00e9todo mainloop y se debe colocar hasta el final, hace que la ventana se mantenga en ejecuci\u00f3n","title":"Im\u00e1genes"},{"location":"capitulo_2/05_boton/","text":"Bot\u00f3n - Button El bot\u00f3n es el widget que seguramente vamos a utlizar mas, para hacerlo primero debemos importar el objeto Button del m\u00f3dulo tkinter . Como todo widget primero debemos pasarle su widget padre y despu\u00e9s el texto con el contenido que tendr\u00e1. from tkinter import Tk , Button root = Tk () # Crea la ventana con sus par\u00e1metros por default root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"300x200\" ) boton = Button ( root , text = \"Dar click sobre el bot\u00f3n\" ) #creo el boton boton . pack () # agrego el bot\u00f3n a la ventana root . mainloop () # Siempre se debe llamar a su m\u00e9todo mainloop y se debe colocar hasta el final, hace que la ventana se mantenga en ejecuci\u00f3n Pero si nos damos cuenta, al presionar el boton no sucede nada, para ello debemos agregar un evento o una acci\u00f3n que debe ejecutar al momento de ser presionado el boton, ademas debemos generar una funci\u00f3n la cual contendr\u00e1 la contenido de la acci\u00f3n. from tkinter import Tk , Button def evento_boton (): # funcion que se ejecutar\u00e1 al presionar el bot\u00f3n print ( \"Boton presionado\" ) root = Tk () # Crea la ventana con sus par\u00e1metros por default root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"300x200\" ) boton = Button ( root , text = \"Dar click sobre el bot\u00f3n\" , command = evento_boton ) #creo el boton y agrego el evento boton . pack () # agrego el bot\u00f3n a la ventana root . mainloop () # Siempre se debe llamar a su m\u00e9todo mainloop y se debe colocar hasta el final, hace que la ventana se mantenga en ejecuci\u00f3n","title":"Button"},{"location":"capitulo_2/05_boton/#boton-button","text":"El bot\u00f3n es el widget que seguramente vamos a utlizar mas, para hacerlo primero debemos importar el objeto Button del m\u00f3dulo tkinter . Como todo widget primero debemos pasarle su widget padre y despu\u00e9s el texto con el contenido que tendr\u00e1. from tkinter import Tk , Button root = Tk () # Crea la ventana con sus par\u00e1metros por default root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"300x200\" ) boton = Button ( root , text = \"Dar click sobre el bot\u00f3n\" ) #creo el boton boton . pack () # agrego el bot\u00f3n a la ventana root . mainloop () # Siempre se debe llamar a su m\u00e9todo mainloop y se debe colocar hasta el final, hace que la ventana se mantenga en ejecuci\u00f3n Pero si nos damos cuenta, al presionar el boton no sucede nada, para ello debemos agregar un evento o una acci\u00f3n que debe ejecutar al momento de ser presionado el boton, ademas debemos generar una funci\u00f3n la cual contendr\u00e1 la contenido de la acci\u00f3n. from tkinter import Tk , Button def evento_boton (): # funcion que se ejecutar\u00e1 al presionar el bot\u00f3n print ( \"Boton presionado\" ) root = Tk () # Crea la ventana con sus par\u00e1metros por default root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"300x200\" ) boton = Button ( root , text = \"Dar click sobre el bot\u00f3n\" , command = evento_boton ) #creo el boton y agrego el evento boton . pack () # agrego el bot\u00f3n a la ventana root . mainloop () # Siempre se debe llamar a su m\u00e9todo mainloop y se debe colocar hasta el final, hace que la ventana se mantenga en ejecuci\u00f3n","title":"Bot\u00f3n - Button"},{"location":"capitulo_2/06_entry/","text":"Entry - Entrada de texto Este widget es un campo de texto de entrada. En el cual podremos escribir cualquier texto, normalmente un mensaje corto, sin importar si son n\u00famero o letras. from tkinter import Tk , Entry root = Tk () # Creo mi ventana principal root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"300x300\" ) entry = Entry ( root ) # creo un entry y le pasamos su padre entry . pack () # agregamos el entry a la ventana root . mainloop ()","title":"Entry"},{"location":"capitulo_2/06_entry/#entry-entrada-de-texto","text":"Este widget es un campo de texto de entrada. En el cual podremos escribir cualquier texto, normalmente un mensaje corto, sin importar si son n\u00famero o letras. from tkinter import Tk , Entry root = Tk () # Creo mi ventana principal root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"300x300\" ) entry = Entry ( root ) # creo un entry y le pasamos su padre entry . pack () # agregamos el entry a la ventana root . mainloop ()","title":"Entry - Entrada de texto"},{"location":"capitulo_2/07_text_area/","text":"Text - \u00c1rea de texto Un \u00e1rea de texto es una zona para ingresar una cantidad de texto densa, en la cual esta hecha para que podamos escribir todo lo que necesitemos. from tkinter import Tk , Text root = Tk () # Creo mi ventana principal root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"300x300\" ) texto = Text ( root ) # Creo el Text y le paso su padre texto . pack () # se agrega al padre root . mainloop () Par\u00e1metros interesantes que podemos configurar width : Ancho del Text height : Ancho del Text font : Fuente y tama\u00f1o de fuente padx : padding en el eje X pady : padding en el eje Y selectbackground : color al seleccionar el texto from tkinter import Tk , Text root = Tk () # Creo mi ventana principal root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"300x300\" ) texto = Text ( root ,) # Creo el Text y le paso su padre texto . config ( width = 30 , height = 10 , font = ( \"Consolas\" , 12 ), padx = 15 , pady = 15 , selectbackground = \"red\" ) # agrego configuraciones a mi campo de texto texto . pack () # se agrega al padre root . mainloop ()","title":"Text"},{"location":"capitulo_2/07_text_area/#text-area-de-texto","text":"Un \u00e1rea de texto es una zona para ingresar una cantidad de texto densa, en la cual esta hecha para que podamos escribir todo lo que necesitemos. from tkinter import Tk , Text root = Tk () # Creo mi ventana principal root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"300x300\" ) texto = Text ( root ) # Creo el Text y le paso su padre texto . pack () # se agrega al padre root . mainloop ()","title":"Text - \u00c1rea de texto"},{"location":"capitulo_2/07_text_area/#parametros-interesantes-que-podemos-configurar","text":"width : Ancho del Text height : Ancho del Text font : Fuente y tama\u00f1o de fuente padx : padding en el eje X pady : padding en el eje Y selectbackground : color al seleccionar el texto from tkinter import Tk , Text root = Tk () # Creo mi ventana principal root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"300x300\" ) texto = Text ( root ,) # Creo el Text y le paso su padre texto . config ( width = 30 , height = 10 , font = ( \"Consolas\" , 12 ), padx = 15 , pady = 15 , selectbackground = \"red\" ) # agrego configuraciones a mi campo de texto texto . pack () # se agrega al padre root . mainloop ()","title":"Par\u00e1metros interesantes que podemos configurar"},{"location":"capitulo_2/08_radio/","text":"Radio Button Este tipo de widget en general lo usamos cuando queremos dar opciones, pero solo una puede ser elegida. Tenemos que agregar la clase Radiobutton . Pasandole como argumento text para el texto que mostrar en la interfaz. from tkinter import Tk , Radiobutton root = Tk () root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"250x250\" ) radio_boton = Radiobutton ( root , text = \"Opci\u00f3n 1\" ) radio_boton . pack () root . mainloop () Par\u00e1metros de Radio Button Pero en aplicaci\u00f3n no vamos a tener solo un radio bot\u00f3n, tendremos mas de uno, ademas que necesitaremos conocer cual de las opciones tomamos. Para ello veremos mas par\u00e1metros que podemos utilizar en este tipo de widget. variable : Es la variable que gestiona el contenido del radio seleccionado value : Es un valor \u00fanico que se le da y es el vamos a recibir en caso que ese radio este seleccionado command : La funci\u00f3n que se ejecutara cada vez que se de click al radio button from tkinter import Tk , Radiobutton , IntVar , Label def select (): print ( \"Opci\u00f3n {} \" . format ( opcion . get ())) root = Tk () root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"250x250\" ) root . config ( bd = 15 ) opcion = IntVar () # Es un objeto que almacena un entero venido de la GUI Radiobutton ( root , text = \"Opci\u00f3n 1\" , variable = opcion , value = 1 , command = select ) . pack () Radiobutton ( root , text = \"Opci\u00f3n 2\" , variable = opcion , value = 2 , command = select ) . pack () Radiobutton ( root , text = \"Opci\u00f3n 3\" , variable = opcion , value = 3 , command = select ) . pack () root . mainloop ()","title":"Radio button"},{"location":"capitulo_2/08_radio/#radio-button","text":"Este tipo de widget en general lo usamos cuando queremos dar opciones, pero solo una puede ser elegida. Tenemos que agregar la clase Radiobutton . Pasandole como argumento text para el texto que mostrar en la interfaz. from tkinter import Tk , Radiobutton root = Tk () root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"250x250\" ) radio_boton = Radiobutton ( root , text = \"Opci\u00f3n 1\" ) radio_boton . pack () root . mainloop ()","title":"Radio Button"},{"location":"capitulo_2/08_radio/#parametros-de-radio-button","text":"Pero en aplicaci\u00f3n no vamos a tener solo un radio bot\u00f3n, tendremos mas de uno, ademas que necesitaremos conocer cual de las opciones tomamos. Para ello veremos mas par\u00e1metros que podemos utilizar en este tipo de widget. variable : Es la variable que gestiona el contenido del radio seleccionado value : Es un valor \u00fanico que se le da y es el vamos a recibir en caso que ese radio este seleccionado command : La funci\u00f3n que se ejecutara cada vez que se de click al radio button from tkinter import Tk , Radiobutton , IntVar , Label def select (): print ( \"Opci\u00f3n {} \" . format ( opcion . get ())) root = Tk () root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"250x250\" ) root . config ( bd = 15 ) opcion = IntVar () # Es un objeto que almacena un entero venido de la GUI Radiobutton ( root , text = \"Opci\u00f3n 1\" , variable = opcion , value = 1 , command = select ) . pack () Radiobutton ( root , text = \"Opci\u00f3n 2\" , variable = opcion , value = 2 , command = select ) . pack () Radiobutton ( root , text = \"Opci\u00f3n 3\" , variable = opcion , value = 3 , command = select ) . pack () root . mainloop ()","title":"Par\u00e1metros de Radio Button"},{"location":"capitulo_2/09_checkbox/","text":"Checkbutton - Bot\u00f3n de chequeo Este tipo de widget para cuando el usuario puede elegir varias opciones que le damos. Habitualmente es conocido como checkbox , sin embargo, aqu\u00ed se conocer\u00e1 como checkbutton . from tkinter import Tk , Checkbutton root = Tk () # Creo mi ventana principal root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"300x300\" ) Checkbutton ( root , text = \"Opci\u00f3n a elegir\" ) . pack () root . mainloop () Par\u00e1metros de Radio Button Pero en aplicaci\u00f3n no vamos a tener solo un bot\u00f3n de chequeo, tendremos mas de uno, ademas que necesitaremos conocer cual o cuales fueron las opciones marcadas. Para ello veremos mas par\u00e1metros que podemos utilizar en este tipo de widget. variable : La variable que va a gestionar el contenido onvalue : El valor que devuelve en caso de que sea marcado offvalue : El valor que devuelve en caso que no este marcada la casilla command : La funci\u00f3n que se ejecutara cada vez que se de click from tkinter import * def seleccionar (): if ( opcion_1 . get ()): print ( \"opci\u00f3n 1 marcada\" ) else : print ( \"opci\u00f3n 1 desmarcada\" ) if ( opcion_2 . get ()): print ( \"opci\u00f3n 2 marcada\" ) else : print ( \"opci\u00f3n 2 desmarcada\" ) # Configuraci\u00f3n de la ra\u00edz root = Tk () root . title ( \"Mi aplicaci\u00f3n\" ) root . config ( bd = 15 ) opcion_1 = IntVar () # 1 si, 0 no opcion_2 = IntVar () # 1 si, 0 no Checkbutton ( root , text = \"Opci\u00f3n 1\" , variable = opcion_1 , onvalue = 1 , offvalue = 0 , command = seleccionar ) . pack () Checkbutton ( root , text = \"Opci\u00f3n 2\" , variable = opcion_2 , onvalue = 1 , offvalue = 0 , command = seleccionar ) . pack () root . mainloop ()","title":"Check box"},{"location":"capitulo_2/09_checkbox/#checkbutton-boton-de-chequeo","text":"Este tipo de widget para cuando el usuario puede elegir varias opciones que le damos. Habitualmente es conocido como checkbox , sin embargo, aqu\u00ed se conocer\u00e1 como checkbutton . from tkinter import Tk , Checkbutton root = Tk () # Creo mi ventana principal root . title ( \"Mi aplicaci\u00f3n\" ) root . geometry ( \"300x300\" ) Checkbutton ( root , text = \"Opci\u00f3n a elegir\" ) . pack () root . mainloop ()","title":"Checkbutton - Bot\u00f3n de chequeo"},{"location":"capitulo_2/09_checkbox/#parametros-de-radio-button","text":"Pero en aplicaci\u00f3n no vamos a tener solo un bot\u00f3n de chequeo, tendremos mas de uno, ademas que necesitaremos conocer cual o cuales fueron las opciones marcadas. Para ello veremos mas par\u00e1metros que podemos utilizar en este tipo de widget. variable : La variable que va a gestionar el contenido onvalue : El valor que devuelve en caso de que sea marcado offvalue : El valor que devuelve en caso que no este marcada la casilla command : La funci\u00f3n que se ejecutara cada vez que se de click from tkinter import * def seleccionar (): if ( opcion_1 . get ()): print ( \"opci\u00f3n 1 marcada\" ) else : print ( \"opci\u00f3n 1 desmarcada\" ) if ( opcion_2 . get ()): print ( \"opci\u00f3n 2 marcada\" ) else : print ( \"opci\u00f3n 2 desmarcada\" ) # Configuraci\u00f3n de la ra\u00edz root = Tk () root . title ( \"Mi aplicaci\u00f3n\" ) root . config ( bd = 15 ) opcion_1 = IntVar () # 1 si, 0 no opcion_2 = IntVar () # 1 si, 0 no Checkbutton ( root , text = \"Opci\u00f3n 1\" , variable = opcion_1 , onvalue = 1 , offvalue = 0 , command = seleccionar ) . pack () Checkbutton ( root , text = \"Opci\u00f3n 2\" , variable = opcion_2 , onvalue = 1 , offvalue = 0 , command = seleccionar ) . pack () root . mainloop ()","title":"Par\u00e1metros de Radio Button"},{"location":"capitulo_2/10_Layout/","text":"Layout Los layout son la manera o forma de como se distribuir\u00e1n los elementos en una ventana. En Python es cocido como geometry manager , pero aqu\u00ed nos referimos como layout o manejadores de posicionamiento , por ser un nombre m\u00e1s com\u00fan para distribuci\u00f3n o posicionamiento de elementos (widgets) dentro de una interfaz gr\u00e1fica. Tipos de manejados de posicionamiento (geometry) Contamos con 3 tipos de manejadores de layout ( geometry manager ), que son: pack : Agrega los widget en bloque, uno despu\u00e9s del otro, con forme se fueron agregando place : grid : No se mezclan estos manejadores No se deben combinar estas manejadores dentro de un mismo contenedor. Se pueden tener diversos contenedores y en cada uno manejar un tipo distinto, si. Pero nunca dentro del mismo contenedor.","title":"Layout"},{"location":"capitulo_2/10_Layout/#layout","text":"Los layout son la manera o forma de como se distribuir\u00e1n los elementos en una ventana. En Python es cocido como geometry manager , pero aqu\u00ed nos referimos como layout o manejadores de posicionamiento , por ser un nombre m\u00e1s com\u00fan para distribuci\u00f3n o posicionamiento de elementos (widgets) dentro de una interfaz gr\u00e1fica.","title":"Layout"},{"location":"capitulo_2/10_Layout/#tipos-de-manejados-de-posicionamiento-geometry","text":"Contamos con 3 tipos de manejadores de layout ( geometry manager ), que son: pack : Agrega los widget en bloque, uno despu\u00e9s del otro, con forme se fueron agregando place : grid : No se mezclan estos manejadores No se deben combinar estas manejadores dentro de un mismo contenedor. Se pueden tener diversos contenedores y en cada uno manejar un tipo distinto, si. Pero nunca dentro del mismo contenedor.","title":"Tipos de manejados de posicionamiento (geometry)"},{"location":"capitulo_2/11_pack/","text":"Manejador Pack Con forme se van agregando los widget al contenedor padre, estos se ir\u00e1n apilando. Por default se van ordenando de arriba hacia abajo, pero se puede modificar este posici\u00f3n. Sintaxis widget . pack ( pack_options ... ) Los argumentos que puede recibe la funci\u00f3n pack son: side : La posici\u00f3n en la que se agregar\u00e1, despu\u00e9s de ejecutar el m\u00e9todo pack() TOP : (default), Se agrega de arriaba hacia abajo BOTTOM : Se acomoda de abajo hacia arriba LEFT : Se acomoda de izquierda a derecha RIGHT : Se acomoda de derecha a izquierda fill : Indica que se expanda todo el ancho posible o el alto, dependiendo si existe alg\u00fan elemento al lado de \u00e9l. X : Horizontal Y : Vertical BOTH : Ambos, tanto x como y padx / pady : Margen en x y y . Es la distancia entre widget y widget. Padding externo. padx / ipady : Padding en x y y . Es la distancia entre el contenido y la pared del widget. Padding interno. expand : Ocupa todo el espacio posible, pero sin crecer el widget, vendr\u00eda siendo como un margen, Recibe un valor booleano: True , False anchor : Se le puede dar la posici\u00f3n con referencia a un punto; de en donde quedara el widget. Los atributos pueden ser: NW : northwest , arriaba a la izquierda N : North : Norte, arriba NE : arriaba a la derecha W : A la derecha CENTER : Centrado horizontalmente y verticalmente E : Derecha SW : Abajo a la izquierda S : Abajo SE : Abajo a la derecha Ejemplos from tkinter import * root = Tk () root . title ( \"Normal Settings Control\" ) root . geometry ( \"200x100\" ) Label ( root , text = \"Electronica\" , bg = \"lightyellow\" ) . pack ( padx = 10 , pady = 10 ) Label ( root , text = \"Mecatr\u00f3nica\" , bg = \"lightgreen\" ) . pack () Label ( root , text = \"Programaci\u00f3n\" , bg = \"lightblue\" ) . pack () root . mainloop () from tkinter import * root = Tk () root . title ( \"ch7.py\" ) root . geometry ( \"300x180\" ) okbtn = Button ( root , text = \"OK\" , font = \"Times 20 bold\" , fg = \"white\" , bg = \"blue\" ) okbtn . pack ( anchor = S , side = RIGHT , padx = 10 , pady = 10 ) nobtn = Button ( root , text = \"NO\" , font = \"Times 20 bold\" , fg = \"white\" , bg = \"red\" ) nobtn . pack ( anchor = S , side = RIGHT , pady = 10 ) root . mainloop () from tkinter import Tk , Frame , Button , BOTH root = Tk () root . title ( \"Botonera\" ) root . geometry ( \"200x100\" ) # Crear un Frame y se expande para tomar el tama\u00f1o de la ventana padre pane = Frame ( root ) pane . pack ( fill = BOTH , expand = True ) # Se crea un bot\u00f3n y se expande a toda la pantalla b1 = Button ( pane , text = \"Da click 1\" , bg = \"yellow\" ) b1 . pack ( fill = BOTH , expand = True ) # Se crea un bot\u00f3n y se expande a toda la pantalla b2 = Button ( pane , text = \"Da click 2\" , bg = \"green\" ) b2 . pack ( fill = BOTH , expand = True ) root . mainloop () Cuando asignas la propiedad expand como True a todos los widgets, el pack manager permite distribuir el espacio entre todos, equitativamente. from tkinter import Tk , Frame , Button , LEFT , BOTH root = Tk () root . title ( \"Botonera\" ) root . geometry ( \"300x100\" ) # Crear un Frame y se expande para tomar el tama\u00f1o de la ventana padre pane = Frame ( root ) pane . pack ( fill = BOTH , expand = True ) # Se crea un bot\u00f3n y se expande a toda la pantalla y se coloca a de izquierda a derecha b1 = Button ( pane , text = \"Opci\u00f3n 1\" , background = \"red\" , fg = \"white\" ) b1 . pack ( side = LEFT , expand = True , fill = BOTH ) # Se crea un bot\u00f3n y se expande a toda la pantalla y se coloca a de izquierda a derecha b2 = Button ( pane , text = \"Opci\u00f3n 2\" , background = \"blue\" , fg = \"white\" ) b2 . pack ( side = LEFT , expand = True , fill = BOTH ) # Se crea un bot\u00f3n y se expande a toda la pantalla y se coloca a de izquierda a derecha b3 = Button ( pane , text = \"Opci\u00f3n 3\" , background = \"green\" , fg = \"white\" ) b3 . pack ( side = LEFT , expand = True , fill = BOTH ) root . mainloop () from tkinter import Tk , Frame , Button , LEFT , BOTTOM root = Tk () root . title ( \"Botonera\" ) frame = Frame ( root ) frame . pack () bottomframe = Frame ( root ) bottomframe . pack ( side = BOTTOM ) redbutton = Button ( frame , text = \"Rojo\" , fg = \"red\" ) redbutton . pack ( side = LEFT ) greenbutton = Button ( frame , text = \"Verde\" , fg = \"green\" ) greenbutton . pack ( side = LEFT ) bluebutton = Button ( frame , text = \"Azul\" , fg = \"blue\" ) bluebutton . pack ( side = LEFT ) blackbutton = Button ( bottomframe , text = \"Negro\" , fg = \"black\" ) blackbutton . pack ( ) root . mainloop () from tkinter import Tk , Label root = Tk () root . title ( \"Normal Settings Control\" ) root . geometry ( \"200x100\" ) Label ( root , text = \"Electronica\" , bg = \"lightyellow\" ) . pack ( padx = 10 , pady = 10 ) Label ( root , text = \"Mecatr\u00f3nica\" , bg = \"lightgreen\" ) . pack ( ipadx = 10 , ipady = 10 ) Label ( root , text = \"Programaci\u00f3n\" , bg = \"lightblue\" ) . pack () root . mainloop () import tkinter as tk from tkinter import ttk root = tk . Tk () root . title ( 'Pack Demo' ) root . geometry ( \"300x200\" ) # place widgets top down label1 = tk . Label ( root , text = 'Box 1' , bg = \"red\" , fg = \"white\" ) label1 . pack ( ipadx = 10 , ipady = 10 , fill = 'x' ) label2 = tk . Label ( root , text = 'Box 2' , bg = \"green\" , fg = \"white\" ) label2 . pack ( ipadx = 10 , ipady = 10 , fill = 'x' ) label3 = tk . Label ( root , text = 'Box 3' , bg = \"blue\" , fg = \"white\" ) label3 . pack ( ipadx = 10 , ipady = 10 , fill = 'x' ) # place widgets side by side label4 = tk . Label ( root , text = 'Left' , bg = \"cyan\" , fg = \"black\" ) label4 . pack ( ipadx = 10 , ipady = 10 , expand = True , fill = 'both' , side = 'left' ) label5 = tk . Label ( root , text = 'Center' , bg = \"magenta\" , fg = \"black\" ) label5 . pack ( ipadx = 10 , ipady = 10 , expand = True , fill = 'both' , side = 'left' ) label6 = tk . Label ( root , text = 'Right' , bg = \"yellow\" , fg = \"black\" ) label6 . pack ( ipadx = 10 , ipady = 10 , expand = True , fill = 'both' , side = 'left' ) root . mainloop () https://www.youtube.com/watch?v=y69rqjEfwYI&list=PLqlQ2-9ypflQQEepQJvGQ6RJ8llnzk6Kj&index=3 https://www.tutorialspoint.com/python/tk_pack.htm https://python-commandments.org/tkinter-pack/ https://www.pythontutorial.net/tkinter/tkinter-pack/","title":"Pack Manager"},{"location":"capitulo_2/11_pack/#manejador-pack","text":"Con forme se van agregando los widget al contenedor padre, estos se ir\u00e1n apilando. Por default se van ordenando de arriba hacia abajo, pero se puede modificar este posici\u00f3n.","title":"Manejador Pack"},{"location":"capitulo_2/11_pack/#sintaxis","text":"widget . pack ( pack_options ... ) Los argumentos que puede recibe la funci\u00f3n pack son: side : La posici\u00f3n en la que se agregar\u00e1, despu\u00e9s de ejecutar el m\u00e9todo pack() TOP : (default), Se agrega de arriaba hacia abajo BOTTOM : Se acomoda de abajo hacia arriba LEFT : Se acomoda de izquierda a derecha RIGHT : Se acomoda de derecha a izquierda fill : Indica que se expanda todo el ancho posible o el alto, dependiendo si existe alg\u00fan elemento al lado de \u00e9l. X : Horizontal Y : Vertical BOTH : Ambos, tanto x como y padx / pady : Margen en x y y . Es la distancia entre widget y widget. Padding externo. padx / ipady : Padding en x y y . Es la distancia entre el contenido y la pared del widget. Padding interno. expand : Ocupa todo el espacio posible, pero sin crecer el widget, vendr\u00eda siendo como un margen, Recibe un valor booleano: True , False anchor : Se le puede dar la posici\u00f3n con referencia a un punto; de en donde quedara el widget. Los atributos pueden ser: NW : northwest , arriaba a la izquierda N : North : Norte, arriba NE : arriaba a la derecha W : A la derecha CENTER : Centrado horizontalmente y verticalmente E : Derecha SW : Abajo a la izquierda S : Abajo SE : Abajo a la derecha","title":"Sintaxis"},{"location":"capitulo_2/11_pack/#ejemplos","text":"from tkinter import * root = Tk () root . title ( \"Normal Settings Control\" ) root . geometry ( \"200x100\" ) Label ( root , text = \"Electronica\" , bg = \"lightyellow\" ) . pack ( padx = 10 , pady = 10 ) Label ( root , text = \"Mecatr\u00f3nica\" , bg = \"lightgreen\" ) . pack () Label ( root , text = \"Programaci\u00f3n\" , bg = \"lightblue\" ) . pack () root . mainloop () from tkinter import * root = Tk () root . title ( \"ch7.py\" ) root . geometry ( \"300x180\" ) okbtn = Button ( root , text = \"OK\" , font = \"Times 20 bold\" , fg = \"white\" , bg = \"blue\" ) okbtn . pack ( anchor = S , side = RIGHT , padx = 10 , pady = 10 ) nobtn = Button ( root , text = \"NO\" , font = \"Times 20 bold\" , fg = \"white\" , bg = \"red\" ) nobtn . pack ( anchor = S , side = RIGHT , pady = 10 ) root . mainloop () from tkinter import Tk , Frame , Button , BOTH root = Tk () root . title ( \"Botonera\" ) root . geometry ( \"200x100\" ) # Crear un Frame y se expande para tomar el tama\u00f1o de la ventana padre pane = Frame ( root ) pane . pack ( fill = BOTH , expand = True ) # Se crea un bot\u00f3n y se expande a toda la pantalla b1 = Button ( pane , text = \"Da click 1\" , bg = \"yellow\" ) b1 . pack ( fill = BOTH , expand = True ) # Se crea un bot\u00f3n y se expande a toda la pantalla b2 = Button ( pane , text = \"Da click 2\" , bg = \"green\" ) b2 . pack ( fill = BOTH , expand = True ) root . mainloop () Cuando asignas la propiedad expand como True a todos los widgets, el pack manager permite distribuir el espacio entre todos, equitativamente. from tkinter import Tk , Frame , Button , LEFT , BOTH root = Tk () root . title ( \"Botonera\" ) root . geometry ( \"300x100\" ) # Crear un Frame y se expande para tomar el tama\u00f1o de la ventana padre pane = Frame ( root ) pane . pack ( fill = BOTH , expand = True ) # Se crea un bot\u00f3n y se expande a toda la pantalla y se coloca a de izquierda a derecha b1 = Button ( pane , text = \"Opci\u00f3n 1\" , background = \"red\" , fg = \"white\" ) b1 . pack ( side = LEFT , expand = True , fill = BOTH ) # Se crea un bot\u00f3n y se expande a toda la pantalla y se coloca a de izquierda a derecha b2 = Button ( pane , text = \"Opci\u00f3n 2\" , background = \"blue\" , fg = \"white\" ) b2 . pack ( side = LEFT , expand = True , fill = BOTH ) # Se crea un bot\u00f3n y se expande a toda la pantalla y se coloca a de izquierda a derecha b3 = Button ( pane , text = \"Opci\u00f3n 3\" , background = \"green\" , fg = \"white\" ) b3 . pack ( side = LEFT , expand = True , fill = BOTH ) root . mainloop () from tkinter import Tk , Frame , Button , LEFT , BOTTOM root = Tk () root . title ( \"Botonera\" ) frame = Frame ( root ) frame . pack () bottomframe = Frame ( root ) bottomframe . pack ( side = BOTTOM ) redbutton = Button ( frame , text = \"Rojo\" , fg = \"red\" ) redbutton . pack ( side = LEFT ) greenbutton = Button ( frame , text = \"Verde\" , fg = \"green\" ) greenbutton . pack ( side = LEFT ) bluebutton = Button ( frame , text = \"Azul\" , fg = \"blue\" ) bluebutton . pack ( side = LEFT ) blackbutton = Button ( bottomframe , text = \"Negro\" , fg = \"black\" ) blackbutton . pack ( ) root . mainloop () from tkinter import Tk , Label root = Tk () root . title ( \"Normal Settings Control\" ) root . geometry ( \"200x100\" ) Label ( root , text = \"Electronica\" , bg = \"lightyellow\" ) . pack ( padx = 10 , pady = 10 ) Label ( root , text = \"Mecatr\u00f3nica\" , bg = \"lightgreen\" ) . pack ( ipadx = 10 , ipady = 10 ) Label ( root , text = \"Programaci\u00f3n\" , bg = \"lightblue\" ) . pack () root . mainloop () import tkinter as tk from tkinter import ttk root = tk . Tk () root . title ( 'Pack Demo' ) root . geometry ( \"300x200\" ) # place widgets top down label1 = tk . Label ( root , text = 'Box 1' , bg = \"red\" , fg = \"white\" ) label1 . pack ( ipadx = 10 , ipady = 10 , fill = 'x' ) label2 = tk . Label ( root , text = 'Box 2' , bg = \"green\" , fg = \"white\" ) label2 . pack ( ipadx = 10 , ipady = 10 , fill = 'x' ) label3 = tk . Label ( root , text = 'Box 3' , bg = \"blue\" , fg = \"white\" ) label3 . pack ( ipadx = 10 , ipady = 10 , fill = 'x' ) # place widgets side by side label4 = tk . Label ( root , text = 'Left' , bg = \"cyan\" , fg = \"black\" ) label4 . pack ( ipadx = 10 , ipady = 10 , expand = True , fill = 'both' , side = 'left' ) label5 = tk . Label ( root , text = 'Center' , bg = \"magenta\" , fg = \"black\" ) label5 . pack ( ipadx = 10 , ipady = 10 , expand = True , fill = 'both' , side = 'left' ) label6 = tk . Label ( root , text = 'Right' , bg = \"yellow\" , fg = \"black\" ) label6 . pack ( ipadx = 10 , ipady = 10 , expand = True , fill = 'both' , side = 'left' ) root . mainloop () https://www.youtube.com/watch?v=y69rqjEfwYI&list=PLqlQ2-9ypflQQEepQJvGQ6RJ8llnzk6Kj&index=3 https://www.tutorialspoint.com/python/tk_pack.htm https://python-commandments.org/tkinter-pack/ https://www.pythontutorial.net/tkinter/tkinter-pack/","title":"Ejemplos"},{"location":"capitulo_2/12_place/","text":"Manejador Place Este manejador de geometr\u00eda permite ubicar widgets indicando su posici\u00f3n exacta ( x e y ) respecto a su contenedor padre. Este manager de geometr\u00eda es muy vers\u00e1til y flexible para ir posicionando los elementos de manera libre. Sintaxis widget . place ( place_options ... ) Los argumentos que puede recibe la funci\u00f3n place son: anchor : El lugar exacto donde se va a posicionar el widget, las opciones que puede recibir son:- NW : northwest , arriaba a la izquierda N : North : Norte, arriba NE : arriaba a la derecha W : A la derecha CENTER : Centrado horizontalmente y verticalmente E : Derecha SW : Abajo a la izquierda S : Abajo SE : Abajo a la derecha bordermode : Modo del border del widget, por default es INSIDE , el otro valor puede ser OUTSIDE . Posicionamiento absoluto x : Offset (desplazamiento) en eje x , en pixels. y : Offset (desplazamiento) en eje y , en pixels. width : Ancho del widget en pixels. height : Alto del widget en pixels. Todas estos valores son en pixels. Posicionamiento relativo Todas estas propiedades son con respecto a las dimensiones del widget padre. relx : Offset en horizontal con respecto al padre, en proporci\u00f3n, los valores van de 0.0 ( 0% ) hasta 1.0 ( 100% ) rely : Offset en vertical con respecto al padre, en proporci\u00f3n, los valores van de 0.0 ( 0% ) hasta 1.0 ( 100% ) relwidth : Ancho del widget en proporci\u00f3n al padre, los valores van de 0.0 ( 0% ) hasta 1.0 ( 100% ). relheight : Alto del widget en proporci\u00f3n al padre, los valores van de 0.0 ( 0% ) hasta 1.0 ( 100% ). Se pueden combinar todos los par\u00e1metros, es decir, puede contener un par\u00e1metros relativo y el otro par\u00e1metro absoluto. Ejemplos from tkinter import Tk , Label , Entry , Button root = Tk () root . title ( \"Mi aplicaci\u00f3n\" ) L1 = Label ( root , text = \"Elemento 1\" ) L1 . place ( x = 0 , y = 10 ) E1 = Entry ( root ) E1 . place ( x = 100 , y = 10 ) L2 = Label ( root , text = \"Elemento 2\" ) L2 . place ( x = 0 , y = 50 ) E2 = Entry ( root ) E2 . place ( x = 100 , y = 50 ) L3 = Label ( root , text = \"Total\" ) L3 . place ( x = 10 , y = 150 ) E3 = Entry ( root ) E3 . place ( x = 100 , y = 150 ) B = Button ( root , text = \"Agregar\" ) B . place ( x = 150 , y = 100 ) root . geometry ( \"350x250\" ) root . mainloop () from tkinter import * root = Tk () root . geometry ( \"200x200\" ) etiqueta = Label ( root , text = \"Etiqueta con un texto\" , background = \"gray\" ) position_x = 16 # le doy un espaciado (margen) izquierdo de 16px position_y = 10 # le doy un espaciado (margen) superior de 10px etiqueta . place ( x = position_x , y = position_y ) boton = Button ( text = \"Da click en el boton\" ) boton_width = etiqueta . winfo_reqwidth () # quiero que el boton tenga el mismo ancho que el contenido de la etiqueta boton_position_y = position_y + etiqueta . winfo_reqheight () + 10 # sumo el alto de la etiqueta, con el margen que tiene la misma, mas 10px de separaci\u00f3n entre la etiqueta y el boton boton . place ( x = position_x , y = boton_position_y , width = boton_width ) mainloop () Referencias: https://www.tutorialspoint.com/python3/tk_place.htm","title":"Place Manager"},{"location":"capitulo_2/12_place/#manejador-place","text":"Este manejador de geometr\u00eda permite ubicar widgets indicando su posici\u00f3n exacta ( x e y ) respecto a su contenedor padre. Este manager de geometr\u00eda es muy vers\u00e1til y flexible para ir posicionando los elementos de manera libre.","title":"Manejador Place"},{"location":"capitulo_2/12_place/#sintaxis","text":"widget . place ( place_options ... ) Los argumentos que puede recibe la funci\u00f3n place son: anchor : El lugar exacto donde se va a posicionar el widget, las opciones que puede recibir son:- NW : northwest , arriaba a la izquierda N : North : Norte, arriba NE : arriaba a la derecha W : A la derecha CENTER : Centrado horizontalmente y verticalmente E : Derecha SW : Abajo a la izquierda S : Abajo SE : Abajo a la derecha bordermode : Modo del border del widget, por default es INSIDE , el otro valor puede ser OUTSIDE .","title":"Sintaxis"},{"location":"capitulo_2/12_place/#posicionamiento-absoluto","text":"x : Offset (desplazamiento) en eje x , en pixels. y : Offset (desplazamiento) en eje y , en pixels. width : Ancho del widget en pixels. height : Alto del widget en pixels. Todas estos valores son en pixels.","title":"Posicionamiento absoluto"},{"location":"capitulo_2/12_place/#posicionamiento-relativo","text":"Todas estas propiedades son con respecto a las dimensiones del widget padre. relx : Offset en horizontal con respecto al padre, en proporci\u00f3n, los valores van de 0.0 ( 0% ) hasta 1.0 ( 100% ) rely : Offset en vertical con respecto al padre, en proporci\u00f3n, los valores van de 0.0 ( 0% ) hasta 1.0 ( 100% ) relwidth : Ancho del widget en proporci\u00f3n al padre, los valores van de 0.0 ( 0% ) hasta 1.0 ( 100% ). relheight : Alto del widget en proporci\u00f3n al padre, los valores van de 0.0 ( 0% ) hasta 1.0 ( 100% ). Se pueden combinar todos los par\u00e1metros, es decir, puede contener un par\u00e1metros relativo y el otro par\u00e1metro absoluto.","title":"Posicionamiento relativo"},{"location":"capitulo_2/12_place/#ejemplos","text":"from tkinter import Tk , Label , Entry , Button root = Tk () root . title ( \"Mi aplicaci\u00f3n\" ) L1 = Label ( root , text = \"Elemento 1\" ) L1 . place ( x = 0 , y = 10 ) E1 = Entry ( root ) E1 . place ( x = 100 , y = 10 ) L2 = Label ( root , text = \"Elemento 2\" ) L2 . place ( x = 0 , y = 50 ) E2 = Entry ( root ) E2 . place ( x = 100 , y = 50 ) L3 = Label ( root , text = \"Total\" ) L3 . place ( x = 10 , y = 150 ) E3 = Entry ( root ) E3 . place ( x = 100 , y = 150 ) B = Button ( root , text = \"Agregar\" ) B . place ( x = 150 , y = 100 ) root . geometry ( \"350x250\" ) root . mainloop () from tkinter import * root = Tk () root . geometry ( \"200x200\" ) etiqueta = Label ( root , text = \"Etiqueta con un texto\" , background = \"gray\" ) position_x = 16 # le doy un espaciado (margen) izquierdo de 16px position_y = 10 # le doy un espaciado (margen) superior de 10px etiqueta . place ( x = position_x , y = position_y ) boton = Button ( text = \"Da click en el boton\" ) boton_width = etiqueta . winfo_reqwidth () # quiero que el boton tenga el mismo ancho que el contenido de la etiqueta boton_position_y = position_y + etiqueta . winfo_reqheight () + 10 # sumo el alto de la etiqueta, con el margen que tiene la misma, mas 10px de separaci\u00f3n entre la etiqueta y el boton boton . place ( x = position_x , y = boton_position_y , width = boton_width ) mainloop ()","title":"Ejemplos"},{"location":"capitulo_2/12_place/#referencias","text":"https://www.tutorialspoint.com/python3/tk_place.htm","title":"Referencias:"},{"location":"capitulo_2/13_grid/","text":"Manejador Grid Este manejador de geometr\u00eda es una especie de tabla o rejilla donde se ir\u00e1n colocando los elementos dentro del contenedor padre. Podemos ajustar cuantos secciones (celdas) abarcar\u00e1 un widget Sintaxis widget . grid ( grid_options ... ) Los argumentos que puede recibe la funci\u00f3n grid son: column : La columna donde se colocara el widget, por default es 0. row : Los renglones que ocupara el widget, por default es el primer rengl\u00f3n que este vaci\u00f3. columnspan : Cuantas columnas va a ocupar el widget, por default es 1. rowspan : La cantidad de renglones que va a ocupar el widget; por default es 1. padx / pady : Margen en x y y . Es la distancia entre widget y widget. Padding externo. padx / ipady : Padding en x y y . Es la distancia entre el contenido y la pared del widget. Padding interno. sticky : Por si necesitas que el widget abarque mas de una celda. By default, with sticky='', widget is centered in its cell. sticky may be the string concatenation of zero or more of N, E, S, W, NE, NW, SE, and SW, compass directions indicating the sides and corners of the cell to which widget sticks. rowconfigure : con el par\u00e1metro weight=1 indicamos que la fila se expanden o contrae columnconfigure : con el par\u00e1metro weight=1 indicamos que la columna se expanden o contrae Ejemplos","title":"Grid Manager"},{"location":"capitulo_2/13_grid/#manejador-grid","text":"Este manejador de geometr\u00eda es una especie de tabla o rejilla donde se ir\u00e1n colocando los elementos dentro del contenedor padre. Podemos ajustar cuantos secciones (celdas) abarcar\u00e1 un widget","title":"Manejador Grid"},{"location":"capitulo_2/13_grid/#sintaxis","text":"widget . grid ( grid_options ... ) Los argumentos que puede recibe la funci\u00f3n grid son: column : La columna donde se colocara el widget, por default es 0. row : Los renglones que ocupara el widget, por default es el primer rengl\u00f3n que este vaci\u00f3. columnspan : Cuantas columnas va a ocupar el widget, por default es 1. rowspan : La cantidad de renglones que va a ocupar el widget; por default es 1. padx / pady : Margen en x y y . Es la distancia entre widget y widget. Padding externo. padx / ipady : Padding en x y y . Es la distancia entre el contenido y la pared del widget. Padding interno. sticky : Por si necesitas que el widget abarque mas de una celda. By default, with sticky='', widget is centered in its cell. sticky may be the string concatenation of zero or more of N, E, S, W, NE, NW, SE, and SW, compass directions indicating the sides and corners of the cell to which widget sticks. rowconfigure : con el par\u00e1metro weight=1 indicamos que la fila se expanden o contrae columnconfigure : con el par\u00e1metro weight=1 indicamos que la columna se expanden o contrae","title":"Sintaxis"},{"location":"capitulo_2/13_grid/#ejemplos","text":"","title":"Ejemplos"},{"location":"capitulo_2/14_dialog_box/","text":"Ventanas de Dialogo - Message box Las ventanas emergentes, ventanas de di\u00e1logo o simplemente Pop Ups, son ventanas que te ayudan a guiar al usuario o para indicarle ciertas situaciones, tenemos varias opciones que vienen integradas en el paquete. ShowInfo : Ventana gen\u00e9rica para mostrar un aviso ShowWarning : Ventana para mostrar warnings ShowError : Ventana para mostrar errores. AskQuestion : Ventana para preguntar y tener una respuesta si o no AskOkCancel : Ventana para obtener la respuesta ok o cancelar AskRetryCancel : Ventana para obtener reintento o cancelar No se puede crear una ventana sin que antes exista una ventana Tk . Show Info from tkinter import messagebox messagebox . showinfo ( \"Titulo de ventana\" , \"Esta es una ventana informativa\" ) Show Warning from tkinter import messagebox messagebox . showwarning ( \"Alerta\" , \"Te estas quedando sin memoria\" ) Show Error from tkinter import messagebox messagebox . showerror ( \"Error\" , \"Ha ocurrido un error inesperado.\" ) Ask Question from tkinter import messagebox messagebox . askquestion ( \"Descarga\" , \"Cancelar descarga?\" ) Ask Ok Cancel from tkinter import messagebox messagebox . askokcancel ( \"Salir\" , \"\u00bfSobreescribir fichero actual?\" ) Ask Retry Cancel from tkinter import messagebox messagebox . askretrycancel ( \"Reintentar\" , \"No se puede conectar\" ) Referencias https://docs.hektorprofe.net/python/interfaces-graficas-con-tkinter/dialogs-dialogos/","title":"Message box"},{"location":"capitulo_2/14_dialog_box/#ventanas-de-dialogo-message-box","text":"Las ventanas emergentes, ventanas de di\u00e1logo o simplemente Pop Ups, son ventanas que te ayudan a guiar al usuario o para indicarle ciertas situaciones, tenemos varias opciones que vienen integradas en el paquete. ShowInfo : Ventana gen\u00e9rica para mostrar un aviso ShowWarning : Ventana para mostrar warnings ShowError : Ventana para mostrar errores. AskQuestion : Ventana para preguntar y tener una respuesta si o no AskOkCancel : Ventana para obtener la respuesta ok o cancelar AskRetryCancel : Ventana para obtener reintento o cancelar No se puede crear una ventana sin que antes exista una ventana Tk .","title":"Ventanas de Dialogo - Message box"},{"location":"capitulo_2/14_dialog_box/#show-info","text":"from tkinter import messagebox messagebox . showinfo ( \"Titulo de ventana\" , \"Esta es una ventana informativa\" )","title":"Show Info"},{"location":"capitulo_2/14_dialog_box/#show-warning","text":"from tkinter import messagebox messagebox . showwarning ( \"Alerta\" , \"Te estas quedando sin memoria\" )","title":"Show Warning"},{"location":"capitulo_2/14_dialog_box/#show-error","text":"from tkinter import messagebox messagebox . showerror ( \"Error\" , \"Ha ocurrido un error inesperado.\" )","title":"Show Error"},{"location":"capitulo_2/14_dialog_box/#ask-question","text":"from tkinter import messagebox messagebox . askquestion ( \"Descarga\" , \"Cancelar descarga?\" )","title":"Ask Question"},{"location":"capitulo_2/14_dialog_box/#ask-ok-cancel","text":"from tkinter import messagebox messagebox . askokcancel ( \"Salir\" , \"\u00bfSobreescribir fichero actual?\" )","title":"Ask Ok Cancel"},{"location":"capitulo_2/14_dialog_box/#ask-retry-cancel","text":"from tkinter import messagebox messagebox . askretrycancel ( \"Reintentar\" , \"No se puede conectar\" )","title":"Ask Retry Cancel"},{"location":"capitulo_2/14_dialog_box/#referencias","text":"https://docs.hektorprofe.net/python/interfaces-graficas-con-tkinter/dialogs-dialogos/","title":"Referencias"},{"location":"capitulo_2/practicas/","text":"Practicas Generador de contrase\u00f1as seguras Ley de Ohm Capacitor C\u00f3digo de colores de Resistencia","title":"Practicas"},{"location":"capitulo_2/practicas/#practicas","text":"","title":"Practicas"},{"location":"capitulo_2/practicas/#generador-de-contrasenas-seguras","text":"","title":"Generador de contrase\u00f1as seguras"},{"location":"capitulo_2/practicas/#ley-de-ohm","text":"","title":"Ley de Ohm"},{"location":"capitulo_2/practicas/#capacitor","text":"","title":"Capacitor"},{"location":"capitulo_2/practicas/#codigo-de-colores-de-resistencia","text":"","title":"C\u00f3digo de colores de Resistencia"},{"location":"iot/","text":"IoT","title":"IoT"},{"location":"iot/#iot","text":"","title":"IoT"},{"location":"iot/01_wifi/","text":"WiFi The network module is used to configure the WiFi connection. There are two WiFi interfaces, one for the station (when the ESP8266 connects to a router) and one for the access point (for other devices to connect to the ESP8266). Create instances of these objects using: El modulo de red que se usa para conectar el ESP8266 es el WiFi. Hay dos interfaces, una es como estaci\u00f3n ( station ), cuando se conectar a un router y el otro es como punto de acceso ( access point ), Para que otro dispositivo se conecte a \u00e9l . Modo estaci\u00f3n station Modo Punto de acceso access point La forma de crear esos objetos es como se muestra a continuaci\u00f3n: import network sta_if = network . WLAN ( network . STA_IF ) #station ap_if = network . WLAN ( network . AP_IF ) # access point Se puede verificar si est\u00e1n activas: sta_if . active () False ap_if . active () True Con el siguiente m\u00e9todo vemos la configuraci\u00f3n: ap_if . ifconfig () ('192.168.4.1', '255.255.255.0', '192.168.4.1', '8.8.8.8') Cuando se configura ya sea como station o access point se debe activar, con el siguiente m\u00e9todo: sta_if . active ( True ) Para conectar el m\u00f3dulo a una red WiFi sta_if . connect ( '<your ESSID>' , '<your password>' ) Para verificar si la conexi\u00f3n con la red esta hecha: sta_if . isconnected () Una vez estamos conectados, podemos ver la IP que tenemos con el siguiente m\u00e9todo: sta_if . ifconfig () ('192.168.0.2', '255.255.255.0', '192.168.0.1', '8.8.8.8') Un ejemplo de funci\u00f3n para conectar a la red de manera autom\u00e1tica y que avise una vez la conexi\u00f3n este lista def do_connect (): import network sta_if = network . WLAN ( network . STA_IF ) if not sta_if . isconnected (): print ( 'connecting to network...' ) sta_if . active ( True ) sta_if . connect ( '<essid>' , '<password>' ) while not sta_if . isconnected (): pass print ( 'network config:' , sta_if . ifconfig ())","title":"WiFi"},{"location":"iot/01_wifi/#wifi","text":"The network module is used to configure the WiFi connection. There are two WiFi interfaces, one for the station (when the ESP8266 connects to a router) and one for the access point (for other devices to connect to the ESP8266). Create instances of these objects using: El modulo de red que se usa para conectar el ESP8266 es el WiFi. Hay dos interfaces, una es como estaci\u00f3n ( station ), cuando se conectar a un router y el otro es como punto de acceso ( access point ), Para que otro dispositivo se conecte a \u00e9l . Modo estaci\u00f3n station Modo Punto de acceso access point La forma de crear esos objetos es como se muestra a continuaci\u00f3n: import network sta_if = network . WLAN ( network . STA_IF ) #station ap_if = network . WLAN ( network . AP_IF ) # access point Se puede verificar si est\u00e1n activas: sta_if . active () False ap_if . active () True Con el siguiente m\u00e9todo vemos la configuraci\u00f3n: ap_if . ifconfig () ('192.168.4.1', '255.255.255.0', '192.168.4.1', '8.8.8.8') Cuando se configura ya sea como station o access point se debe activar, con el siguiente m\u00e9todo: sta_if . active ( True ) Para conectar el m\u00f3dulo a una red WiFi sta_if . connect ( '<your ESSID>' , '<your password>' ) Para verificar si la conexi\u00f3n con la red esta hecha: sta_if . isconnected () Una vez estamos conectados, podemos ver la IP que tenemos con el siguiente m\u00e9todo: sta_if . ifconfig () ('192.168.0.2', '255.255.255.0', '192.168.0.1', '8.8.8.8') Un ejemplo de funci\u00f3n para conectar a la red de manera autom\u00e1tica y que avise una vez la conexi\u00f3n este lista def do_connect (): import network sta_if = network . WLAN ( network . STA_IF ) if not sta_if . isconnected (): print ( 'connecting to network...' ) sta_if . active ( True ) sta_if . connect ( '<essid>' , '<password>' ) while not sta_if . isconnected (): pass print ( 'network config:' , sta_if . ifconfig ())","title":"WiFi"},{"location":"iot/02_server/","text":"Server Se puede configurar el modulo ESP8266 como un access point, y si otros dispositivos se van a conectar con nosotros, la manera de mostrarles la actividad es creando un servidor web b\u00e1sico y devolviendo la respuesta en un navegador. El siguiente c\u00f3digo crea un servidor HTTP simple, la cual devuelve una pagina web con una tabla de los estados de todos los pines GPIO: import machine pins = [ machine . Pin ( i , machine . Pin . IN ) for i in ( 0 , 2 , 4 , 5 , 12 , 13 , 14 , 15 )] html = \"\"\"<!DOCTYPE html> <html> <head> <title>ESP8266 Pins</title> </head> <body> <h1>ESP8266 Pins</h1> <table border=\"1\"> <tr><th>Pin</th><th>Value</th></tr> %s </table> </body> </html> \"\"\" import socket addr = socket . getaddrinfo ( '0.0.0.0' , 80 )[ 0 ][ - 1 ] s = socket . socket () s . bind ( addr ) s . listen ( 1 ) print ( 'listening on' , addr ) while True : cl , addr = s . accept () print ( 'client connected from' , addr ) cl_file = cl . makefile ( 'rwb' , 0 ) while True : line = cl_file . readline () if not line or line == b ' \\r\\n ' : break rows = [ '<tr><td> %s </td><td> %d </td></tr>' % ( str ( p ), p . value ()) for p in pins ] response = html % ' \\n ' . join ( rows ) cl . send ( 'HTTP/1.0 200 OK \\r\\n Content-type: text/html \\r\\n\\r\\n ' ) cl . send ( response ) cl . close () No se profundizara en estos temas. Si deseas que se realicen ejemplos o detallar m\u00e1s usos de aplicaci\u00f3n enviarme un correo de mi canal oficial https://www.youtube.com/c/XizuthTech o xizuth@gmail.com","title":"Server"},{"location":"iot/02_server/#server","text":"Se puede configurar el modulo ESP8266 como un access point, y si otros dispositivos se van a conectar con nosotros, la manera de mostrarles la actividad es creando un servidor web b\u00e1sico y devolviendo la respuesta en un navegador. El siguiente c\u00f3digo crea un servidor HTTP simple, la cual devuelve una pagina web con una tabla de los estados de todos los pines GPIO: import machine pins = [ machine . Pin ( i , machine . Pin . IN ) for i in ( 0 , 2 , 4 , 5 , 12 , 13 , 14 , 15 )] html = \"\"\"<!DOCTYPE html> <html> <head> <title>ESP8266 Pins</title> </head> <body> <h1>ESP8266 Pins</h1> <table border=\"1\"> <tr><th>Pin</th><th>Value</th></tr> %s </table> </body> </html> \"\"\" import socket addr = socket . getaddrinfo ( '0.0.0.0' , 80 )[ 0 ][ - 1 ] s = socket . socket () s . bind ( addr ) s . listen ( 1 ) print ( 'listening on' , addr ) while True : cl , addr = s . accept () print ( 'client connected from' , addr ) cl_file = cl . makefile ( 'rwb' , 0 ) while True : line = cl_file . readline () if not line or line == b ' \\r\\n ' : break rows = [ '<tr><td> %s </td><td> %d </td></tr>' % ( str ( p ), p . value ()) for p in pins ] response = html % ' \\n ' . join ( rows ) cl . send ( 'HTTP/1.0 200 OK \\r\\n Content-type: text/html \\r\\n\\r\\n ' ) cl . send ( response ) cl . close () No se profundizara en estos temas. Si deseas que se realicen ejemplos o detallar m\u00e1s usos de aplicaci\u00f3n enviarme un correo de mi canal oficial https://www.youtube.com/c/XizuthTech o xizuth@gmail.com","title":"Server"},{"location":"iot/03_request/","text":"Request Podemos realizar peticiones HTTP una vez conectados a una red WiFi, esto es muy util cuando necesitamos informaci\u00f3n de una API, enviar informaci\u00f3n a una base de datos, notificar a un webhook, etc. La siguiente funci\u00f3n realiza una petici\u00f3n http a una URL y lo que devuelve lo imprime por terminal. def http_get ( url ): import socket _ , _ , host , path = url . split ( '/' , 3 ) addr = socket . getaddrinfo ( host , 80 )[ 0 ][ - 1 ] s = socket . socket () s . connect ( addr ) s . send ( bytes ( 'GET / %s HTTP/1.0 \\r\\n Host: %s \\r\\n\\r\\n ' % ( path , host ), 'utf8' )) while True : data = s . recv ( 100 ) if data : print ( str ( data , 'utf8' ), end = '' ) else : break s . close () No se profundizara en estos temas. Si deseas que se realicen ejemplos o detallar m\u00e1s usos de aplicaci\u00f3n enviarme un correo de mi canal oficial https://www.youtube.com/c/XizuthTech o xizuth@gmail.com","title":"Request"},{"location":"iot/03_request/#request","text":"Podemos realizar peticiones HTTP una vez conectados a una red WiFi, esto es muy util cuando necesitamos informaci\u00f3n de una API, enviar informaci\u00f3n a una base de datos, notificar a un webhook, etc. La siguiente funci\u00f3n realiza una petici\u00f3n http a una URL y lo que devuelve lo imprime por terminal. def http_get ( url ): import socket _ , _ , host , path = url . split ( '/' , 3 ) addr = socket . getaddrinfo ( host , 80 )[ 0 ][ - 1 ] s = socket . socket () s . connect ( addr ) s . send ( bytes ( 'GET / %s HTTP/1.0 \\r\\n Host: %s \\r\\n\\r\\n ' % ( path , host ), 'utf8' )) while True : data = s . recv ( 100 ) if data : print ( str ( data , 'utf8' ), end = '' ) else : break s . close () No se profundizara en estos temas. Si deseas que se realicen ejemplos o detallar m\u00e1s usos de aplicaci\u00f3n enviarme un correo de mi canal oficial https://www.youtube.com/c/XizuthTech o xizuth@gmail.com","title":"Request"},{"location":"iot/04_mqtt/","text":"MQTT MQTT es un protocolo ligero de tipo Maquina-Maquina( Machine-to-Machine ), lo que significa que es para comunicaci\u00f3n entre computadoras. El modelo de este protocolo es publicador-subscriptor ( publish-subscribe ). Usualmente corre sobre el protocolo TCP/IP, sin embargo, esta hecho para operar en conexiones de ancho de banda limitados. Referencia wikipedia Podemos ver en la siguiente arquitectura de manera general como funciona una arquitectura MQTT b\u00e1sica, con un broker el cual gestiona todas las conexiones y env\u00edan los paquetes a su destino, y los elementos que son clientes que env\u00edan (publican) y clientes que reciben (subscriptores) los t\u00f3picos ( topics ) que desean monitorizar. Conceptos claves Estos conceptos son vitales para comprende los nombres de cada elemento y cual es su funci\u00f3n. Broker ( Servidor ) El broker es equivalente al servidor, el cual gestiona todas las conexiones de los clientes, subscriptores y publicadores , es decir, se conectan a \u00e9l; el broker conoce a todos los clientes y sabra que publicador manda qu\u00e9 dato para redireccionarlo al subscriptor o subscriptores correspondientes. Cliente - Subscriptor ( subscriber ) Es el cliente que quiera recibir el mensaje del alg\u00fan publicador por medio de un topic . Cliente - Publicador ( publisher ) Es el cliente que manda un mensaje a traves de alg\u00fan topic . T\u00f3pico ( topic ) El t\u00f3pico es el nombre que se le da a la ruta por la cual se envi\u00e1 o recibe un dato. Es decir, el publicador envi\u00e1 su dato a traves de esa ruta (topic) y los subscriptores que est\u00e9n registrados en ese topic recibir\u00e1n la informaci\u00f3n. Nota: Un mismo dispositivo puede ser publisher y subscriber y pueden estar recibiendo y enviando en diferentes topics . Gu\u00eda completa de MQTT Brokers p\u00fablicos A traves de internet hay varios brokers gratuitos con fines educativos y de prueba, no se recomiendan para uso en producci\u00f3n, o para transferencia de informaci\u00f3n sensible. Lista de brokers Documentaci\u00f3n de MQTT en mosquitto Por default se sabe que los puertos 1883 son sin encriptaci\u00f3n , puertos 8883 encriptado (SSL). Project Eclipse mqtt.eclipseprojects.io This is a public test MQTT broker service. It currently listens on the following ports: 1883 : MQTT over unencrypted TCP 8883 : MQTT over encrypted TCP 80 : MQTT over unencrypted WebSockets (note: URL must be /mqtt ) 443 : MQTT over encrypted WebSockets (note: URL must be /mqtt ) mqtt.eclipseprojects.io:1883 mqtt.eclipseprojects.io:8883 Informaci\u00f3n de eclipseprojects HiveMQ Broker http://www.mqtt-dashboard.com/ Client dashboard http://www.hivemq.com/demos/websocket-client/ broker.hivemq.com mqtt: 1883 ws: 8000 Shiftr.io broker.shiftr.io:1883 (mqtt) broker.shiftr.io:8883 (mqtts) broker.shiftr.io:80 (websocket) broker.shiftr.io:443 (websocket secure) Mosquitto This is test.mosquitto.org. It hosts a publicly available Eclipse Mosquitto MQTT server/broker. MQTT is a very lightweight protocol that uses a publish/subscribe model. This makes it suitable for \"machine to machine\" messaging such as with low power sensors or mobile devices. For more information on MQTT, see http://mqtt.org/ or the Mosquitto MQTT man page. The server The server listens on the following ports: 1883 : MQTT, unencrypted, unauthenticated 1884 : MQTT, unencrypted, authenticated 8883 : MQTT, encrypted, unauthenticated 8884 : MQTT, encrypted, client certificate required 8885 : MQTT, encrypted, authenticated 8886 : MQTT, encrypted, unauthenticated 8887 : MQTT, encrypted, server certificate deliberately expired 8080 : MQTT over WebSockets, unencrypted, unauthenticated 8081 : MQTT over WebSockets, encrypted, unauthenticated 8090 : MQTT over WebSockets, unencrypted, authenticated 8091 : MQTT over WebSockets, encrypted, authenticated Ir a su web Mejores pr\u00e1cticas para topics https://www.hivemq.com/blog/mqtt-essentials-part-5-mqtt-topics-best-practices/ Others Brokers ioticos flespi dioty iotwithus mqtt.su List brokers Fuente M\u00e1s informaci\u00f3n en mqtt.org Clientes Existen diversas aplicaciones para poder realizar el monitoreo de los dispositivos IoT a traves del protocolo MQTT, se pueden ocupar cualquiera, pero aqu\u00ed vamos a utilizar cualquiera de las siguientes MQTT Explorer MQTT X","title":"MQTT"},{"location":"iot/04_mqtt/#mqtt","text":"MQTT es un protocolo ligero de tipo Maquina-Maquina( Machine-to-Machine ), lo que significa que es para comunicaci\u00f3n entre computadoras. El modelo de este protocolo es publicador-subscriptor ( publish-subscribe ). Usualmente corre sobre el protocolo TCP/IP, sin embargo, esta hecho para operar en conexiones de ancho de banda limitados. Referencia wikipedia Podemos ver en la siguiente arquitectura de manera general como funciona una arquitectura MQTT b\u00e1sica, con un broker el cual gestiona todas las conexiones y env\u00edan los paquetes a su destino, y los elementos que son clientes que env\u00edan (publican) y clientes que reciben (subscriptores) los t\u00f3picos ( topics ) que desean monitorizar.","title":"MQTT"},{"location":"iot/04_mqtt/#conceptos-claves","text":"Estos conceptos son vitales para comprende los nombres de cada elemento y cual es su funci\u00f3n.","title":"Conceptos claves"},{"location":"iot/04_mqtt/#broker-servidor","text":"El broker es equivalente al servidor, el cual gestiona todas las conexiones de los clientes, subscriptores y publicadores , es decir, se conectan a \u00e9l; el broker conoce a todos los clientes y sabra que publicador manda qu\u00e9 dato para redireccionarlo al subscriptor o subscriptores correspondientes.","title":"Broker (Servidor)"},{"location":"iot/04_mqtt/#cliente-subscriptor-subscriber","text":"Es el cliente que quiera recibir el mensaje del alg\u00fan publicador por medio de un topic .","title":"Cliente - Subscriptor (subscriber)"},{"location":"iot/04_mqtt/#cliente-publicador-publisher","text":"Es el cliente que manda un mensaje a traves de alg\u00fan topic .","title":"Cliente - Publicador (publisher)"},{"location":"iot/04_mqtt/#topico-topic","text":"El t\u00f3pico es el nombre que se le da a la ruta por la cual se envi\u00e1 o recibe un dato. Es decir, el publicador envi\u00e1 su dato a traves de esa ruta (topic) y los subscriptores que est\u00e9n registrados en ese topic recibir\u00e1n la informaci\u00f3n. Nota: Un mismo dispositivo puede ser publisher y subscriber y pueden estar recibiendo y enviando en diferentes topics . Gu\u00eda completa de MQTT","title":"T\u00f3pico (topic)"},{"location":"iot/04_mqtt/#brokers-publicos","text":"A traves de internet hay varios brokers gratuitos con fines educativos y de prueba, no se recomiendan para uso en producci\u00f3n, o para transferencia de informaci\u00f3n sensible.","title":"Brokers p\u00fablicos"},{"location":"iot/04_mqtt/#lista-de-brokers","text":"Documentaci\u00f3n de MQTT en mosquitto Por default se sabe que los puertos 1883 son sin encriptaci\u00f3n , puertos 8883 encriptado (SSL).","title":"Lista de brokers"},{"location":"iot/04_mqtt/#project-eclipse","text":"","title":"Project Eclipse"},{"location":"iot/04_mqtt/#mqtteclipseprojectsio","text":"This is a public test MQTT broker service. It currently listens on the following ports: 1883 : MQTT over unencrypted TCP 8883 : MQTT over encrypted TCP 80 : MQTT over unencrypted WebSockets (note: URL must be /mqtt ) 443 : MQTT over encrypted WebSockets (note: URL must be /mqtt ) mqtt.eclipseprojects.io:1883 mqtt.eclipseprojects.io:8883 Informaci\u00f3n de eclipseprojects","title":"mqtt.eclipseprojects.io"},{"location":"iot/04_mqtt/#hivemq","text":"Broker http://www.mqtt-dashboard.com/ Client dashboard http://www.hivemq.com/demos/websocket-client/ broker.hivemq.com mqtt: 1883 ws: 8000","title":"HiveMQ"},{"location":"iot/04_mqtt/#shiftrio","text":"broker.shiftr.io:1883 (mqtt) broker.shiftr.io:8883 (mqtts) broker.shiftr.io:80 (websocket) broker.shiftr.io:443 (websocket secure)","title":"Shiftr.io"},{"location":"iot/04_mqtt/#mosquitto","text":"This is test.mosquitto.org. It hosts a publicly available Eclipse Mosquitto MQTT server/broker. MQTT is a very lightweight protocol that uses a publish/subscribe model. This makes it suitable for \"machine to machine\" messaging such as with low power sensors or mobile devices. For more information on MQTT, see http://mqtt.org/ or the Mosquitto MQTT man page. The server The server listens on the following ports: 1883 : MQTT, unencrypted, unauthenticated 1884 : MQTT, unencrypted, authenticated 8883 : MQTT, encrypted, unauthenticated 8884 : MQTT, encrypted, client certificate required 8885 : MQTT, encrypted, authenticated 8886 : MQTT, encrypted, unauthenticated 8887 : MQTT, encrypted, server certificate deliberately expired 8080 : MQTT over WebSockets, unencrypted, unauthenticated 8081 : MQTT over WebSockets, encrypted, unauthenticated 8090 : MQTT over WebSockets, unencrypted, authenticated 8091 : MQTT over WebSockets, encrypted, authenticated Ir a su web Mejores pr\u00e1cticas para topics https://www.hivemq.com/blog/mqtt-essentials-part-5-mqtt-topics-best-practices/","title":"Mosquitto"},{"location":"iot/04_mqtt/#others-brokers","text":"ioticos flespi dioty iotwithus mqtt.su List brokers Fuente M\u00e1s informaci\u00f3n en mqtt.org","title":"Others Brokers"},{"location":"iot/04_mqtt/#clientes","text":"Existen diversas aplicaciones para poder realizar el monitoreo de los dispositivos IoT a traves del protocolo MQTT, se pueden ocupar cualquiera, pero aqu\u00ed vamos a utilizar cualquiera de las siguientes MQTT Explorer MQTT X","title":"Clientes"},{"location":"iot/proyectos_de_referencia/","text":"Listado de proyectos para desarrollo Micro \u00c1reas Especificaciones Ecolog\u00eda Las especificaciones se deben ver con el maestro de Ecolog\u00eda Victo Marique, el aprobar\u00e1 lo que necesita Equipamiento Mecatr\u00f3nica Equipamiento de la automatizaci\u00f3n de alguna \u00e1rea correspondiente a Mecatr\u00f3nica (MK1, MK2, MK3 o CC3) Libre Eres libre de crear un proyecto propio, me comentan y se valida, con las especificaciones m\u00ednimas a desarrollar Instrumento de laboratorio El \u00e1rea de laboratorio solicita algunos proyectos para automatizaci\u00f3n, actualizaci\u00f3n o creaci\u00f3n para uso Kit did\u00e1ctico El kit did\u00e1ctico lo deben ver con sus maestros de f\u00edsica, qu\u00edmica, matem\u00e1ticas, etc Instrumento de laboratorio Instrumento Especificaciones Agitador orbital Control de horno Se debe crear un control para un horno, el cual su temperatura m\u00e1xima ser\u00e1 hasta 150\u00ba Phmetro Un instrumento para medici\u00f3n de PH Secador de pipetas Este instrumento es para el secado de pipetas de laboratorio Contador de colonias Se solicitan 5 contadores de colonias (Proyecto especial) Termometro refr\u00ed Se solicita un indicador de temperatura para un refrigerador Estufa de cultivo Se debe controlar la temperatura de una estufa entre un rango de 0 a 60\u00ba Dispensador de muestra Se requiere un dispensador de liquidos, entre medidas de 0 a 20mL Agitador vortex Mecatr\u00f3nica Los proyectos para el \u00e1rea de mecatr\u00f3nica se deben aprobar Libre Ecolog\u00eda Kit did\u00e1ctico","title":"Listado de proyectos para desarrollo Micro"},{"location":"iot/proyectos_de_referencia/#listado-de-proyectos-para-desarrollo-micro","text":"\u00c1reas Especificaciones Ecolog\u00eda Las especificaciones se deben ver con el maestro de Ecolog\u00eda Victo Marique, el aprobar\u00e1 lo que necesita Equipamiento Mecatr\u00f3nica Equipamiento de la automatizaci\u00f3n de alguna \u00e1rea correspondiente a Mecatr\u00f3nica (MK1, MK2, MK3 o CC3) Libre Eres libre de crear un proyecto propio, me comentan y se valida, con las especificaciones m\u00ednimas a desarrollar Instrumento de laboratorio El \u00e1rea de laboratorio solicita algunos proyectos para automatizaci\u00f3n, actualizaci\u00f3n o creaci\u00f3n para uso Kit did\u00e1ctico El kit did\u00e1ctico lo deben ver con sus maestros de f\u00edsica, qu\u00edmica, matem\u00e1ticas, etc","title":"Listado de proyectos para desarrollo Micro"},{"location":"iot/proyectos_de_referencia/#instrumento-de-laboratorio","text":"Instrumento Especificaciones Agitador orbital Control de horno Se debe crear un control para un horno, el cual su temperatura m\u00e1xima ser\u00e1 hasta 150\u00ba Phmetro Un instrumento para medici\u00f3n de PH Secador de pipetas Este instrumento es para el secado de pipetas de laboratorio Contador de colonias Se solicitan 5 contadores de colonias (Proyecto especial) Termometro refr\u00ed Se solicita un indicador de temperatura para un refrigerador Estufa de cultivo Se debe controlar la temperatura de una estufa entre un rango de 0 a 60\u00ba Dispensador de muestra Se requiere un dispensador de liquidos, entre medidas de 0 a 20mL Agitador vortex","title":"Instrumento de laboratorio"},{"location":"iot/proyectos_de_referencia/#mecatronica","text":"Los proyectos para el \u00e1rea de mecatr\u00f3nica se deben aprobar","title":"Mecatr\u00f3nica"},{"location":"iot/proyectos_de_referencia/#libre","text":"","title":"Libre"},{"location":"iot/proyectos_de_referencia/#ecologia","text":"","title":"Ecolog\u00eda"},{"location":"iot/proyectos_de_referencia/#kit-didactico","text":"","title":"Kit did\u00e1ctico"},{"location":"tags.html","text":"Contents grouped by tag","title":"Tags"},{"location":"tags.html#contents-grouped-by-tag","text":"","title":"Contents grouped by tag"}]}